%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: coverpage.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Administrator
%%CreationDate: 2017/7/30, 19:35:52
%%BoundingBox: 49 35 561 751
%%HiResBoundingBox: 0 0 612 792
%%CropBox: 0 0 612 792
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	1 index dup/ID get exch/Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.30 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.30 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.30 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get ne dup
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
				if
				end
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} (% &end XMP packet& %) ReadBypdfmark_5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xap:CreateDate="2017-07-26T21:54:49+08:00"
   xap:CreatorTool="Doro PDF Writer [1.92] [http://j.mp/the_sz]"
   xap:ModifyDate="2017-07-26T21:54:49+08:00"
   dc:format="application/pdf"
   pdf:Keywords="Visio-"
   pdf:Producer="">
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Visio-</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:creator>
    <rdf:Seq>
     <rdf:li/>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Visio-</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
/0 
<<
/0 
[/DeviceRGB] /CSA add_res
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 15 
/Lookup <~
!!!$!s8W)trr)for;?Kiqtp6dqYBs_q"XXYp\4CTp@\+Oo^qeIoCMPDo'u8?~>
>>
/CSD add_res
/1 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 255 
/Lookup <~
!!!$!s8W)trqlTip%A"Ko()>@nbW+YnF5r>o^qV@n+6/BmdBN=q>'FFmHj3+lg*m%lK\0>q!%&-kih7/
rVbpBkP+`Fk2tgfjlPRajS&<@j5]1Zio8qUiS`YPhr!>JhVR)Eh;$f@gY:K:g=k65g"=s0!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
>>
/CSD add_res
/2 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 255 
/Lookup <~
!!!$!s8S5.s,bS,O3dieci/sMrf,5&NQqH]c2NXGreo#!MTl$VbPd:@rJ8YqLs#[Ob5@"9r.W8jKZO(E
aSUV1qgulcK#[\=`qt;+qgcZ^J&V85`;4o#qL$3WI)Gc,_YJMpq0BgPGes0"_"`,hpiaIJG/*fp^\Drc
pN4.DF1q<g^%ZNZpMmk>E4km`]Cp0Tp27M9DS#OY](KpNok_23CUs+R\FjUHokM#/Bt*_J\+F=AoObQ(
B!q5A[I[t:o456"A$ki;Zh%Y4nmSip@']?1Z1;8,nQrHi?*Nj(YOPi#nQW0c>-@?tY4,Srn5ug^=01mm
XRB2jmo?FW<3#CcWpWfbmS^%P;5rt\W:!K\mSKhK:T*STVsR6Vm7jJF9Vq,MV<gjOlq4)?!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
>>
/CSD add_res
/3 
<<
/CSA /0 get_csa_by_name
/MappedCSA null
/HiVal 255 
/Lookup <~
!!!$!s8U<^mE<K9bJ`bi`9bXalcI'1ahm>a_Wo4Yl,UX)a2$oY_!&bPkJY*s_nG0K]]?o@j1r:e^q/O?
]&LK8iP)k]^:<+7\DY'0hn6GU]XH\/[beU(h7C#M\[C5'[+r0ugUOTE\$OetZJ)amfs\0=[B\AkYh-4b
f!;I/Z)uN[XOFASe$#h#Y,g!RWmRrKdB0CpXJsRJW6_NCc`<thWi+.AVTl'9bbq8[VPD;1U<04*aeYWO
US5c(TZ<e"a.f3GTqB>uT#I@o`Lrd?T:NolS]%+i_k!=8SX[KdS&1\a_4-n0S!h'\RD>8Y^R:J(R$bUT
QbJfQ]pG%uQBo1LQ+WBI]9SVmPa&bCPIUYn!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
~>
>>
/CSD add_res
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -792 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 792 li
612 792 li
612 0 li
cp
clp
[1 0 0 1 0 0 ]ct
50.4 755.88 mo
560.28 755.88 li
560.28 34.56 li
50.4 34.56 li
cp
false sop
1 1 1 rgb
ef
48 190.32 mo
562.68 190.32 li
562.68 32.04 li
48 32.04 li
cp
gsave
/0 /CSD get_res idxcs
clp
[1 0 0 -1 0 792 ]ct
[514.68 0 0 158.28 48 601.68 ]ct
snap_to_device
<<
/T 1
/W 1572 
/H 484 
/M[1572 0 0 -484 0 484 ]
/BC 4 
/D[0 15 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHM%P=O
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<hOJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHM%P=OJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<hOJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHM%P=OJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<hOJe<SHJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHM%P=OJe<SHJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<hOJe<SHJe<SHJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHM%P=OJe<SHJe<SHJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<hOJe<SHJe<SHJe<SHJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHM%P=OJe<SHJe<SHJe<SHJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<hOJe<SHJe<SHJe<SHJe<SHJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHM%P=OJe<SHJe<SHJe<SHJe<SHJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<hOJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHM%P=OJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<hOJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHM%P=OJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<hOJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHM%P=OJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<hOJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHM%P=OJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<hOJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHM%P=OJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SH
Je<SHJe<SHJe<SHJe<hOJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SH
Je<SHJe<SHJe<SHM%P=OJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SH
Je<SHJe<SHJe<hOJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SH
Je<SHJe<SHM%P=OJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SH
Je<SHJe<hOJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SH
Je<SHM%P=OJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SH
Je<hOJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SH
M%P=OJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<hO
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHM%P=O
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<hOJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHM%P=OJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<hOJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHM%P=OJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<hOJe<SHJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHM%P=OJe<SHJe<SHJe<SH
Je<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<SHJe<hOJe<SHJe<SHJe<SHJe<SH
Je<SHJe<SHbRq<.Jg,djJg,djJg.oQpCY^qJg,djJg,djJg.'9pCZR4Jg,djJg,djJg-4!r"8i=LE_<o
Jg,djJg,djmNVB;T-Ak2Jg,djJg,djefsi#[j$DJJg,djJg,dj^*<:`cQ[rbJg,djJg,djVBYaHk9>L%
Jg,djJg,djN["B5r"4].Jg,djJg,djJg0V,pCX#AJg,djJg,djJg/bipCXkYJg,djJg,djJg.oQpCY^q
Jg,djJg,djJg.'9pCZR4Jg,djJg,djJg-4!r"8i=LE_<oJg,djJg,djmNVB;T-Ak2Jg,djJg,djefsi#
[j$DJJg,djJg,dj^*<:`cQ[rbJg,djJg,djVBYaHk9>L%Jg,djJg,djN["B5r"4].Jg,djJg,djJg0V,
pCX#AJg,djJg,djJg/bipCXkYJg,djJg,djJg.oQpCY^qJg,djJg,djJg.'9pCZR4Jg,djJg,djJg-4!
r"8i=LE_<oJg,djJg,djmNVB;T-Ak2Jg,djJg,djefsi#[j$DJJg,djJg,dj^*<:`cQ[rbJg,djJg,dj
VBYaHk9>L%Jg,djJg,djN["B5r"4].Jg,djJg,djJg0V,pCX#AJg,djJg,djJg/bip^mN>,IfO]1P.E7
1P.E71VY^H1*QH*!>6X(1P.E71P.E71P.E\1BB6Sq%3W?,Npq81P.E71P.E71QO<m1*QT.r=K&C,D\.-
1P.E71P.E71[d+#1*QH*!>6WM1P.E71P.E71P.F71BB6Sq%3W?,IfO]1P.E71P.E71VY^H1*QH*!>6X(
1P.E71P.E71P.E\1BB6Sq%3W?,Npq81P.E71P.E71QO<m1*QT.r=K&C,D\.-1P.E71P.E71[d+#1*QH*
!>6WM1P.E71P.E71P.F71BB6Sq%3W?,IfO]1P.E71P.E71VY^H1*QH*!>6X(1P.E71P.E71P.E\1BB6S
q%3W?,Npq81P.E71P.E71QO<m1*QT.r=K&C,D\.-1P.E71P.E71[d+#1*QH*!>6WM1P.E71P.E71P.F7
1BB6Sq%3W?,IfO]1P.E71P.E71VY^H1*QH*!>6X(1P.E71P.E71P.E\1BB6Sq%3W?,Npq81P.E71P.E7
1QO<m1*QT.r=K&C,D\.-1P.E71P.E71[d+#1*QH*!>6WM1P.E71P.E71P.F71BB6Sq%3W?,IfO]1P.E7
1P.E71VY^H1*QH*!>6X(1P.E71P.E71P.E\1BB6Sq%3W?,Npq81P.E71P.E71QO<m1*QT.r=K&C,D\.-
1P.E71P.E71[d+#1*QH*!>75^7"RgY7"RgY7"RhY6ifXuq%3W?1q5r*7"RgY7"RgY7))+j6Qu7;!>769
7"RgY7"RgY7"Rh)6ifXuq%3W?2!@>Z7"RgY7"RgY7#s_:6QuC?r=K&C1l+PO7"RgY7"RgY7.3ME6Qu7;
!>75^7"RgY7"RgY7"RhY6ifXuq%3W?1q5r*7"RgY7"RgY7))+j6Qu7;!>7697"RgY7"RgY7"Rh)6ifXu
q%3W?2!@>Z7"RgY7"RgY7#s_:6QuC?r=K&C1l+PO7"RgY7"RgY7.3ME6Qu7;!>75^7"RgY7"RgY7"RhY
6ifXuq%3W?1q5r*7"RgY7"RgY7))+j6Qu7;!>7697"RgY7"RgY7"Rh)6ifXuq%3W?2!@>Z7"RgY7"RgY
7#s_:6QuC?r=K&C1l+PO7"RgY7"RgY7.3ME6Qu7;!>75^7"RgY7"RgY7"RhY6ifXuq%3W?1q5r*7"RgY
7"RgY7))+j6Qu7;!>7697"RgY7"RgY7"Rh)6ifXuq%3W?2!@>Z7"RgY7"RgY7#s_:6QuC?r=K&C1l+PO
7"RgY7"RgY7.3ME6Qu7;!>7ho<J"5&<J"5&<J"6&<<6&Bq%3W?7CZ?L<J"5&<J"5&<PMN7<$D&L!>7iJ
<J"5&<J"5&<J"5K<<6&Bq%3W?7Hda'<J"5&<J"5&<KC,\<$D2Pr=K&C7>Orq<J"5&<J"5&<UWog<$D&L
!>7ho<J"5&<J"5&<J"6&<<6&Bq%3W?7CZ?L<J"5&<J"5&<PMN7<$D&L!>7iJ<J"5&<J"5&<J"5K<<6&B
q%3W?7Hda'<J"5&<J"5&<KC,\<$D2Pr=K&C7>Orq<J"5&<J"5&<UWog<$D&L!>7ho<J"5&<J"5&<J"6&
<<6&Bq%3W?7CZ?L<J"5&<J"5&<PMN7<$D&L!>7iJ<J"5&<J"5&<J"5K<<6&Bq%3W?7Hda'<J"5&<J"5&
<KC,\<$D2Pr=K&C7>Orq<J"5&<J"5&<UWog<$D&L!>7ho<J"5&<J"5&<J"6&<<6&Bq%3W?7CZ?L<J"5&
<J"5&<PMN7<$D&L!>7iJ<J"5&<J"5&<J"5K<<6&Bq%3W?7Hda'<J"5&<J"5&<KC,\<$D2Pr=K&C7>Orq
<J"5&<J"5&<UWog<$D&L!>@qqAqFWHAqFWHAqFXHAcZEsq%3W@7_!&^AqFWHAqFWHB"qpYA23ll!>@rL
AqFWHAqFWHAqFWmAcZEsq%3W@7d+H9AqFWHAqFWHArgO)A24#pr=K&D7YkZ.AqFWHAqFWHB('=4A23ll
!>@qqAqFWHAqFWHAqFXHAcZEsq%3W@7_!&^AqFWHAqFWHB"qpYA23ll!>@rLAqFWHAqFWHAqFWmAcZEs
q%3W@7d+H9AqFWHAqFWHArgO)A24#pr=K&D7YkZ.AqFWHAqFWHB('=4A23ll!>@qqAqFWHAqFWHAqFXH
AcZEsq%3W@7_!&^AqFWHAqFWHB"qpYA23ll!>@rLAqFWHAqFWHAqFWmAcZEsq%3W@7d+H9AqFWHAqFWH
ArgO)A24#pr=K&D7YkZ.AqFWHAqFWHB('=4A23ll!>@qqAqFWHAqFWHAqFXHAcZEsq%3W@7_!&^AqFWH
AqFWHB"qpYA23ll!>@rLAqFWHAqFWHAqFWmAcZEsq%3W@7d+H9AqFWHAqFWHArgO)A24#pr=K&D7YkZ.
AqFWHAqFWHB('=4A23ll!>AP-GCk$jGCk$jGCk%jG6)h@q%3W@=1EI+GCk$jGCk$jGJA>&FYW\(!>AP]
GCk$jGCk$jGCk%:G6)h@q%3W@=6Oj[GCk$jGCk$jGE6qKFYWh,r=K&D=,;'PGCk$jGCk$jGOK_VFYW\(
!>AP-GCk$jGCk$jGCk%jG6)h@q%3W@=1EI+GCk$jGCk$jGJA>&FYW\(!>AP]GCk$jGCk$jGCk%:G6)h@
q%3W@=6Oj[GCk$jGCk$jGE6qKFYWh,r=K&D=,;'PGCk$jGCk$jGOK_VFYW\(!>AP-GCk$jGCk$jGCk%j
G6)h@q%3W@=1EI+GCk$jGCk$jGJA>&FYW\(!>AP]GCk$jGCk$jGCk%:G6)h@q%3W@=6Oj[GCk$jGCk$j
GE6qKFYWh,r=K&D=,;'PGCk$jGCk$jGOK_VFYW\(!>AP-GCk$jGCk$jGCk%jG6)h@q%3W@=1EI+GCk$j
GCk$jGJA>&FYW\(!>AP]GCk$jGCk$jGCk%:G6)h@q%3W@=6Oj[GCk$jGCk$jGE6qKFYWh,r=K&D=,;'P
GCk$jGCk$jGOK_VFYW\(!>B.>Lk:G7Lk:G7Lk:H7L]N5bq%3W@BXikMLk:G7Lk:G7Lqe`HL,&K9!>B.n
Lk:G7Lk:G7Lk:G\L]N5bq%3W@B]t8(Lk:G7Lk:G7Ll[>mL,&W=r=K&DBS_IrLk:G7Lk:G7M!p-#L,&K9
!>B.>Lk:G7Lk:G7Lk:H7L]N5bq%3W@BXikMLk:G7Lk:G7Lqe`HL,&K9!>B.nLk:G7Lk:G7Lk:G\L]N5b
q%3W@B]t8(Lk:G7Lk:G7Ll[>mL,&W=r=K&DBS_IrLk:G7Lk:G7M!p-#L,&K9!>B.>Lk:G7Lk:G7Lk:H7
L]N5bq%3W@BXikMLk:G7Lk:G7Lqe`HL,&K9!>B.nLk:G7Lk:G7Lk:G\L]N5bq%3W@B]t8(Lk:G7Lk:G7
Ll[>mL,&W=r=K&DBS_IrLk:G7Lk:G7M!p-#L,&K9!>B.>Lk:G7Lk:G7Lk:H7L]N5bq%3W@BXikMLk:G7
Lk:G7Lqe`HL,&K9!>B.nLk:G7Lk:G7Lk:G\L]N5bq%3W@B]t8(Lk:G7Lk:G7Ll[>mL,&W=r=K&DBS_Ir
Lk:G7Lk:G7M!p-#L,&K9!@)i^R=^iYR=^iYR=^jYR/r'uq%3WPGds/nR=^iYR=^iYRD5-jLGJZ;!@)j9
R=^iYR=^iYR=^j)R/r'uq%3WPGj(QIR=^iYR=^iYR?*a:LGJf?r=K&TG_hc>R=^iYR=^iYRI?OELGJZ;
!@)i^R=^iYR=^iYR=^jYR/r'uq%3WPGds/nR=^iYR=^iYRD5-jLGJZ;!@)j9R=^iYR=^iYR=^j)R/r'u
q%3WPGj(QIR=^iYR=^iYR?*a:LGJf?r=K&TG_hc>R=^iYR=^iYRI?OELGJZ;!@)i^R=^iYR=^iYR=^jY
R/r'uq%3WPGds/nR=^iYR=^iYRD5-jLGJZ;!@)j9R=^iYR=^iYR=^j)R/r'uq%3WPGj(QIR=^iYR=^iY
R?*a:LGJf?r=K&TG_hc>R=^iYR=^iYRI?OELGJZ;!@)i^R=^iYR=^iYR=^jYR/r'uq%3WPGds/nR=^iY
R=^iYRD5-jLGJZ;!@)j9R=^iYR=^iYR=^j)R/r'uq%3WPGj(QIR=^iYR=^iYR?*a:LGJf?r=K&UH&/JP
We.7&We.7&WpcqgQU:K[!@2r`We.7&We.7&We.8&WWAGQq%3WQH+9l+We.7&We.7&WkYP7QU:K[!@2s;
We.7&We.7&We.7KWWAGQq%3WQH0D8[We.7&We.7&WfO.\QU:W_r=K&UH&/JPWe.7&We.7&WpcqgQU:K[
!@2r`We.7&We.7&We.8&WWAGQq%3WQH+9l+We.7&We.7&WkYP7QU:K[!@2s;We.7&We.7&We.7KWWAGQ
q%3WQH0D8[We.7&We.7&WfO.\QU:W_r=K&UH&/JPWe.7&We.7&WpcqgQU:K[!@2r`We.7&We.7&We.8&
WWAGQq%3WQH+9l+We.7&We.7&WkYP7QU:K[!@2s;We.7&We.7&We.7KWWAGQq%3WQH0D8[We.7&We.7&
WfO.\QU:W_r=K&UH&/JPWe.7&We.7&WpcqgQU:K[!@2r`We.7&We.7&We.8&WWAGQq%3WQH+9l+We.7&
We.7&WkYP7QU:K[!@2s;We.7&We.7&We.7KWWAGQq%3WQH0D8[We.7&We.7&WfO.\QU:W_r=K&UMMSlr
]7RYH]7RYH]C3?4W'^:l!@3Pq]7RYH]7RYH]7RZH])eisq%3WQMR^9M]7RYH]7RYH]>(rYW'^:l!@3QL
]7RYH]7RYH]7RYm])eisq%3WQMWh[(]7RYH]7RYH]8sQ)W'^Fpr=K&UMMSlr]7RYH]7RYH]C3?4W'^:l
!@3Pq]7RYH]7RYH]7RZH])eisq%3WQMR^9M]7RYH]7RYH]>(rYW'^:l!@3QL]7RYH]7RYH]7RYm])eis
q%3WQMWh[(]7RYH]7RYH]8sQ)W'^Fpr=K&UMMSlr]7RYH]7RYH]C3?4W'^:l!@3Pq]7RYH]7RYH]7RZH
])eisq%3WQMR^9M]7RYH]7RYH]>(rYW'^:l!@3QL]7RYH]7RYH]7RYm])eisq%3WQMWh[(]7RYH]7RYH
]8sQ)W'^Fpr=K&UMMSlr]7RYH]7RYH]C3?4W'^:l!@3Pq]7RYH]7RYH]7RZH])eisq%3WQMR^9M]7RYH
]7RYH]>(rYW'^:l!@3QL]7RYH]7RYH]7RYm])eisq%3WQMWh[(]7RYH]7RYH]8sQ)W'^Fpr=K&URu#:?
b_"&jb_"&jbjWaV\O-*(!@4/-b_"&jb_"&jb_"'jbQ57@q%3WQS%-[ob_"&jb_"&jbeM@&\O-*(!@4/]
b_"&jb_"&jb_"':bQ57@q%3WQS*8(Jb_"&jb_"&jb`BsK\O-6,r=K&URu#:?b_"&jb_"&jbjWaV\O-*(
!@4/-b_"&jb_"&jb_"'jbQ57@q%3WQS%-[ob_"&jb_"&jbeM@&\O-*(!@4/]b_"&jb_"&jb_"':bQ57@
q%3WQS*8(Jb_"&jb_"&jb`BsK\O-6,r=K&URu#:?b_"&jb_"&jbjWaV\O-*(!@4/-b_"&jb_"&jb_"'j
bQ57@q%3WQS%-[ob_"&jb_"&jbeM@&\O-*(!@4/]b_"&jb_"&jb_"':bQ57@q%3WQS*8(Jb_"&jb_"&j
b`BsK\O-6,r=K&URu#:?b_"&jb_"&jbjWaV\O-*(!@4/-b_"&jb_"&jb_"'jbQ57@q%3WQS%-[ob_"&j
b_"&jbeM@&\O-*(!@4/]b_"&jb_"&jb_"':bQ57@q%3WQS*8(Jb_"&jb_"&jb`BsK\O-6,r=K&VS;?!Q
h1FI7h1FI7h='/#a\qpH!@=8/h1FI7h1FI7h1FJ7h#YVqq%3WRS@IC,h1FI7h1FI7h7qbHa\qpH!@=8_
h1FI7h1FI7h1FI\h#YVqq%3WRSESd\h1FI7h1FI7h2g@ma\r'Lr=K&VS;?!Qh1FI7h1FI7h='/#a\qpH
!@=8/h1FI7h1FI7h1FJ7h#YVqq%3WRS@IC,h1FI7h1FI7h7qbHa\qpH!@=8_h1FI7h1FI7h1FI\h#YVq
q%3WRSESd\h1FI7h1FI7h2g@ma\r'Lr=K&VS;?!Qh1FI7h1FI7h='/#a\qpH!@=8/h1FI7h1FI7h1FJ7
h#YVqq%3WRS@IC,h1FI7h1FI7h7qbHa\qpH!@=8_h1FI7h1FI7h1FI\h#YVqq%3WRSESd\h1FI7h1FI7
h2g@ma\r'Lr=K&VS;?!Qh1FI7h1FI7h='/#a\qpH!@=8/h1FI7h1FI7h1FJ7h#YVqq%3WRS@IC,h1FI7
h1FI7h7qbHa\qpH!@=8_h1FI7h1FI7h1FI\h#YVqq%3WRSESd\h1FI7h1FI7h2g@ma\r'Lr=K&VXbcCs
mXjkYmXjkYmdKQEg/@_Y!@=k@mXjkYmXjkYmXjlYmK)$>q%3WRXgmeNmXjkYmXjkYm_A/jg/@_Y!@=kp
mXjkYmXjkYmXjl)mK)$>q%3WRXm#2)mXjkYmXjkYmZ6c:g/@k]r=K&VXbcCsmXjkYmXjkYmdKQEg/@_Y
!@=k@mXjkYmXjkYmXjlYmK)$>q%3WRXgmeNmXjkYmXjkYm_A/jg/@_Y!@=kpmXjkYmXjkYmXjl)mK)$>
q%3WRXm#2)mXjkYmXjkYmZ6c:g/@k]r=K&VXbcCsmXjkYmXjkYmdKQEg/@_Y!@=k@mXjkYmXjkYmXjlY
mK)$>q%3WRXgmeNmXjkYmXjkYm_A/jg/@_Y!@=kpmXjkYmXjkYmXjl)mK)$>q%3WRXm#2)mXjkYmXjkY
mZ6c:g/@k]r=K&VXbcCsmXjkYmXjkYmdKQEg/@_Y!@=k@mXjkYmXjkYmXjlYmK)$>q%3WRXgmeNmXjkY
mXjkYm_A/jg/@_Y!@=kpmXjkYmXjkYmXjl)mK)$>q%3WRXm#2)mXjkYmXjkYmZ6c:g/@k]r=K&V^52f@
s+:9&s+:9&s6osglVdNj!@>IQs+:9&s+:9&s+::&rrMF`q%3WR^:=2ps+:9&s+:9&s1eR7lVdNj!@>J,
s+:9&s+:9&s+:9KrrMF`q%3WR^?GTKs+:9&s+:9&s,[0\lVdZnr=K&V^52f@s+:9&s+:9&s6osglVdNj
!@>IQs+:9&s+:9&s+::&rrMF`q%3WR^:=2ps+:9&s+:9&s1eR7lVdNj!@>J,s+:9&s+:9&s+:9KrrMF`
r=OP~>

%%EndBinary
grestore
np
48 348.6 mo
562.68 348.6 li
562.68 190.32 li
48 190.32 li
cp
gsave
/1 /CSD get_res idxcs
clp
[1 0 0 -1 0 792 ]ct
[514.68 0 0 158.28 48 443.4 ]ct
snap_to_device
<<
/T 1
/W 1572 
/H 483 
/M[1572 0 0 -483 0 483 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
q#LR!!sAdf#(d&2#(d&2#(d&2#(d&2#(d&2#(d'8"p5#3!s7un!s/Q-"hk1m#(d&2#(d&2#(d&2#(d&2
#(d&2#-A(3"U"o/q#U9l!s/Q-"c`e=#(d&2#(d&2#(d&2#(d&2#(d&2#2KIc"U"o/nGr^n!sAeA#(d&2
#(d&2#(d&2#(d&2#(d&2#(d&]"p5#3!s89!q#LR!!sAdf#(d&2#(d&2#(d&2#(d&2#(d&2#(d'8"p5#3
!s7un!s/Q-"hk1m#(d&2#(d&2#(d&2#(d&2#(d&2#-A(3"U"o/q#U9l!s/Q-"c`e=#(d&2#(d&2#(d&2
#(d&2#(d&2#2KIc"U"o/nGr^n!sAeA#(d&2#(d&2#(d&2#(d&2#(d&2#(d&]"p5#3!s89!q#LR!!sAdf
#(d&2#(d&2#(d&2#(d&2#(d&2#(d'8"p5#3!s7un!s/Q-"hk1m#(d&2#(d&2#(d&2#(d&2#(d&2#-A(3
"U"o/q#U9l!s/Q-"c`e=#(d&2#(d&2#(d&2#(d&2#(d&2#2KIc"U"o/nGr^n#6Y7F#_E>6#_E>6#_E>6
#_E>6#_E>6#_E>a#Qk86#6O]%q#LR!#6Y6k#_E>6#_E>6#_E>6#_E>6#_E>6#_E?<#Qk86#6ODr!s/]1
#/1@p#_E>6#_E>6#_E>6#_E>6#_E>6#d"@7"p>/4q#U9l!s/]1#*&t@#_E>6#_E>6#_E>6#_E>6#_E>6
#i,ag"p>/4nGr^n#6Y7F#_E>6#_E>6#_E>6#_E>6#_E>6#_E>a#Qk86#6O]%q#LR!#6Y6k#_E>6#_E>6
#_E>6#_E>6#_E>6#_E?<#Qk86#6ODr!s/]1#/1@p#_E>6#_E>6#_E>6#_E>6#_E>6#d"@7"p>/4q#U9l
!s/]1#*&t@#_E>6#_E>6#_E>6#_E>6#_E>6#i,ag"p>/4nGr^n#6Y7F#_E>6#_E>6#_E>6#_E>6#_E>6
#_E>a#Qk86#6O]%q#LR!#6Y6k#_E>6#_E>6#_E>6#_E>6#_E>6#_E?<#Qk86#6ODr!s/]1#/1@p#_E>6
#_E>6#_E>6#_E>6#_E>6#d"@7"p>/4q#U9l!s/]1#*&t@#_E>6#_E>6#_E>6#_E>6#_E>6#i,ag"p>/4
nGr^n#6Y7F#_E>6#_E>6#_E>6#_E>6#_E>6#_E>a#Qk86#6O]%q#LR!#6Y6k#_E>6#_E>6#_E>6#_E>6
#_E>6#_E?<#Qk86#6ODr!s/]1#/1@p#_E>6#_E>6#_E>6#_E>6#_E>6#d"@7"p>/4q#U9l!s/]1#*&t@
#_E>6#_E>6#_E>6#_E>6#_E>6#i,ag"p>/4nGr^n#6Y7F#_E>6#_E>6#_E>6#_E>6#_E>6#_E>a#Qk86
#6O]%q#LR!#6Y6k#_E>6#_E>6#_E>6#_E>6#_E>6#_E?<#Qk86#6ODr!s/]1#/1@p#_E>6#_E>6#_E>6
#_E>6#_E>6#d"@7"p>/4q#U9l!s/]1#*&t@#_E>6#_E>6#_E>6#_E>6#_E>6#i,ag"p>/4nGr^n#71[M
$A&V:$A&V:$A&V:$A&V:$A&V:$A&Ve$3LP?#6O]%q#LR!#71Zr$A&V:$A&V:$A&V:$A&V:$A&V:$A&W@
$3LP?#6ODr!s/]6#egXt$A&V:$A&V:$A&V:$A&V:$A&V:$EXX;#RL_;q#U9l!s/]6#`]7D$A&V:$A&V:
$A&V:$A&V:$A&V:$Jc$k#RL_;nGr^n#71[M$A&V:$A&V:$A&V:$A&V:$A&V:$A&Ve$3LP?#6O]%q#LR!
#71Zr$A&V:$A&V:$A&V:$A&V:$A&V:$A&W@$3LP?#6ODr!s/]6#egXt$A&V:$A&V:$A&V:$A&V:$A&V:
$EXX;#RL_;q#U9l!s/]6#`]7D$A&V:$A&V:$A&V:$A&V:$A&V:$Jc$k#RL_;nGr^n#71[M$A&V:$A&V:
$A&V:$A&V:$A&V:$A&Ve$3LP?#6O]%q#LR!#71Zr$A&V:$A&V:$A&V:$A&V:$A&V:$A&W@$3LP?#6ODr
!s/]6#egXt$A&V:$A&V:$A&V:$A&V:$A&V:$EXX;#RL_;q#U9l!s/]6#`]7D$A&V:$A&V:$A&V:$A&V:
$A&V:$Jc$k#RL_;nGr^n#71[M$A&V:$A&V:$A&V:$A&V:$A&V:$A&Ve$3LP?#6O]%q#LR!#71Zr$A&V:
$A&V:$A&V:$A&V:$A&V:$A&W@$3LP?#6ODr!s/]6#egXt$A&V:$A&V:$A&V:$A&V:$A&V:$EXX;#RL_;
q#U9l!s/]6#`]7D$A&V:$A&V:$A&V:$A&V:$A&V:$Jc$k#RL_;nGr^n#71[M$A&V:$A&V:$A&V:$A&V:
$A&V:$A&Ve$3LP?#6O]%q#LR!#71Zr$A&V:$A&V:$A&V:$A&V:$A&V:$A&W@$3LP?#6ODr!s/]6#egXt
$A&V:$A&V:$A&V:$A&V:$A&V:$EXX;#RL_;q#U9l!s/]8$B>OH%"\n>%"\n>%"\n>%"\n>%"\n>%,D<o
$4@(?nGr^n#7CmQ%"\n>%"\n>%"\n>%"\n>%"\n>%"\ni$j-hE#6O]%q#LR!#7Cm!%"\n>%"\n>%"\n>
%"\n>%"\n>%"\oD$j-hE#6ODr!s/]8$GHq#%"\n>%"\n>%"\n>%"\n>%"\n>%'9p?$4@(?q#U9l!s/]8
$B>OH%"\n>%"\n>%"\n>%"\n>%"\n>%,D<o$4@(?nGr^n#7CmQ%"\n>%"\n>%"\n>%"\n>%"\n>%"\ni
$j-hE#6O]%q#LR!#7Cm!%"\n>%"\n>%"\n>%"\n>%"\n>%"\oD$j-hE#6ODr!s/]8$GHq#%"\n>%"\n>
%"\n>%"\n>%"\n>%'9p?$4@(?q#U9l!s/]8$B>OH%"\n>%"\n>%"\n>%"\n>%"\n>%,D<o$4@(?nGr^n
#7CmQ%"\n>%"\n>%"\n>%"\n>%"\n>%"\ni$j-hE#6O]%q#LR!#7Cm!%"\n>%"\n>%"\n>%"\n>%"\n>
%"\oD$j-hE#6ODr!s/]8$GHq#%"\n>%"\n>%"\n>%"\n>%"\n>%'9p?$4@(?q#U9l!s/]8$B>OH%"\n>
%"\n>%"\n>%"\n>%"\n>%,D<o$4@(?nGr^n#7CmQ%"\n>%"\n>%"\n>%"\n>%"\n>%"\ni$j-hE#6O]%
q#LR!#7Cm!%"\n>%"\n>%"\n>%"\n>%"\n>%"\oD$j-hE#6ODr!s/]8$GHq#%"\n>%"\n>%"\n>%"\n>
%"\n>%'9p?$4@(?q#U9l!s/]8$B>OH%"\n>%"\n>%"\n>%"\n>%"\n>%,D<o$4@(?nGr^n#7CmQ%"\n>
%"\n>%"\n>%"\n>%"\n>%"\ni$j-hE#6O]%q#LR!#7Cm!%"\n>%"\n>%"\n>%"\n>%"\n>%"\oD$j-hE
#6ODr!s/]8$GHq#%"\n>%"\n>%"\n>%"\n>%"\n>%'9p?$4@(?q#U9l!s/o>%#tgL%Y>1B%Y>1B%Y>1B
%Y>1B%Y>1B%c%Ts$k!LGnGr^n%1<TY%Y>1B%Y>1B%Y>1B%Y>1B%Y>1B%Y>1m%Kd+I%0H>+q#LR!%1<T)
%Y>1B%Y>1B%Y>1B%Y>1B%Y>1B%Y>2H%Kd+I%0H&#!s/o>%)*4'%Y>1B%Y>1B%Y>1B%Y>1B%Y>1B%]p3C
$k!LGq#U9l!s/o>%#tgL%Y>1B%Y>1B%Y>1B%Y>1B%Y>1B%c%Ts$k!LGnGr^n%1<TY%Y>1B%Y>1B%Y>1B
%Y>1B%Y>1B%Y>1m%Kd+I%0H>+q#LR!%1<T)%Y>1B%Y>1B%Y>1B%Y>1B%Y>1B%Y>2H%Kd+I%0H&#!s/o>
%)*4'%Y>1B%Y>1B%Y>1B%Y>1B%Y>1B%]p3C$k!LGq#U9l!s/o>%#tgL%Y>1B%Y>1B%Y>1B%Y>1B%Y>1B
%c%Ts$k!LGnGr^n%1<TY%Y>1B%Y>1B%Y>1B%Y>1B%Y>1B%Y>1m%Kd+I%0H>+q#LR!%1<T)%Y>1B%Y>1B
%Y>1B%Y>1B%Y>1B%Y>2H%Kd+I%0H&#!s/o>%)*4'%Y>1B%Y>1B%Y>1B%Y>1B%Y>1B%]p3C$k!LGq#U9l
!s/o>%#tgL%Y>1B%Y>1B%Y>1B%Y>1B%Y>1B%c%Ts$k!LGnGr^n%1<TY%Y>1B%Y>1B%Y>1B%Y>1B%Y>1B
%Y>1m%Kd+I%0H>+q#LR!%1<T)%Y>1B%Y>1B%Y>1B%Y>1B%Y>1B%Y>2H%Kd+I%0H&#!s/o>%)*4'%Y>1B
%Y>1B%Y>1B%Y>1B%Y>1B%]p3C$k!LGq#U9l!s/o>%#tgL%Y>1B%Y>1B%Y>1B%Y>1B%Y>1B%c%Ts$k!LG
nGr^n%1<TY%Y>1B%Y>1B%Y>1B%Y>1B%Y>1B%Y>1m%Kd+I%0H>+q#LR!%1<T)%Y>1B%Y>1B%Y>1B%Y>1B
%Y>1B%Y>2H%Kd+I%0H&#!s/o>%)*4'%Y>1B%Y>1B%Y>1B%Y>1B%Y>1B%]p3C$k!LGq#U9l!s/o8%ZV'O
%tY=D%tY=D%tY=D%tY=D%tY=D&)@`u%L!:CnGr^n%0[6U%tY=D%tY=D%tY=D%tY=D%tY=D%tY=o%g*:F
%0H>+q#LR!%0[6%%tY=D%tY=D%tY=D%tY=D%tY=D%tY>J%g*:F%0H&#!s/o8%_`I*%tY=D%tY=D%tY=D
%tY=D%tY=D&$6?E%L!:Cq#U9l!s/o8%ZV'O%tY=D%tY=D%tY=D%tY=D%tY=D&)@`u%L!:CnGr^n%0[6U
%tY=D%tY=D%tY=D%tY=D%tY=D%tY=o%g*:F%0H>+q#LR!%0[6%%tY=D%tY=D%tY=D%tY=D%tY=D%tY>J
%g*:F%0H&#!s/o8%_`I*%tY=D%tY=D%tY=D%tY=D%tY=D&$6?E%L!:Cq#U9l!s/o8%ZV'O%tY=D%tY=D
%tY=D%tY=D%tY=D&)@`u%L!:CnGr^n%0[6U%tY=D%tY=D%tY=D%tY=D%tY=D%tY=o%g*:F%0H>+q#LR!
%0[6%%tY=D%tY=D%tY=D%tY=D%tY=D%tY>J%g*:F%0H&#!s/o8%_`I*%tY=D%tY=D%tY=D%tY=D%tY=D
&$6?E%L!:Cq#U9l!s/o8%ZV'O%tY=D%tY=D%tY=D%tY=D%tY=D&)@`u%L!:CnGr^n%0[6U%tY=D%tY=D
%tY=D%tY=D%tY=D%tY=o%g*:F%0H>+q#LR!%0[6%%tY=D%tY=D%tY=D%tY=D%tY=D%tY>J%g*:F%0H&#
!s/o8%_`I*%tY=D%tY=D%tY=D%tY=D%tY=D&$6?E%L!:Cq#U9l!s/o8%ZV'O%tY=D%tY=D%tY=D%tY=D
%tY=D&)@`u%L!:CnGr^n%0[6U%tY=D%tY=D%tY=D%tY=D%tY=D%tY=o%g*:F%0H>+q#LR!%0[6%%tY=D
%tY=D%tY=D%tY=D%tY=D%tY>J%g*:F%0H&#!s/o8%_`I*%tY=D%tY=D%tY=D%tY=D%tY=D&$6?E%L!:C
q#U9l!s/o9%uq3Q&:tIF&:tIF&:tIF&:tIF&:tIF&D[m"%gEIEnGr^n%0d?W&:tIF&:tIF&:tIF&:tIF
&:tIF&:tIq&-EFI%0H>+q#LR!%0d?'&:tIF&:tIF&:tIF&:tIF&:tIF&:tJL&-EFI%0H&#!s/o9&&&U,
&:tIF&:tIF&:tIF&:tIF&:tIF&?QKG%gEIEq#U9l!s/o9%uq3Q&:tIF&:tIF&:tIF&:tIF&:tIF&D[m"
%gEIEnGr^n%0d?W&:tIF&:tIF&:tIF&:tIF&:tIF&:tIq&-EFI%0H>+q#LR!%0d?'&:tIF&:tIF&:tIF
&:tIF&:tIF&:tJL&-EFI%0H&#!s/o9&&&U,&:tIF&:tIF&:tIF&:tIF&:tIF&?QKG%gEIEq#U9l!s/o9
%uq3Q&:tIF&:tIF&:tIF&:tIF&:tIF&D[m"%gEIEnGr^n%0d?W&:tIF&:tIF&:tIF&:tIF&:tIF&:tIq
&-EFI%0H>+q#LR!%0d?'&:tIF&:tIF&:tIF&:tIF&:tIF&:tJL&-EFI%0H&#!s/o9&&&U,&:tIF&:tIF
&:tIF&:tIF&:tIF&?QKG%gEIEq#U9l!s/o9%uq3Q&:tIF&:tIF&:tIF&:tIF&:tIF&D[m"%gEIEnGr^n
%0d?W&:tIF&:tIF&:tIF&:tIF&:tIF&:tIq&-EFI%0H>+q#LR!%0d?'&:tIF&:tIF&:tIF&:tIF&:tIF
&:tJL&-EFI%0H&#!s/o9&&&U,&:tIF&:tIF&:tIF&:tIF&:tIF&?QKG%gEIEq#U9l!s/o9%uq3Q&:tIF
&:tIF&:tIF&:tIF&:tIF&D[m"%gEIEnGr^n%1!NZ&V:UH&V:UH&V:UH&V:UH&V:UH&V:Us&H`RM%0H>+
q#LR!%1!N*&V:UH&V:UH&V:UH&V:UH&V:UH&V:VN&H`RM%0H&#!s/o;&AAa.&V:UH&V:UH&V:UH&V:UH
&V:UH&ZlWI&-r^Hq#U9l!s/o;&<7?S&V:UH&V:UH&V:UH&V:UH&V:UH&`"$$&-r^HnGr^n%1!NZ&V:UH
&V:UH&V:UH&V:UH&V:UH&V:Us&H`RM%0H>+q#LR!%1!N*&V:UH&V:UH&V:UH&V:UH&V:UH&V:VN&H`RM
%0H&#!s/o;&AAa.&V:UH&V:UH&V:UH&V:UH&V:UH&ZlWI&-r^Hq#U9l!s/o;&<7?S&V:UH&V:UH&V:UH
&V:UH&V:UH&`"$$&-r^HnGr^n%1!NZ&V:UH&V:UH&V:UH&V:UH&V:UH&V:Us&H`RM%0H>+q#LR!%1!N*
&V:UH&V:UH&V:UH&V:UH&V:UH&V:VN&H`RM%0H&#!s/o;&AAa.&V:UH&V:UH&V:UH&V:UH&V:UH&ZlWI
&-r^Hq#U9l!s/o;&<7?S&V:UH&V:UH&V:UH&V:UH&V:UH&`"$$&-r^HnGr^n%1!NZ&V:UH&V:UH&V:UH
&V:UH&V:UH&V:Us&H`RM%0H>+q#LR!%1!N*&V:UH&V:UH&V:UH&V:UH&V:UH&V:VN&H`RM%0H&#!s/o;
&AAa.&V:UH&V:UH&V:UH&V:UH&V:UH&ZlWI&-r^Hq#U9l!s0)@&WRNV'7pmL'7pmL'7pmL'7pmL'7pmL
'AX<(&I9!NnGr^n&dT)`'7pmL'7pmL'7pmL'7pmL'7pmL'7pn"'*AgP&d%k0q#LR!&dT)0'7pmL'7pmL
'7pmL'7pmL'7pmL'7pnR'*AgP&d%S(!s0)@&\\p1'7pmL'7pmL'7pmL'7pmL'7pmL'<MoM&I9!Nq#U9l
!s0)@&WRNV'7pmL'7pmL'7pmL'7pmL'7pmL'AX<(&I9!NnGr^n&dT)`'7pmL'7pmL'7pmL'7pmL'7pmL
'7pn"'*AgP&d%k0q#LR!&dT)0'7pmL'7pmL'7pmL'7pmL'7pmL'7pnR'*AgP&d%S(!s0)@&\\p1'7pmL
'7pmL'7pmL'7pmL'7pmL'<MoM&I9!Nq#U9l!s0)@&WRNV'7pmL'7pmL'7pmL'7pmL'7pmL'AX<(&I9!N
nGr^n&dT)`'7pmL'7pmL'7pmL'7pmL'7pmL'7pn"'*AgP&d%k0q#LR!&dT)0'7pmL'7pmL'7pmL'7pmL
'7pmL'7pnR'*AgP&d%S(!s0)@&\\p1'7pmL'7pmL'7pmL'7pmL'7pmL'<MoM&I9!Nq#U9l!s0)@&WRNV
'7pmL'7pmL'7pmL'7pmL'7pmL'AX<(&I9!NnGr^n&dT)`'7pmL'7pmL'7pmL'7pmL'7pmL'7pn"'*AgP
&d%k0q#LR!&dT)0'7pmL'7pmL'7pmL'7pmL'7pmL'7pnR'*AgP&d%S(!s0)B'>>04'S7$N'S7$N'S7$N
'S7$N'S7$N'Wi&O'+,?Rq#U9l!s0)B'93cY'S7$N'S7$N'S7$N'S7$N'S7$N'\sH*'+,?RnGr^n&df;d
'S7$N'S7$N'S7$N'S7$N'S7$N'S7%$'E]!U&d%k0q#LR!&df;4'S7$N'S7$N'S7$N'S7$N'S7$N'S7%T
'E]!U&d%S(!s0)B'>>04'S7$N'S7$N'S7$N'S7$N'S7$N'Wi&O'+,?Rq#U9l!s0)B'93cY'S7$N'S7$N
'S7$N'S7$N'S7$N'\sH*'+,?RnGr^n&df;d'S7$N'S7$N'S7$N'S7$N'S7$N'S7%$'E]!U&d%k0q#LR!
&df;4'S7$N'S7$N'S7$N'S7$N'S7$N'S7%T'E]!U&d%S(!s0)B'>>04'S7$N'S7$N'S7$N'S7$N'S7$N
'Wi&O'+,?Rq#U9l!s0)B'93cY'S7$N'S7$N'S7$N'S7$N'S7$N'\sH*'+,?RnGr^n&df;d'S7$N'S7$N
'S7$N'S7$N'S7$N'S7%$'E]!U&d%k0q#LR!&df;4'S7$N'S7$N'S7$N'S7$N'S7$N'S7%T'E]!U&d%S(
!s0)B'>>04'S7$N'S7$N'S7$N'S7$N'S7$N'Wi&O'+,?Rq#U9l!s0)B'93cY'S7$N'S7$N'S7$N'S7$N
'S7$N'\sH*'+,?RnGr^n&df;d'S7$N'S7$N'S7$N'S7$N'S7$N'S7%$'E]!U&d%k0q#LR4&e#G6(4m<R
(4m<R(4m<R(4m<R(4m<R(4m=X('>3Y&f'p;!u2FW'>>66(4m<R(4m<R(4m<R(4m<R(4m<R(9J>S'+>Kg
q#U9l!u2FW'93i[(4m<R(4m<R(4m<R(4m<R(4m<R(>T`.'+>KgnGr_,&e#Gf(4m<R(4m<R(4m<R(4m<R
(4m<R(4m=(('>3Y&f(3Cq#LR4&e#G6(4m<R(4m<R(4m<R(4m<R(4m<R(4m=X('>3Y&f'p;!u2FW'>>66
(4m<R(4m<R(4m<R(4m<R(4m<R(9J>S'+>Kgq#U9l!u2FW'93i[(4m<R(4m<R(4m<R(4m<R(4m<R(>T`.
'+>KgnGr_,&e#Gf(4m<R(4m<R(4m<R(4m<R(4m<R(4m=(('>3Y&f(3Cq#LR4&e#G6(4m<R(4m<R(4m<R
(4m<R(4m<R(4m=X('>3Y&f'p;!u2FW'>>66(4m<R(4m<R(4m<R(4m<R(4m<R(9J>S'+>Kgq#U9l!u2FW
'93i[(4m<R(4m<R(4m<R(4m<R(4m<R(>T`.'+>KgnGr_,&e#Gf(4m<R(4m<R(4m<R(4m<R(4m<R(4m=(
('>3Y&f(3Cq#LR4&e#G6(4m<R(4m<R(4m<R(4m<R(4m<R(4m=X('>3Y&f'p;!u2FW'>>66(4m<R(4m<R
(4m<R(4m<R(4m<R(9J>S'+>Kgq#U9l!u2FW'93i[(4m<R(4m<R(4m<R(4m<R(4m<R(>T`.'+>KgnGr_,
&e#Gf(4m<R(4m<R(4m<R(4m<R(4m<R(4m=(('>3Y&f(3Cq#LR4&e#G6(4m<R(4m<R(4m<R(4m<R(4m<R
(4m=X('>3Y&f'p;!u2U\'YYE9(kNTV(kNTV(kNTV(kNTV(kNTV(p+VW'FYcmq#U9l!u2U\'TO#^(kNTV
(kNTV(kNTV(kNTV(kNTV(u6#2'FYcmnGr_,(CV"l(kNTV(kNTV(kNTV(kNTV(kNTV(kNU,(]tH\(DZ`H
q#LR4(CV"<(kNTV(kNTV(kNTV(kNTV(kNTV(kNU\(]tH\(DZH@!u2U\'YYE9(kNTV(kNTV(kNTV(kNTV
(kNTV(p+VW'FYcmq#U9l!u2U\'TO#^(kNTV(kNTV(kNTV(kNTV(kNTV(u6#2'FYcmnGr_,(CV"l(kNTV
(kNTV(kNTV(kNTV(kNTV(kNU,(]tH\(DZ`Hq#LR4(CV"<(kNTV(kNTV(kNTV(kNTV(kNTV(kNU\(]tH\
(DZH@!u2U\'YYE9(kNTV(kNTV(kNTV(kNTV(kNTV(p+VW'FYcmq#U9l!u2U\'TO#^(kNTV(kNTV(kNTV
(kNTV(kNTV(u6#2'FYcmnGr_,(CV"l(kNTV(kNTV(kNTV(kNTV(kNTV(kNU,(]tH\(DZ`Hq#LR4(CV"<
(kNTV(kNTV(kNTV(kNTV(kNTV(kNU\(]tH\(DZH@!u2U\'YYE9(kNTV(kNTV(kNTV(kNTV(kNTV(p+VW
'FYcmq#U9l!u2U\'TO#^(kNTV(kNTV(kNTV(kNTV(kNTV(u6#2'FYcmnGr_,(CV"l(kNTV(kNTV(kNTV
(kNTV(kNTV(kNU,(]tH\(DZ`Hq#LR4(CV"<(kNTV(kNTV(kNTV(kNTV(kNTV(kNU\(]tH\(DZH@!u2U\
'YYE9(kNTV(kNTV(kNTV(kNTV(kNTV(p+VW'FYcmq#U9l!u2U\'TO#^(kNTV(kNTV(kNTV(kNTV(kNTV
(u6#2'FYcmnGr_,(CV"l(kNTV(kNTV(kNTV(kNTV(kNTV(kNU,(]tH\(DZ`Hq#LR4(CV"<(kNTV(kNTV
(kNTV(kNTV(kNTV(kNU\(]tH\(DZH@!u2U^(;:Z<)1i`X)1i`X)1i`X)1i`X)1i`X)6FbY((M,qq#U9l
!u2U^(608a)1i`X)1i`X)1i`X)1i`X)1i`X);Q/4((M,qnGr_,(Ch4p)1i`X)1i`X)1i`X)1i`X)1i`X
)1ia.)$:Wa(DZ`Hq#LR4(Ch4@)1i`X)1i`X)1i`X)1i`X)1i`X)1ia^)$:Wa(DZH@!u2U^(;:Z<)1i`X
)1i`X)1i`X)1i`X)1i`X)6FbY((M,qq#U9l!u2U^(608a)1i`X)1i`X)1i`X)1i`X)1i`X);Q/4((M,q
nGr_,(Ch4p)1i`X)1i`X)1i`X)1i`X)1i`X)1ia.)$:Wa(DZ`Hq#LR4(Ch4@)1i`X)1i`X)1i`X)1i`X
)1i`X)1ia^)$:Wa(DZH@!u2U^(;:Z<)1i`X)1i`X)1i`X)1i`X)1i`X)6FbY((M,qq#U9l!u2U^(608a
)1i`X)1i`X)1i`X)1i`X)1i`X);Q/4((M,qnGr_,(Ch4p)1i`X)1i`X)1i`X)1i`X)1i`X)1ia.)$:Wa
(DZ`Hq#LR4(Ch4@)1i`X)1i`X)1i`X)1i`X)1i`X)1ia^)$:Wa(DZH@!u2U^(;:Z<)1i`X)1i`X)1i`X
)1i`X)1i`X)6FbY((M,qq#U9l!u2U^(608a)1i`X)1i`X)1i`X)1i`X)1i`X);Q/4((M,qnGr_,(Ch4p
)1i`X)1i`X)1i`X)1i`X)1i`X)1ia.)$:Wa(DZ`Hq#LR4(Ch4@)1i`X)1i`X)1i`X)1i`X)1i`X)1ia^
)$:Wa(DZH@!u2U^(;:Z<)1i`X)1i`X)1i`X)1i`X)1i`X)6FbY((M,qq#U9l!u2U^(608a)1i`X)1i`X
)1i`X)1i`X)1i`X);Q/4((M,qnGr_,(Ch4p)1i`X)1i`X)1i`X)1i`X)1i`X)1ia.)$:Wa(DZ`Hq#LR4
(Ch4@)1i`X)1i`X)1i`X)1i`X)1i`X)1ia^)$:Wa(DZH@!u2U_(qpo?)M/lZ)M/lZ)M/lZ)M/lZ)M/lZ
)Qan[(_7Dtq#U9l!u2U_(lfMd)M/lZ)M/lZ)M/lZ)M/lZ)M/lZ)Vl;6(_7DtnGr_,(Cq@s)M/lZ)M/lZ
)M/lZ)M/lZ)M/lZ)M/m0)?Ufe(DZ`Hq#LR4(Cq@C)M/lZ)M/lZ)M/lZ)M/lZ)M/lZ)M/m`)?Ufe(DZH@
!u2U_(qpo?)M/lZ)M/lZ)M/lZ)M/lZ)M/lZ)Qan[(_7Dtq#U9l!u2U_(lfMd)M/lZ)M/lZ)M/lZ)M/lZ
)M/lZ)Vl;6(_7DtnGr_,(Cq@s)M/lZ)M/lZ)M/lZ)M/lZ)M/lZ)M/m0)?Ufe(DZ`Hq#LR4(Cq@C)M/lZ
)M/lZ)M/lZ)M/lZ)M/lZ)M/m`)?Ufe(DZH@!u2U_(qpo?)M/lZ)M/lZ)M/lZ)M/lZ)M/lZ)Qan[(_7Dt
q#U9l!u2U_(lfMd)M/lZ)M/lZ)M/lZ)M/lZ)M/lZ)Vl;6(_7DtnGr_,(Cq@s)M/lZ)M/lZ)M/lZ)M/lZ
)M/lZ)M/m0)?Ufe(DZ`Hq#LR4(Cq@C)M/lZ)M/lZ)M/lZ)M/lZ)M/lZ)M/m`)?Ufe(DZH@!u2U_(qpo?
)M/lZ)M/lZ)M/lZ)M/lZ)M/lZ)Qan[(_7Dtq#U9l!u2U_(lfMd)M/lZ)M/lZ)M/lZ)M/lZ)M/lZ)Vl;6
(_7DtnGr_,(Cq@s)M/lZ)M/lZ)M/lZ)M/lZ)M/lZ)M/m0)?Ufe(DZ`Hq#LR4(Cq@C)M/lZ)M/lZ)M/lZ
)M/lZ)M/lZ)M/m`)?Ufe(DZH@!u2U_(qpo?)M/lZ)M/lZ)M/lZ)M/lZ)M/lZ)Qan[(_7Dtq#U9l!u2U_
(lfMd)M/lZ)M/lZ)M/lZ)M/lZ)M/lZ)Vl;6(_7DtnGr_,(Cq@s)M/lZ)M/lZ)M/lZ)M/lZ)M/lZ)M/m0
)?Ufe(DZ`Hq#LR4(Cq@C)M/lZ)M/lZ)M/lZ)M/lZ)M/lZ)M/m`)?Ufe(DZH@!u2ac)87)B*.f/^*.f/^
*.f/^*.f/^*.f/^*3C1_)%RZ$q#U9l!u2ac)3,\g*.f/^*.f/^*.f/^*.f/^*.f/^*8MS:)%RZ$nGr_,
)\3h#*.f/^*.f/^*.f/^*.f/^*.f/^*.f04*!7&h)\r/Lq#LR4)\3gH*.f/^*.f/^*.f/^*.f/^*.f/^
*.f0d*!7&h)\qlD!u2ac)87)B*.f/^*.f/^*.f/^*.f/^*.f/^*3C1_)%RZ$q#U9l!u2ac)3,\g*.f/^
*.f/^*.f/^*.f/^*.f/^*8MS:)%RZ$nGr_,)\3h#*.f/^*.f/^*.f/^*.f/^*.f/^*.f04*!7&h)\r/L
q#LR4)\3gH*.f/^*.f/^*.f/^*.f/^*.f/^*.f0d*!7&h)\qlD!u2ac)87)B*.f/^*.f/^*.f/^*.f/^
*.f/^*3C1_)%RZ$q#U9l!u2ac)3,\g*.f/^*.f/^*.f/^*.f/^*.f/^*8MS:)%RZ$nGr_,)\3h#*.f/^
*.f/^*.f/^*.f/^*.f/^*.f04*!7&h)\r/Lq#LR4)\3gH*.f/^*.f/^*.f/^*.f/^*.f/^*.f0d*!7&h
)\qlD!u2ac)87)B*.f/^*.f/^*.f/^*.f/^*.f/^*3C1_)%RZ$q#U9l!u2ac)3,\g*.f/^*.f/^*.f/^
*.f/^*.f/^*8MS:)%RZ$nGr_,)\3h#*.f/^*.f/^*.f/^*.f/^*.f/^*.f04*!7&h)\r/Lq#LR4)\3gH
*.f/^*.f/^*.f/^*.f/^*.f/^*.f0d*!7&h)\qlD!u2ac)87)B*.f/^*.f/^*.f/^*.f/^*.f/^*3C1_
)%RZ$q#U9l!u2ac)3,\g*.f/^*.f/^*.f/^*.f/^*.f/^*8MS:)%RZ$nGr_,)\3h#*.f/^*.f/^*.f/^
*.f/^*.f/^*.f04*!7&h)\r/Lq#LR4)\3gH*.f/^*.f/^*.f/^*.f/^*.f/^*.f0d*!7&h)\qlD!u2ad
)SR5D*J,;`*J,;`*J,;`*J,;`*J,;`*N^=a)A!i&q#U9l!u2ad)NGhi*J,;`*J,;`*J,;`*J,;`*J,;`
*Sh_<)A!i&nGr_,)\<q%*J,;`*J,;`*J,;`*J,;`*J,;`*J,<6*<R2k)\r/Lq#LR4)\<pJ*J,;`*J,;`
*J,;`*J,;`*J,;`*J,<f*<R2k)\qlD!u2ad)SR5D*J,;`*J,;`*J,;`*J,;`*J,;`*N^=a)A!i&q#U9l
!u2ad)NGhi*J,;`*J,;`*J,;`*J,;`*J,;`*Sh_<)A!i&nGr_,)\<q%*J,;`*J,;`*J,;`*J,;`*J,;`
*J,<6*<R2k)\r/Lq#LR4)\<pJ*J,;`*J,;`*J,;`*J,;`*J,;`*J,<f*<R2k)\qlD!u2ad)SR5D*J,;`
*J,;`*J,;`*J,;`*J,;`*N^=a)A!i&q#U9l!u2ad)NGhi*J,;`*J,;`*J,;`*J,;`*J,;`*Sh_<)A!i&
nGr_,)\<q%*J,;`*J,;`*J,;`*J,;`*J,;`*J,<6*<R2k)\r/Lq#LR4)\<pJ*J,;`*J,;`*J,;`*J,;`
*J,;`*J,<f*<R2k)\qlD!u2ad)SR5D*J,;`*J,;`*J,;`*J,;`*J,;`*N^=a)A!i&q#U9l!u2ad)NGhi
*J,;`*J,;`*J,;`*J,;`*J,;`*Sh_<)A!i&nGr_,)\<q%*J,;`*J,;`*J,;`*J,;`*J,;`*J,<6*<R2k
)\r/Lq#LR4)\<pJ*J,;`*J,;`*J,;`*J,;`*J,;`*J,<f*<R2k)\qlD!u2ad)SR5D*J,;`*J,;`*J,;`
*J,;`*J,;`*N^=a)A!i&q#U9l!u2ad)NGhi*J,;`*J,;`*J,;`*J,;`*J,;`*Sh_<)A!i&nGr_,)\<q%
*J,;`*J,;`*J,;`*J,;`*J,;`*J,<6*<R2k)\r/Lq#LR4)\<pJ*J,;`*J,;`*J,;`*J,;`*J,;`*J,<f
*<R2k)\qlD!u2ae*53JG*eGGb*eGGb*eGGb*eGGb*eGGb*j$Ic*"a,)q#U9l!u2ae*0)(l*eGGb*eGGb
*eGGb*eGGb*eGGb*o.k>*"a,)nGr_,)\F((*eGGb*eGGb*eGGb*eGGb*eGGb*eGH8*WmAo)\r/Lq#LR4
)\F'M*eGGb*eGGb*eGGb*eGGb*eGGb*eGHh*WmAo)\qlD!u2ae*53JG*eGGb*eGGb*eGGb*eGGb*eGGb
*j$Ic*"a,)q#U9l!u2ae*0)(l*eGGb*eGGb*eGGb*eGGb*eGGb*o.k>*"a,)nGr_,)\F((*eGGb*eGGb
*eGGb*eGGb*eGGb*eGH8*WmAo)\r/Lq#LR4)\F'M*eGGb*eGGb*eGGb*eGGb*eGGb*eGHh*WmAo)\qlD
!u2ae*53JG*eGGb*eGGb*eGGb*eGGb*eGGb*j$Ic*"a,)q#U9l!u2ae*0)(l*eGGb*eGGb*eGGb*eGGb
*eGGb*o.k>*"a,)nGr_,)\F((*eGGb*eGGb*eGGb*eGGb*eGGb*eGH8*WmAo)\r/Lq#LR4)\F'M*eGGb
*eGGb*eGGb*eGGb*eGGb*eGHh*WmAo)\qlD!u2ae*53JG*eGGb*eGGb*eGGb*eGGb*eGGb*j$Ic*"a,)
q#U9l!u2ae*0)(l*eGGb*eGGb*eGGb*eGGb*eGGb*o.k>*"a,)nGr_,)\F((*eGGb*eGGb*eGGb*eGGb
*eGGb*eGH8*WmAo)\r/Lq#LR4)\F'M*eGGb*eGGb*eGGb*eGGb*eGGb*eGHh*WmAo)\qlD!u2ae*53JG
*eGGb*eGGb*eGGb*eGGb*eGGb*j$Ic*"a,)q#U9l!u2ae*0)(l*eGGb*eGGb*eGGb*eGGb*eGGb*o.k>
*"a,)nGr_,)\F((*eGGb*eGGb*eGGb*eGGb*eGGb*eGH8*WmAo)\r/Lq#LR4)\F'M*eGGb*eGGb*eGGb
*eGGb*eGGb*eGHh*WmAo)\qlD!u2ag*PNVI++bSd++bSd++bSd++bSd++bSd+0?Ue*>9A,q#U9l!u2ag
*KD4n++bSd++bSd++bSd++bSd++bSd+5J"@*>9A,nGr_,)\X7+++bSd++bSd++bSd++bSd++bSd++bT:
*s3Ms)\r/Lq#LR4)\X6P++bSd++bSd++bSd++bSd++bSd++bTj*s3Ms)\qlD!u2ag*PNVI++bSd++bSd
++bSd++bSd++bSd+0?Ue*>9A,q#U9l!u2ag*KD4n++bSd++bSd++bSd++bSd++bSd+5J"@*>9A,nGr_,
)\X7+++bSd++bSd++bSd++bSd++bSd++bT:*s3Ms)\r/Lq#LR4)\X6P++bSd++bSd++bSd++bSd++bSd
++bTj*s3Ms)\qlD!u2ag*PNVI++bSd++bSd++bSd++bSd++bSd+0?Ue*>9A,q#U9l!u2ag*KD4n++bSd
++bSd++bSd++bSd++bSd+5J"@*>9A,nGr_,)\X7+++bSd++bSd++bSd++bSd++bSd++bT:*s3Ms)\r/L
q#LR4)\X6P++bSd++bSd++bSd++bSd++bSd++bTj*s3Ms)\qlD!u2ag*PNVI++bSd++bSd++bSd++bSd
++bSd+0?Ue*>9A,q#U9l!u2ag*KD4n++bSd++bSd++bSd++bSd++bSd+5J"@*>9A,nGr_,)\X7+++bSd
++bSd++bSd++bSd++bSd++bT:*s3Ms)\r/Lq#LR4)\X6P++bSd++bSd++bSd++bSd++bSd++bTj*s3Ms
)\qlD!u2ag*PNVI++bSd++bSd++bSd++bSd++bSd+0?Ue*>9A,q#U9l!u2ag*KD4n++bSd++bSd++bSd
++bSd++bSd+5J"@*>9A,nGr_,)\X7+++bSd++bSd++bSd++bSd++bSd++bT:*s3Ms)\r/Lq#LR4)\X6P
++bSd++bSd++bSd++bSd++bSd++bTj*s3Ms)\qlD!u1qP*kibK+G(_f+G(_f+G(_f+G(_f+G(_f+KZag
*YSYkq#U9l!u1qP*f_@p+G(_f+G(_f+G(_f+G(_f+G(_f+Pe.B*YSYknGr_,";;ij+G(_f+G(_f+G(_f
+G(_f+G(_f+G(`<+9NYu";U_5q#LR4";;i:+G(_f+G(_f+G(_f+G(_f+G(_f+G(`l+9NYu";UG-!u1qP
*kibK+G(_f+G(_f+G(_f+G(_f+G(_f+KZag*YSYkq#U9l!u1qP*f_@p+G(_f+G(_f+G(_f+G(_f+G(_f
+Pe.B*YSYknGr_,";;ij+G(_f+G(_f+G(_f+G(_f+G(_f+G(`<+9NYu";U_5q#LR4";;i:+G(_f+G(_f
+G(_f+G(_f+G(_f+G(`l+9NYu";UG-!u1qP*kibK+G(_f+G(_f+G(_f+G(_f+G(_f+KZag*YSYkq#U9l
!u1qP*f_@p+G(_f+G(_f+G(_f+G(_f+G(_f+Pe.B*YSYknGr_,";;ij+G(_f+G(_f+G(_f+G(_f+G(_f
+G(`<+9NYu";U_5q#LR4";;i:+G(_f+G(_f+G(_f+G(_f+G(_f+G(`l+9NYu";UG-!u1qP*kibK+G(_f
+G(_f+G(_f+G(_f+G(_f+KZag*YSYkq#U9l!u1qP*f_@p+G(_f+G(_f+G(_f+G(_f+G(_f+Pe.B*YSYk
nGr_,";;ij+G(_f+G(_f+G(_f+G(_f+G(_f+G(`<+9NYu";U_5q#LR4";;i:+G(_f+G(_f+G(_f+G(_f
+G(_f+G(`l+9NYu";UG-!u1qP*kibK+G(_f+G(_f+G(_f+G(_f+G(_f+KZag*YSYkq#U9l!u1qP*f_@p
+G(_f+G(_f+G(_f+G(_f+G(_f+Pe.B*YSYknGr_,";;ij+G(_f+G(_f+G(_f+G(_f+G(_f+G(`<+9NYu
";U_5q#LR4";Dr<+bCkh+bCkh+bCkh+bCkh+bCkh+bCln+Tif#";UG-!u1qQ+2/nM+bCkh+bCkh+bCkh
+bCkh+bCkh+fumi*u"hmq#U9l!u1qQ+-%Lr+bCkh+bCkh+bCkh+bCkh+bCkh+l+:D*u"hmnGr_,";Drl
+bCkh+bCkh+bCkh+bCkh+bCkh+bCl>+Tif#";U_5q#LR4";Dr<+bCkh+bCkh+bCkh+bCkh+bCkh+bCln
+Tif#";UG-!u1qQ+2/nM+bCkh+bCkh+bCkh+bCkh+bCkh+fumi*u"hmq#U9l!u1qQ+-%Lr+bCkh+bCkh
+bCkh+bCkh+bCkh+l+:D*u"hmnGr_,";Drl+bCkh+bCkh+bCkh+bCkh+bCkh+bCl>+Tif#";U_5q#LR4
";Dr<+bCkh+bCkh+bCkh+bCkh+bCkh+bCln+Tif#";UG-!u1qQ+2/nM+bCkh+bCkh+bCkh+bCkh+bCkh
+fumi*u"hmq#U9l!u1qQ+-%Lr+bCkh+bCkh+bCkh+bCkh+bCkh+l+:D*u"hmnGr_,";Drl+bCkh+bCkh
+bCkh+bCkh+bCkh+bCl>+Tif#";U_5q#LR4";Dr<+bCkh+bCkh+bCkh+bCkh+bCkh+bCln+Tif#";UG-
!u1qQ+2/nM+bCkh+bCkh+bCkh+bCkh+bCkh+fumi*u"hmq#U9l!u1qQ+-%Lr+bCkh+bCkh+bCkh+bCkh
+bCkh+l+:D*u"hmnGr_,";Drl+bCkh+bCkh+bCkh+bCkh+bCkh+bCl>+Tif#";U_5q#LR4";Dr<+bCkh
+bCkh+bCkh+bCkh+bCkh+bCln+Tif#";UG-!u1qQ+2/nM+bCkh+bCkh+bCkh+bCkh+bCkh+fumi*u"hm
q#U9l!u1qQ+-%Lr+bCkh+bCkh+bCkh+bCkh+bCkh+l+:D*u"hmnGr_,";Drl+bCkh+bCkh+bCkh+bCkh
+bCkh+bCl>+Tif#";U_5q#LR4";W,?,(_"j,(_"j,(_"j,(_"j,(_"j,(_#p+p/r'";UG-!u1qS+MK%O
,(_"j,(_"j,(_"j,(_"j,(_"j,-<$k+;P(pq#U9l!u1qS+H@Xt,(_"j,(_"j,(_"j,(_"j,(_"j,2FFF
+;P(pnGr_,";W,o,(_"j,(_"j,(_"j,(_"j,(_"j,(_#@+p/r'";U_5q#LR4";W,?,(_"j,(_"j,(_"j
,(_"j,(_"j,(_#p+p/r'";UG-!u1qS+MK%O,(_"j,(_"j,(_"j,(_"j,(_"j,-<$k+;P(pq#U9l!u1qS
+H@Xt,(_"j,(_"j,(_"j,(_"j,(_"j,2FFF+;P(pnGr_,";W,o,(_"j,(_"j,(_"j,(_"j,(_"j,(_#@
+p/r'";U_5q#LR4";W,?,(_"j,(_"j,(_"j,(_"j,(_"j,(_#p+p/r'";UG-!u1qS+MK%O,(_"j,(_"j
,(_"j,(_"j,(_"j,-<$k+;P(pq#U9l!u1qS+H@Xt,(_"j,(_"j,(_"j,(_"j,(_"j,2FFF+;P(pnGr_,
";W,o,(_"j,(_"j,(_"j,(_"j,(_"j,(_#@+p/r'";U_5q#LR4";W,?,(_"j,(_"j,(_"j,(_"j,(_"j
,(_#p+p/r'";UG-!u1qS+MK%O,(_"j,(_"j,(_"j,(_"j,(_"j,-<$k+;P(pq#U9l!u1qS+H@Xt,(_"j
,(_"j,(_"j,(_"j,(_"j,2FFF+;P(pnGr_,";W,o,(_"j,(_"j,(_"j,(_"j,(_"j,(_#@+p/r'";U_5
q#LR4";W,?,(_"j,(_"j,(_"j,(_"j,(_"j,(_#p+p/r'";UG-!u1qS+MK%O,(_"j,(_"j,(_"j,(_"j
,(_"j,-<$k+;P(pq#U9l!u1qS+H@Xt,(_"j,(_"j,(_"j,(_"j,(_"j,2FFF+;P(pnGr_,";W,o,(_"j
,(_"j,(_"j,(_"j,(_"j,(_#@+p/r'";U_5q#LR4#o4\E,D%.l,D%.l,D%.l,D%.l,D%.l,D%/r,6K))
#o2t2!u2+X+hf1Q,D%.l,D%.l,D%.l,D%.l,D%.l,HW0m+VkA!q#U9l!u2+X+c[e!,D%.l,D%.l,D%.l
,D%.l,D%.l,MaRH+VkA!nGr_,#o4\u,D%.l,D%.l,D%.l,D%.l,D%.l,D%/B,6K))#o37:q#LR4#o4\E
,D%.l,D%.l,D%.l,D%.l,D%.l,D%/r,6K))#o2t2!u2+X+hf1Q,D%.l,D%.l,D%.l,D%.l,D%.l,HW0m
+VkA!q#U9l!u2+X+c[e!,D%.l,D%.l,D%.l,D%.l,D%.l,MaRH+VkA!nGr_,#o4\u,D%.l,D%.l,D%.l
,D%.l,D%.l,D%/B,6K))#o37:q#LR4#o4\E,D%.l,D%.l,D%.l,D%.l,D%.l,D%/r,6K))#o2t2!u2+X
+hf1Q,D%.l,D%.l,D%.l,D%.l,D%.l,HW0m+VkA!q#U9l!u2+X+c[e!,D%.l,D%.l,D%.l,D%.l,D%.l
,MaRH+VkA!nGr_,#o4\u,D%.l,D%.l,D%.l,D%.l,D%.l,D%/B,6K))#o37:q#LR4#o4\E,D%.l,D%.l
,D%.l,D%.l,D%.l,D%/r,6K))#o2t2!u2+X+hf1Q,D%.l,D%.l,D%.l,D%.l,D%.l,HW0m+VkA!q#U9l
!u2+X+c[e!,D%.l,D%.l,D%.l,D%.l,D%.l,MaRH+VkA!nGr_,#o4\u,D%.l,D%.l,D%.l,D%.l,D%.l
,D%/B,6K))#o37:q#LR4#o4\E,D%.l,D%.l,D%.l,D%.l,D%.l,D%/r,6K))#o2t2!u2+X+hf1Q,D%.l
,D%.l,D%.l,D%.l,D%.l,HW0m+VkA!q#U9l!u2+X+c[e!,D%.l,D%.l,D%.l,D%.l,D%.l,MaRH+VkA!
nGr_,#o4\u,D%.l,D%.l,D%.l,D%.l,D%.l,D%/B,6K))#o37:q#LR4#oFkH,_@:n,_@:n,_@:n,_@:n
,_@:n,_@;t,Qf5-#o2t2!u2+Z,/,=S,_@:n,_@:n,_@:n,_@:n,_@:n,cr<o+rCV$q#U9l!u2+Z,*!q#
,_@:n,_@:n,_@:n,_@:n,_@:n,i'^J+rCV$nGr_,#oFl#,_@:n,_@:n,_@:n,_@:n,_@:n,_@;D,Qf5-
#o37:q#LR4#oFkH,_@:n,_@:n,_@:n,_@:n,_@:n,_@;t,Qf5-#o2t2!u2+Z,/,=S,_@:n,_@:n,_@:n
,_@:n,_@:n,cr<o+rCV$q#U9l!u2+Z,*!q#,_@:n,_@:n,_@:n,_@:n,_@:n,i'^J+rCV$nGr_,#oFl#
,_@:n,_@:n,_@:n,_@:n,_@:n,_@;D,Qf5-#o37:q#LR4#oFkH,_@:n,_@:n,_@:n,_@:n,_@:n,_@;t
,Qf5-#o2t2!u2+Z,/,=S,_@:n,_@:n,_@:n,_@:n,_@:n,cr<o+rCV$q#U9l!u2+Z,*!q#,_@:n,_@:n
,_@:n,_@:n,_@:n,i'^J+rCV$nGr_,#oFl#,_@:n,_@:n,_@:n,_@:n,_@:n,_@;D,Qf5-#o37:q#LR4
#oFkH,_@:n,_@:n,_@:n,_@:n,_@:n,_@;t,Qf5-#o2t2!u2+Z,/,=S,_@:n,_@:n,_@:n,_@:n,_@:n
,cr<o+rCV$q#U9l!u2+Z,*!q#,_@:n,_@:n,_@:n,_@:n,_@:n,i'^J+rCV$nGr_,#oFl#,_@:n,_@:n
,_@:n,_@:n,_@:n,_@;D,Qf5-#o37:q#LR4#oFkH,_@:n,_@:n,_@:n,_@:n,_@:n,_@;t,Qf5-#o2t2
!u2+Z,/,=S,_@:n,_@:n,_@:n,_@:n,_@:n,cr<o+rCV$q#U9l!u2+Z,*!q#,_@:n,_@:n,_@:n,_@:n
,_@:n,i'^J+rCV$nGr_,#oFl#,_@:n,_@:n,_@:n,_@:n,_@:n,_@;D,Qf5-#o37:q#LR4#oOtJ-%[Fp
-%[Fp-%[Fp-%[Fp-%[Fp-%[H!,m,A0#o2t2!u2+[,JGIU-%[Fp-%[Fp-%[Fp-%[Fp-%[Fp-*8Hq,8ge&
q#U9l!u2+[,E=(%-%[Fp-%[Fp-%[Fp-%[Fp-%[Fp-/BjL,8ge&nGr_,#oOu%-%[Fp-%[Fp-%[Fp-%[Fp
-%[Fp-%[GF,m,A0#o37:q#LR4#oOtJ-%[Fp-%[Fp-%[Fp-%[Fp-%[Fp-%[H!,m,A0#o2t2!u2+[,JGIU
-%[Fp-%[Fp-%[Fp-%[Fp-%[Fp-*8Hq,8ge&q#U9l!u2+[,E=(%-%[Fp-%[Fp-%[Fp-%[Fp-%[Fp-/BjL
,8ge&nGr_,#oOu%-%[Fp-%[Fp-%[Fp-%[Fp-%[Fp-%[GF,m,A0#o37:q#LR4#oOtJ-%[Fp-%[Fp-%[Fp
-%[Fp-%[Fp-%[H!,m,A0#o2t2!u2+[,JGIU-%[Fp-%[Fp-%[Fp-%[Fp-%[Fp-*8Hq,8ge&q#U9l!u2+[
,E=(%-%[Fp-%[Fp-%[Fp-%[Fp-%[Fp-/BjL,8ge&nGr_,#oOu%-%[Fp-%[Fp-%[Fp-%[Fp-%[Fp-%[GF
,m,A0#o37:q#LR4#oOtJ-%[Fp-%[Fp-%[Fp-%[Fp-%[Fp-%[H!,m,A0#o2t2!u2+[,JGIU-%[Fp-%[Fp
-%[Fp-%[Fp-%[Fp-*8Hq,8ge&q#U9l!u2+[,E=(%-%[Fp-%[Fp-%[Fp-%[Fp-%[Fp-/BjL,8ge&nGr_,
#oOu%-%[Fp-%[Fp-%[Fp-%[Fp-%[Fp-%[GF,m,A0#o37:q#LR4#oOtJ-%[Fp-%[Fp-%[Fp-%[Fp-%[Fp
-%[H!,m,A0#o2t2!u2+[,JGIU-%[Fp-%[Fp-%[Fp-%[Fp-%[Fp-*8Hq,8ge&q#U9l!u2+[,E=(%-%[Fp
-%[Fp-%[Fp-%[Fp-%[Fp-/BjL,8ge&nGr_,#oOu%-%[Fp-%[Fp-%[Fp-%[Fp-%[Fp-%[GF,m,A0#o37:
q#LR4$Q14M-A!Rr-A!Rr-A!Rr-A!Rr-A!Rr-A!T#-3GM2$Pi14!u21],ebUW-A!Rr-A!Rr-A!Rr-A!Rr
-A!Rr-ESTs,T-t)q#U9l!u21],`X4'-A!Rr-A!Rr-A!Rr-A!Rr-A!Rr-J^!N,T-t)nGr_,$Q15(-A!Rr
-A!Rr-A!Rr-A!Rr-A!Rr-A!SH-3GM2$PiI<q#LR4$Q14M-A!Rr-A!Rr-A!Rr-A!Rr-A!Rr-A!T#-3GM2
$Pi14!u21],ebUW-A!Rr-A!Rr-A!Rr-A!Rr-A!Rr-ESTs,T-t)q#U9l!u21],`X4'-A!Rr-A!Rr-A!Rr
-A!Rr-A!Rr-J^!N,T-t)nGr_,$Q15(-A!Rr-A!Rr-A!Rr-A!Rr-A!Rr-A!SH-3GM2$PiI<q#LR4$Q14M
-A!Rr-A!Rr-A!Rr-A!Rr-A!Rr-A!T#-3GM2$Pi14!u21],ebUW-A!Rr-A!Rr-A!Rr-A!Rr-A!Rr-ESTs
,T-t)q#U9l!u21],`X4'-A!Rr-A!Rr-A!Rr-A!Rr-A!Rr-J^!N,T-t)nGr_,$Q15(-A!Rr-A!Rr-A!Rr
-A!Rr-A!Rr-A!SH-3GM2$PiI<q#LR4$Q14M-A!Rr-A!Rr-A!Rr-A!Rr-A!Rr-A!T#-3GM2$Pi14!u21]
,ebUW-A!Rr-A!Rr-A!Rr-A!Rr-A!Rr-ESTs,T-t)q#U9l!u21],`X4'-A!Rr-A!Rr-A!Rr-A!Rr-A!Rr
-J^!N,T-t)nGr_,$Q15(-A!Rr-A!Rr-A!Rr-A!Rr-A!Rr-A!SH-3GM2$PiI<q#LR4$Q14M-A!Rr-A!Rr
-A!Rr-A!Rr-A!Rr-A!T#-3GM2$Pi14!u21],ebUW-A!Rr-A!Rr-A!Rr-A!Rr-A!Rr-ESTs,T-t)q#U9l
!u21],`X4'-A!Rr-A!Rr-A!Rr-A!Rr-A!Rr-J^!N,T-t)nGr_,$Q:>*-\<^t-\<^t-\<^t-\<^t-\<^t
-\<_J-NbY5$PiI<q#LR4$Q:=O-\<^t-\<^t-\<^t-\<^t-\<^t-\<`%-NbY5$Pi14!u21^-,(aY-\<^t
-\<^t-\<^t-\<^t-\<^t-`n`u,oR.+q#U9l!u21^-&s@)-\<^t-\<^t-\<^t-\<^t-\<^t-f$-P,oR.+
nGr_,$Q:;)-\<^t-\<^t-\<^t-\<^t-\<^t-\<_J-NbV4$PiI<q#LU5#oFj3O!TB(JgH!pJgH!pJgH!p
JgH!pJgH!phB`:M+rCV$nGr_,(Cq@s)M/lZ)M/lZ)M/lZ)M/lZ)M/lZ)M/m0)?Ufe(DZ`Hq#LR!!uD9(
$\Ab<$\Ab<$\Ab<$\Ab<$\Ab<$\AcB$Ng\O!s7rm!!9eJJe`kPJe`kPJe`kPJe`kPJe`kPJeb=$!!;or
JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(T`K`GJcUH(JcUH(JcUH(
JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcVPGJcUH(JcUH(JcUH(JcUH(JcUH(JcUH(JcUH(
JcUH(JcUH(JcUH(JcUH(JcUH(T`K`GJcUH(JcUH(JcUH(JcUH(JcUH(JcX7"J,~>

%%EndBinary
grestore
np
96.84 58.8 mo
96.6 58.2 95.76 57.96 95.16 58.32 cv
94.56 58.56 94.2 59.28 94.56 60 cv
94.92 60.6 95.64 60.84 96.24 60.6 cv
96.96 60.24 97.2 59.52 96.84 58.8 cv
0 .439209 .751953 rgb
ef
104.04 57.84 mo
103.56 57.24 102.6 57.12 102.12 57.6 cv
101.52 58.08 101.4 59.04 102 59.52 cv
102.48 60.12 103.32 60.24 103.92 59.76 cv
104.4 59.28 104.52 58.32 104.04 57.84 cv
ef
111.6 57.84 mo
110.88 57.24 109.92 57.36 109.32 58.08 cv
108.72 58.68 108.84 59.76 109.56 60.36 cv
110.16 60.96 111.24 60.84 111.84 60.12 cv
112.44 59.4 112.32 58.44 111.6 57.84 cv
ef
119.52 59.16 mo
118.68 58.56 117.48 58.68 116.76 59.52 cv
116.04 60.36 116.28 61.68 117.12 62.4 cv
117.96 63 119.28 62.88 119.88 62.04 cv
120.6 61.2 120.48 59.88 119.52 59.16 cv
ef
127.68 62.28 mo
126.72 61.44 125.16 61.44 124.2 62.4 cv
123.24 63.36 123.24 64.8 124.2 65.76 cv
125.28 66.72 126.72 66.72 127.68 65.76 cv
128.64 64.8 128.64 63.24 127.68 62.28 cv
ef
135 68.4 mo
134.16 66.96 132.36 66.48 131.04 67.32 cv
129.6 68.04 129.12 69.84 129.96 71.28 cv
130.8 72.6 132.48 73.08 133.92 72.36 cv
135.36 71.52 135.84 69.72 135 68.4 cv
ef
139.68 77.76 mo
139.44 75.84 137.88 74.52 135.96 74.64 cv
134.16 74.88 132.72 76.44 132.96 78.36 cv
133.08 80.16 134.76 81.6 136.56 81.48 cv
138.48 81.24 139.8 79.56 139.68 77.76 cv
ef
136.8 89.52 mo
138.12 87.84 137.76 85.32 136.2 84 cv
134.52 82.68 132 82.92 130.68 84.6 cv
129.36 86.28 129.6 88.8 131.28 90.12 cv
132.96 91.44 135.36 91.2 136.8 89.52 cv
ef
120.84 45.72 mo
121.56 45.6 122.04 45.12 122.04 44.4 cv
122.04 43.68 121.56 43.08 120.84 43.08 cv
120.12 43.08 119.52 43.68 119.52 44.4 cv
119.52 45.12 120.12 45.72 120.84 45.72 cv
ef
128.28 50.28 mo
129 50.16 129.48 49.32 129.24 48.6 cv
129.12 47.88 128.28 47.52 127.56 47.64 cv
126.84 47.88 126.48 48.6 126.6 49.32 cv
126.84 50.04 127.56 50.52 128.28 50.28 cv
ef
135.24 56.4 mo
136.08 56.04 136.44 54.96 136.08 54.24 cv
135.72 53.4 134.76 53.04 133.92 53.4 cv
133.08 53.76 132.72 54.72 133.08 55.56 cv
133.44 56.4 134.4 56.76 135.24 56.4 cv
ef
141.36 63.84 mo
142.32 63.36 142.8 62.16 142.2 61.2 cv
141.72 60.12 140.52 59.76 139.56 60.24 cv
138.6 60.72 138.12 61.92 138.6 63 cv
139.2 63.96 140.4 64.32 141.36 63.84 cv
ef
145.8 72.84 mo
147.12 72.36 147.72 71.04 147.36 69.72 cv
146.88 68.52 145.44 67.8 144.24 68.28 cv
142.92 68.76 142.32 70.2 142.68 71.4 cv
143.16 72.72 144.6 73.32 145.8 72.84 cv
ef
147 83.4 mo
148.56 83.28 149.76 81.84 149.64 80.28 cv
149.52 78.72 148.2 77.52 146.52 77.64 cv
144.96 77.76 143.76 79.2 143.88 80.76 cv
144 82.32 145.44 83.52 147 83.4 cv
ef
143.16 93.96 mo
144.84 94.56 146.76 93.72 147.48 91.92 cv
148.08 90.24 147.24 88.32 145.44 87.6 cv
143.76 87 141.72 87.84 141.12 89.64 cv
140.52 91.32 141.36 93.36 143.16 93.96 cv
ef
131.88 98.88 mo
132.84 100.8 135.12 101.52 137.16 100.68 cv
139.08 99.72 139.8 97.44 138.96 95.4 cv
138 93.48 135.6 92.76 133.68 93.6 cv
131.76 94.56 130.92 96.96 131.88 98.88 cv
ef
81.24 124.08 mo
81.84 123.84 82.08 123 81.84 122.4 cv
81.48 121.8 80.76 121.44 80.16 121.8 cv
79.56 122.16 79.2 122.88 79.56 123.48 cv
79.8 124.2 80.64 124.44 81.24 124.08 cv
ef
80.88 116.76 mo
81.36 116.28 81.48 115.32 81 114.84 cv
80.52 114.24 79.68 114.12 79.08 114.6 cv
78.48 115.2 78.48 116.04 78.96 116.64 cv
79.44 117.12 80.28 117.24 80.88 116.76 cv
ef
81.6 109.2 mo
82.2 108.48 82.08 107.4 81.48 106.8 cv
80.76 106.2 79.68 106.32 79.08 107.04 cv
78.6 107.76 78.6 108.72 79.32 109.32 cv
80.04 109.92 81 109.8 81.6 109.2 cv
ef
83.64 101.52 mo
84.36 100.68 84.12 99.48 83.28 98.76 cv
82.44 98.04 81.12 98.16 80.52 99.12 cv
79.8 99.96 79.92 101.28 80.88 101.88 cv
81.72 102.6 82.92 102.48 83.64 101.52 cv
ef
87.12 94.44 mo
88.08 93.48 88.08 91.92 87.12 90.96 cv
86.16 90 84.6 90 83.64 90.96 cv
82.68 91.92 82.68 93.48 83.64 94.44 cv
84.6 95.4 86.16 95.4 87.12 94.44 cv
ef
92.52 88.68 mo
93.96 87.96 94.44 86.16 93.6 84.72 cv
92.88 83.4 91.08 82.92 89.64 83.64 cv
88.32 84.48 87.84 86.28 88.56 87.6 cv
89.4 89.04 91.2 89.52 92.52 88.68 cv
ef
99.6 85.8 mo
101.52 85.56 102.84 84 102.72 82.08 cv
102.6 80.28 100.92 78.84 99 78.96 cv
97.2 79.2 95.76 80.76 96 82.68 cv
96.12 84.48 97.8 85.92 99.6 85.8 cv
ef
105.96 87.96 mo
107.64 89.28 110.04 89.04 111.36 87.36 cv
112.68 85.68 112.44 83.28 110.76 81.96 cv
109.08 80.52 106.68 80.88 105.36 82.56 cv
104.04 84.24 104.28 86.64 105.96 87.96 cv
ef
64.44 97.8 mo
64.44 98.52 65.04 99.12 65.64 99.12 cv
66.36 99.12 66.96 98.52 66.96 97.8 cv
66.96 97.2 66.36 96.6 65.64 96.6 cv
64.92 96.6 64.44 97.2 64.44 97.8 cv
ef
69 91.08 mo
69.12 91.8 69.96 92.16 70.68 92.04 cv
71.4 91.8 71.76 91.08 71.64 90.36 cv
71.4 89.64 70.68 89.16 69.96 89.4 cv
69.24 89.52 68.76 90.36 69 91.08 cv
ef
74.64 84.72 mo
75 85.56 76.08 85.92 76.8 85.56 cv
77.64 85.2 78 84.24 77.64 83.4 cv
77.28 82.56 76.32 82.2 75.48 82.56 cv
74.64 82.92 74.28 83.88 74.64 84.72 cv
ef
81.48 79.08 mo
82.08 80.04 83.28 80.52 84.24 80.04 cv
85.2 79.56 85.56 78.36 85.08 77.28 cv
84.6 76.32 83.4 75.96 82.44 76.44 cv
81.48 76.92 81 78.12 81.48 79.08 cv
ef
89.52 74.52 mo
90 75.72 91.44 76.44 92.64 75.96 cv
93.96 75.48 94.56 74.04 94.2 72.84 cv
93.72 71.52 92.28 70.92 91.08 71.4 cv
89.76 71.76 89.16 73.2 89.52 74.52 cv
ef
98.88 72.12 mo
99 73.68 100.44 74.88 102 74.76 cv
103.68 74.64 104.88 73.32 104.76 71.64 cv
104.64 70.08 103.2 68.88 101.64 69 cv
99.96 69.12 98.76 70.56 98.88 72.12 cv
ef
108.96 73.2 mo
108.24 75 109.08 76.92 110.88 77.52 cv
112.68 78.24 114.6 77.28 115.2 75.6 cv
115.92 73.8 114.96 71.88 113.28 71.16 cv
111.48 70.56 109.56 71.4 108.96 73.2 cv
ef
116.76 79.8 mo
114.84 80.64 114 83.04 114.96 84.96 cv
115.92 86.88 118.2 87.72 120.12 86.76 cv
122.04 85.8 122.88 83.52 121.92 81.6 cv
120.96 79.68 118.68 78.84 116.76 79.8 cv
ef
143.04 138.48 mo
143.4 139.2 144.12 139.44 144.84 139.08 cv
145.44 138.84 145.68 138 145.44 137.4 cv
145.08 136.8 144.36 136.56 143.64 136.8 cv
143.04 137.16 142.8 137.88 143.04 138.48 cv
ef
135.96 139.56 mo
136.44 140.16 137.28 140.16 137.88 139.68 cv
138.48 139.2 138.48 138.36 138 137.76 cv
137.52 137.28 136.68 137.16 136.08 137.64 cv
135.48 138.12 135.48 138.96 135.96 139.56 cv
ef
128.28 139.56 mo
129 140.16 130.08 140.04 130.68 139.32 cv
131.16 138.6 131.16 137.64 130.44 137.04 cv
129.72 136.44 128.76 136.56 128.16 137.28 cv
127.56 137.88 127.68 138.96 128.28 139.56 cv
ef
120.36 138.12 mo
121.2 138.84 122.52 138.72 123.24 137.88 cv
123.84 136.92 123.72 135.72 122.88 135 cv
121.92 134.4 120.72 134.52 120 135.36 cv
119.4 136.2 119.52 137.52 120.36 138.12 cv
ef
112.32 135 mo
113.28 135.96 114.72 135.96 115.68 135 cv
116.64 134.04 116.64 132.48 115.68 131.52 cv
114.72 130.68 113.16 130.68 112.2 131.64 cv
111.24 132.6 111.36 134.04 112.32 135 cv
ef
105 129 mo
105.72 130.44 107.52 130.92 108.96 130.08 cv
110.28 129.24 110.76 127.56 110.04 126.12 cv
109.2 124.68 107.4 124.2 106.08 125.04 cv
104.64 125.88 104.16 127.56 105 129 cv
ef
100.32 119.64 mo
100.44 121.44 102.12 122.88 103.92 122.76 cv
105.84 122.52 107.16 120.96 107.04 119.04 cv
106.92 117.12 105.24 115.8 103.32 115.92 cv
101.52 116.16 100.08 117.72 100.32 119.64 cv
ef
103.2 107.88 mo
101.88 109.56 102.12 111.96 103.8 113.4 cv
105.48 114.72 107.88 114.36 109.32 112.8 cv
110.64 111.12 110.4 108.6 108.72 107.28 cv
107.04 105.96 104.52 106.2 103.2 107.88 cv
ef
119.16 151.68 mo
118.44 151.68 117.84 152.28 117.84 153 cv
117.84 153.72 118.44 154.32 119.16 154.2 cv
119.88 154.2 120.36 153.72 120.36 153 cv
120.36 152.28 119.88 151.68 119.16 151.68 cv
ef
111.6 147.12 mo
110.88 147.24 110.52 148.08 110.64 148.8 cv
110.88 149.52 111.6 149.88 112.32 149.64 cv
113.04 149.52 113.52 148.68 113.28 147.96 cv
113.16 147.24 112.32 146.88 111.6 147.12 cv
ef
104.64 141 mo
103.92 141.36 103.44 142.32 103.92 143.16 cv
104.28 144 105.24 144.36 106.08 144 cv
106.8 143.64 107.16 142.68 106.8 141.84 cv
106.44 141 105.48 140.64 104.64 141 cv
ef
98.64 133.56 mo
97.56 134.04 97.2 135.24 97.68 136.2 cv
98.16 137.28 99.36 137.64 100.44 137.16 cv
101.4 136.68 101.76 135.48 101.28 134.4 cv
100.8 133.44 99.6 133.08 98.64 133.56 cv
ef
94.08 124.56 mo
92.88 124.92 92.16 126.36 92.64 127.68 cv
93.12 128.88 94.44 129.6 95.76 129.12 cv
97.08 128.64 97.68 127.2 97.2 126 cv
96.72 124.68 95.4 124.08 94.08 124.56 cv
ef
93 114 mo
91.32 114.12 90.12 115.44 90.24 117.12 cv
90.36 118.68 91.8 119.88 93.36 119.76 cv
95.04 119.64 96.24 118.2 96.12 116.64 cv
96 115.08 94.56 113.88 93 114 cv
ef
96.84 103.44 mo
95.04 102.72 93.12 103.68 92.52 105.36 cv
91.8 107.16 92.76 109.08 94.44 109.8 cv
96.24 110.4 98.16 109.56 98.88 107.76 cv
99.48 106.08 98.64 104.04 96.84 103.44 cv
ef
106.92 98.52 mo
105.96 96.6 103.68 95.76 101.64 96.72 cv
99.72 97.68 99 99.96 99.84 101.88 cv
100.8 103.8 103.2 104.64 105.12 103.68 cv
107.04 102.84 107.76 100.44 106.92 98.52 cv
ef
158.76 73.32 mo
158.04 73.56 157.8 74.4 158.16 75 cv
158.4 75.6 159.12 75.84 159.84 75.6 cv
160.44 75.24 160.68 74.52 160.44 73.92 cv
160.08 73.2 159.36 72.96 158.76 73.32 cv
ef
159.12 80.64 mo
158.52 81.12 158.52 81.96 159 82.56 cv
159.48 83.16 160.32 83.28 160.92 82.68 cv
161.4 82.2 161.52 81.36 161.04 80.76 cv
160.56 80.28 159.72 80.16 159.12 80.64 cv
ef
158.28 88.2 mo
157.8 88.92 157.8 90 158.52 90.6 cv
159.24 91.08 160.2 91.08 160.8 90.36 cv
161.4 89.64 161.28 88.68 160.68 88.08 cv
159.96 87.48 158.88 87.6 158.28 88.2 cv
ef
156.36 95.76 mo
155.64 96.72 155.76 97.92 156.6 98.64 cv
157.56 99.36 158.76 99.12 159.48 98.28 cv
160.2 97.44 159.96 96.12 159.12 95.52 cv
158.28 94.8 156.96 94.92 156.36 95.76 cv
ef
152.88 102.96 mo
151.92 103.92 151.92 105.48 152.88 106.44 cv
153.84 107.4 155.4 107.4 156.36 106.44 cv
157.32 105.48 157.32 103.92 156.36 102.96 cv
155.4 102 153.84 102 152.88 102.96 cv
ef
147.36 108.72 mo
146.04 109.44 145.56 111.24 146.28 112.68 cv
147.12 114 148.92 114.48 150.24 113.76 cv
151.68 112.92 152.16 111.12 151.32 109.68 cv
150.6 108.36 148.8 107.88 147.36 108.72 cv
ef
140.28 111.6 mo
138.48 111.84 137.04 113.4 137.28 115.32 cv
137.4 117.12 139.08 118.56 140.88 118.32 cv
142.8 118.2 144.12 116.52 144 114.72 cv
143.88 112.8 142.2 111.48 140.28 111.6 cv
ef
134.04 109.44 mo
132.36 108 129.96 108.36 128.52 110.04 cv
127.2 111.72 127.44 114.12 129.12 115.44 cv
130.8 116.76 133.32 116.52 134.64 114.84 cv
135.96 113.16 135.72 110.76 134.04 109.44 cv
ef
175.56 99.48 mo
175.56 98.88 174.96 98.28 174.24 98.28 cv
173.52 98.28 173.04 98.88 173.04 99.48 cv
173.04 100.2 173.64 100.8 174.24 100.8 cv
174.96 100.8 175.56 100.2 175.56 99.48 cv
ef
171 106.32 mo
170.76 105.6 170.04 105.12 169.32 105.36 cv
168.6 105.6 168.12 106.32 168.36 107.04 cv
168.6 107.76 169.32 108.24 170.04 108 cv
170.76 107.76 171.24 107.04 171 106.32 cv
ef
165.24 112.68 mo
164.88 111.84 163.92 111.48 163.08 111.84 cv
162.24 112.2 161.88 113.16 162.36 114 cv
162.72 114.84 163.68 115.2 164.52 114.84 cv
165.24 114.48 165.6 113.52 165.24 112.68 cv
ef
158.4 118.32 mo
157.92 117.24 156.72 116.88 155.76 117.36 cv
154.68 117.84 154.32 119.04 154.8 120 cv
155.28 121.08 156.48 121.44 157.56 120.96 cv
158.52 120.48 158.88 119.28 158.4 118.32 cv
ef
150.36 122.88 mo
149.88 121.68 148.56 120.96 147.24 121.44 cv
146.04 121.92 145.32 123.24 145.8 124.56 cv
146.28 125.88 147.72 126.48 148.92 126 cv
150.24 125.52 150.84 124.2 150.36 122.88 cv
ef
141 125.28 mo
140.88 123.72 139.56 122.52 137.88 122.64 cv
136.32 122.76 135.12 124.08 135.24 125.76 cv
135.36 127.32 136.8 128.52 138.36 128.4 cv
139.92 128.28 141.12 126.84 141 125.28 cv
ef
131.04 124.2 mo
131.76 122.4 130.8 120.48 129 119.88 cv
127.32 119.16 125.4 120.12 124.68 121.8 cv
124.08 123.6 124.92 125.52 126.72 126.24 cv
128.4 126.84 130.44 126 131.04 124.2 cv
ef
123.24 117.6 mo
125.16 116.64 126 114.36 125.04 112.44 cv
124.08 110.52 121.8 109.68 119.88 110.64 cv
117.84 111.6 117.12 113.88 118.08 115.8 cv
118.92 117.72 121.32 118.56 123.24 117.6 cv
ef
/1 
[/DeviceGray] /CSA add_res
0 gry
true set_gvm
%ADOBeginSubsetFont: CNHBAA+TimesNewRoman,Bold Initial
ct_T42Dict begin
-0.555 -0.305 2 1.023
 256 array 0 1 255 {1 index exch /.notdef put} for  /CNHBAA+TimesNewRoman,Bold
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000566376
742070f2f15600000124000008266670676d682061fb0000094c000005f2
676c79660000000000003f4c000029ea68656164de5fc54000000f400000
0036686865611304167c00000f7800000024686d74780000000000000f9c
000001746c6f6361000000000000111000001ab06d617870169004780000
2bc0000000206e616d650000000000002be000000026707265706b6e3b5c
00002c080000134167646972000000000000000000000000000100000190
000500080000000000000000000000000000000000000000000000000000
00000000000000000000000000080000000000000000000000000000f000
f0ff0000000000000000000000000001000000000000058e001f054c001f
054c001c0394001b0000ffe10000ffe40000ffe8fe4afffc056b0023fe6a
ffe003130000012400000124000000000000000000250084002400e80096
00bf005d00cb02030045012e005800040118001900020139004b01100017
0005010a00280023004b00500015004a00e5010d00af003100ea01460081
0125004f009c0022004e00160041009100a00147ffe9008100d3016900ab
001700a801400027004c0148ffdf00510050ffb7012e0000003b0097009a
010e001f004c010a0123ffde00220073008700ba00d600ff005a009805a0
ffe900500052006effb7005c00d1015a015bff1c0049006e007e009800a1
00bd00e4018801c00405ff600035006200720107011301280382ffa80038
05d809b5ffc4ffd00010006e00a100ba00ec022b0446ffee004000e80401
ff680003001300330033006e00a200b600dc011801350343000e0034005c
005d007c00af0328003b00480089009c00ba017b01af030effa400170037
0063007f00e0017801c0022105d805f0ff7a0012002700340052008a00a4
00c100c300eb011801460154036dfe3fff4e00010008002b0045006e0084
008600ae00af00c200c200c4010f01210149017b01c101de01e1036e03e6
006300a700ed00f600f801280169017e023f02820532fd81ffb500260035
0040004500490057006c00ac01260140015b017b019c0277027e027f03b6
03dc042804efff38ffc30006002f0040008200aa00b600ce00d300d700e5
0146014d01d6027e03b30586ff7b0012002f0068007f008400a500b900f5
01050109010c01140120013301370178017b01c001e1021d022302580362
03af058cff79ff8d00210024005d00650068006a0083008500b700cf00e2
00eb00ed011a0120012f0137013f0150018d018f01c402cf0357035c0396
0440049604ab04c204fc051105c2fed1fee00013002100240030004d004d
005d0066007a007c00b800b800c300da0103011b011e012f013d014a0150
015f0166017c0190019501a301a601b601c701d001e901ef01f90218028c
029402bb02c502cf02d0031d032a0344039f03cc042104da04fb0761fd1d
febffeefff0bff2bff33ff90ff9cffdbffed00010008001c0025003f0043
005a006b0080008400900095009d00a700b400cd00d500d600df00df00df
00e400f000f600fb010601130119011b012201230127012c013f01570158
0177018a019301a401c601e101e401fc0200020c02220222022a0236024a
025c028202ec02fc030a032303410378039703d203fa04790532053205ab
05b505f006e4072508ccfc9bfddefe00fe69fe96fe9bff3500030006000e
00130019003400420048004a0057006400710071007200760077007a007a
0083009c00af00af00b200bb00c800cc00cf00cf00db00dc00df00e400e4
00e400e900eb00f400fd00fe01020105010501080108011b012201230130
01370143015b016001650178017801780178017b0182018901980198019b
019e01a101a601d101d201d301df01e301f502000200022d02410247024a
0250025b025d025d025f02630281028b02b402b402ce02d602db02e202fa
03100311031f0327034503670388038a03b003b403d403d5042604410448
046b04c704d1053205480549055f0563058b05a105a305c205ca05e405ff
069306a206b806e8070a073607500754078907a907bb07dc07ff08270120
014d011b0129000000000000000000000093015b042f029001ff02b800db
00be027403cb029401ab000000000000000000000000058a038a0364005f
02b803bd029d7c9003e203ac02820000044400000000003d010a00cc00bc
00cc05d3041505e800c7021a00ee00000194036102be029902180136033b
048504cc0050007905a305a302df020702af000001eb0064005f00550119
00f2045600ef00c800cf058a0143014602de01ab02c6024a005d00d800a4
02bb009900a0006501370274036400b500fa009101b9032001b60025007f
00d000ec00e000000000000000000000042ffd42023f06180276063a0137
01b90151ffc70229ffeb023f02e1018500db03fa01900156014e012f00a6
00e300bb00d50134011f04fe041b00d100e4011e009b00cd00e700b300e2
00ca042400b800f500b90334005a04e00123012ffdc9fe440574038301f6
02410002001700500015004f001700a80051009800520049006e000e00af
017b017b019c006a008300eb00cd0122000005d306da009a008f00ba0315
002503a5028002ff03c80420009200e0034c009b007d00f8011c013400a8
006d006900000420ffe6fea4006a006a003800380162015a0044006d0048
001eff6d00a600a600400040ff5cff990559052b00ce014c011500bf0140
011800c800960509feed004800b4009500db0048018b00b3fe6400c000ea
01180125013203b003ed0576059005aa05b405be05cd063100780084009b
00cc00e200f4010a0120016300d100ea00f7010801420019002c00340041
003800480058006c025903bd0043011a007000d30028003700420050005a
0064007300780082008c009c00a500bd00ce00f00110015c00be00d80102
0117012c016300ea01080041004b0055005f007300a60109018301b30041
0064001e002a00eb00fa010e01380274002c00400082009600b600c000cc
00dc00e600f000ff010a0120012c013b01440156016300f7005700640110
0136005001b10000ffb60039004e004403cc00e5002401100042012201a4
00f0006000e0000e001d003905e30102002cfe4eff38026903bd011600ff
000e00a00054001b003d01710041000f005000fd0015014f0035fe470039
00ab0080005005a50016002b00ac0115021504570555007300da005c00ce
0072ff58019a0744000040425554403f3e3d3c3b3a393837353433323130
2f2e2d2c2b2a292827262524232221201f1e1d1c1b1a1918171615141312
11100f0e0d0c0b0a090807060504030201002c4523466020b02660b00426
2348482d2c452346236120b02661b004262348482d2c45234660b0206120
b04660b004262348482d2c4523462361b0206020b02661b02061b0042623
48482d2c45234660b0406120b06660b004262348482d2c4523462361b040
6020b02661b04061b004262348482d2c0110203c003c2d2c20452320b0cd
442320b8015a51582320b08d44235920b0ed51582320b04d44235920b090
51582320b00d44235921212d2c20204518684420b001602045b04676688a
4560442d2c01b10b0a432343650a2d2c00b10a0b4323430b2d2c00b01723
70b101173e01b0172370b10217453ab10200080d2d2c45b01a234445b019
23442d2c2045b00325456164b050515845441b2121592d2cb00143632362
b0002342b00f2b2d2c2045b0004360442d2c01b00643b00743650a2d2c20
69b04061b0008b20b12cc08a8cb8100062602b0c642364615c58b0036159
2d2c45b0112bb0172344b0177ae4182d2c45b0112bb01723442d2cb01243
588745b0112bb0172344b0177ae41b038a45186920b01723448a8a8720b0
a05158b0112bb0172344b0177ae41b21b0177ae45959182d2c2d2cb00225
46608a46b040618c482d2c4b53205c58b002855958b00185592d2c20b003
2545b019234445b01a23444565234520b00325606a20b009234223688a6a
606120b01a8ab000527921b21a1a40b9ffe0001a45208a54582321b03f1b
235961441cb114008a5279b31940201945208a54582321b03f1b23596144
2d2cb110114323430b2d2cb10e0f4323430b2d2cb10c0d4323430b2d2cb1
0c0d432343650b2d2cb10e0f432343650b2d2cb11011432343650b2d2c4b
525845441b2121592d2c0120b003252349b04060b0206320b000525823b0
02253823b002256538008a63381b212121212159012d2c4bb06451584569
b00943608a103a1b212121592d2c01b005251023208af500b0016023edec
2d2c01b005251023208af500b0016123edec2d2c01b0062510f500edec2d
2c20b001600110203c003c2d2c20b001610110203c003c2d2cb02b2bb02a
2a2d2c00b00743b006430b2d2c3eb02a2a2d2c352d2c76b8029f23701020
b8029f4520b0005058b00161593a2f182d2c21210c6423648bb84000622d
2c21b08051580c6423648bb82000621bb200402f2b59b002602d2c21b0c0
51580c6423648bb81555621bb200802f2b59b002602d2c0c6423648bb840
00626023212d2cb4000100000015b00826b00826b00826b008260f101613
45683ab001162d2cb4000100000015b00826b00826b00826b008260f1016
134568653ab001162d2c4b53234b515a5820458a60441b2121592d2c4b54
5820458a60441b2121592d2c4b53234b515a58381b2121592d2c4b545838
1b2121592d2cb0134358031b02592d2cb0134358021b03592d2c4b54b012
435c5a58381b2121592d2cb012435c580cb00425b00425060c6423646164
b807085158b00425b00425012046b01060482046b0106048590a21211b21
21592d2cb012435c580cb00425b00425060c6423646164b807085158b004
25b00425012046b8fff060482046b8fff06048590a21211b2121592d2c4b
53234b515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b2121592d
2c4b53234b515ab012435c5a58381b2121592d2c0c8a034b54b00426024b
545a8a8a0ab012435c5a58381b2121592d2c462346608a8a462320468a60
8a61b8ff8062232010238ab9032703278a70456020b0005058b00161b8ff
ba8b1bb0468c59b0106068013a2d2cb1020042b123018851b1400188535a
58b910000020885458b202010243604259b12401885158b9200000408854
58b202020243604259b12401885458b2022002436042004b014b5258b202
0802436042591bb940000080885458b202040243604259b94000008063b8
0100885458b202080243604259b94000010063b80200885458b202100243
6042595959592d2cb0024354584b53234b515a58381b2121591b21212121
592d000000010000000511ecb1b0afba5f0f3cf50819080000000000a2e3
354600000000c8c2334ffb89fd8c10000835000100090001000000000000
000100000721fe4500571000fb89fadf1000000100000000000000000000
00000000005d0639011c0639011c0639011c020000000200000002000000
020000000200000002000000020000000200000002000000020000000200
0000020000000200000002aa003202aa003202aa00320400004a0400004a
0400004a0400004a0400004a040000450400004504000045040000450400
004504000045040000450400004504000045040000450400004504000045
05c7001005c7001005c7005105c7005105c7005105c70051063900530639
005306390053063900530639005306390053078d0029078d0029078d0029
078d0029078d0029078d00290473006a0556004a05c7003005c7003005c7
003005c7003005c7003005c7003005c7003005c7003005c7003005c70030
05c7003005c700300400005c0473002b038d004e038d004e038d004f038d
004f038d004f038d004f0239002a0239002a0239002a0239002b0239002b
047300460400004a0400004a0473004e038d004b031d005102aa00260473
003f0473003f0473003f0473003f04000011000000360036003600360036
00360036003600360036003600360036003600360036005100510051013c
013c013c013c013c021c021c021c021c021c021c021c021c021c021c021c
021c02f202f203bb03bb03bb03bb04c104c104c104c104c104c105bb05bb
05bb05bb05bb05bb06a6072f07f507f507f507f507f507f507f507f507f5
07f507f507f509710a580b070b070bd60bd60bd60bd60c720c720c720cf1
0cf10e350f160f16101110e3128312f913f813f813f813f814f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f514f514f514f514f514f514f514f514f514f514f5
14f514f514f514f514f5000100000d5700f2003c008f000600020010002f
00560000088bffff00050002000000010012000200020000000600140000
54696d6573204e657720526f6d616e2c426f6c640000b15420b8040cb30c
0e3220b8040cb2131732b8040bb328201f0f41100412008004120002000f
0412003f0412005f04120003005f0412000100400412b2783340b80412b2
723340b80412b26e3340b80412b26a3340b80412b2543340bc0412004a00
33ffc00412b317183240b80412b30a0c3280b80412b308093240b80411b2
5a33404109041100560033ffc0041100530033ffc00411b2503340b80411
b24d3340bc041100470033ffc00411b344453240b80411b2423340bc0411
003e0033ffc00411b23a331f4124041100200411004004110070041100af
041100f004110006000f0411002f04110090041100ff04110004002f0411
00400411007f0411008f041100a0041100e004110006ffc00411b208330f
411b0410008f04100002000f0410001f0410002f04100003006004090001
00b004090001000f0408003f0408004f0408009f04070004040ab2006c1f
b9ffc00403b345453240b80403b32b2e3240b80403b2282932b9ffc00403
b21a1c32bd040302990027001fffc00401b2161b32b9ffc00400b2424232
b9ffc00400b2363832b9ffc00400b32a2d32df410a040000ef0400000204
0004010028001fffc00401b3282e32f0bf0401000103fe000f0101001fff
c003fcb310143240b803fdb30f133240411003f9005003f9000200b003b1
00c003b10002006f03f5007f03f50002ffc003afb22d3132b9ffc003afb3
0a0e3210411003ef002003ef008003ef000300a003ef0001002003ef0040
03ef0002ffc003efb313163240b803e7b20f1132b9ffc003dfb2303432b9
ffc003dfb310183250411403dc000103c903d20023001f03e203d2001e00
1f03c703d2001d001f03c603c8000d001fffc003a4b30f103280411003a3
000103a303790029001f03a5037a0032001f03a8037e001b001fffc003d9
b20e1132b9ffc003d9b2282a32410a03a7037c0032001f03730371003400
1f036c036bb2321f20bb03a40001004003ecb3090b3240b803ecb2101532
bd03e9036b0014001f03e4036bb2171f0fbd036e002f036e0002ffc003b8
b3090d3290410c03b800a003b80002001f03d20001009f03d20001004003
d2b2090b32410a03a903800016001f03cf03810015001f03aa0382b2151f
c0bb03f70001004003f6b3090d3240b803a2b2083340b803a2b30d0e32c0
410903a2000100b003f200c003f20002ffc003f4b3263832004126038c00
30038c0002002003e3003003e30002001003ee003003ee005003ee006f03
ee007f03ee009f03ee0006000003ed003003ed0002002f03de007003db00
9003db009f03de0004ffc00379b20f1032b9ffc00379b2242832b9037d03
7cb2321f10bb037e0001ffc0037eb3090e3240b8037cb2121332b9ffc003
7cb30c0e323fbd03d7004f03d70002004003d8b31718326fbb038e000100
400390b3181b3240b803d4b2090c32bd037b037a0032001fffc0037ab20e
1132bd038003820016001f03810382b2151fb0be03820001000f03830001
004003ffb30c11327f411403540001006f0354008f035400d0035400ef03
540004000f0354002f0354005f0354000300400350b30e0f320fbb035a00
0100400349b20e331fbd0348007f03480002ffc00348b2152232b9ffc003
47b2152232b9ffc0040fb21b1e32beffc0040f002d01000032040e0406b2
2f1f51bb034b0001034f034eb2641f40b80351b20e0f32b9ffc0034eb338
3a3230bb034e0001ffc0034eb21f2332b9ffc0034eb2131932b9ffc00346
b2091132b9ffc00343b30a11320fbb03440001ffc0032bb2080e32b9ffc0
032bb2161b32b9ffc0032ab31417321f4110033a0001000f033300010000
03370020033700300337008003330004ffc00332b3101232504164033200
01004003320060033200a0033200b0033200040010033200300332005003
3200e003320004000f0336007f033600ff033600030070033600f0033600
02000f0331003f0331008f033100bf033100e003310005000f0331006003
310002008f03300001006003300090033000020050032f00010010032f00
40032f0060032f0080032f00a0032f00c0032f00f0032f000700cf032d00
ff032d00020030032d0080032d00b0032d00df032d0004006f032c007f03
2c00020012032000fd0800001f007f0299403a017f007f017f027f037f04
7f057f107f11084035252c32406a252c32402e252c324028252c32376009
7009800903300940095009031009200902b8ffc0b2073a33b8ffc0401206
3a33da4dea4dfa4d0312379006900702cf410c011100df011100ef011100
0300cf011000df011000ef0110408703cf3edf3eef3e03cf4ddf4def4d03
cfdedfdeefde03cf2ddf2def2d03404d1b3a32375f016f017f018f01041f
012f013f014f01045f036f037f038f03041f032f033f034f0304600b700b
800b03300b400b500b03100b200b02900ba00bb00bc00bd00b05b006c006
d006e006f0060550066006700680069006a006061f072f073f07400604f0
414302db000100a002db00b002db0002008002db009002db0002001002db
000100c002db00d002db0002009002db0001006002db007002db00020040
02db005002db0002002302db003002db000202db002300a002da00010080
02da009002da0002004002da0001002302da003002da000202da00230000
02d90001007002d9009002d9000202d9401c223024402402102420240200
2401f02401d024e02402b024c02402c0413a02d8000100a002d800b002d8
0002008002d8009002d80002002302d8003002d8000202d8002300c002d7
000100a002d700b002d70002008002d7009002d7000200a002d700b002d7
0002008002d7009002d70002006002d7007002d70002004002d7005002d7
0002002302d7003002d7000202d7b223370f4117029b0001005f029b009f
029b00df029b0003002f029b003f029b006f029b0003001f029b0001029b
029b0040029ab3272c3280b8029ab2263340b8029ab2223340b8029ab21e
3340b8029ab21c3340b8029ab3191a325f410f029a009f029a00df029a00
03000f029a001f029a003f029a0003ffc00299b2443340b80299b23d3340
b80299b23a33df413702990001005f029900af02990002004f0299009f02
990002002f0299003f0299000200af02990001000f0299003f0299000200
b0029900e0029900020070029900a002990002004f0299005f0299000200
1f0299002f0299003f02990003029a029a02990299000f027a002f027a40
0b0200161600000012110812b802bab269121fb802b4b228101fb802b3b2
28101fb802b2b228101f411302030023000d01ee0023000d01ae0023000d
019f0023000d01940023000d01570023000d010f400b230df9230dc5230d
a7230d410a024a0024000d01f00024000d01e90024000d016a400e240de8
240dc6240da3240da2240dbb01e30022000d0121401a220de5220ddd220d
b7220daa220d93220d5c220d51220d4c220d410a02280020000d021d0020
000d015e0020000d011c4017200dfc200de1200dcb200dc8200da1200d59
200d3a200d410a01f20034000d019c0034000d01970034000d0135b7340d
1f340d1d340dba0202000f015bb20f0009bb0202015b000d030ab22a3e1f
b80309b22a3e1fb80221b24d251fb8021cb24d411fb8021bb24d521fb802
1ab24d721fb80213b24d931f4109020f01b10401001f020e01b10801001f
020cb22a811fb8020bb22a811fb80208b22a5e1fb80205b22a391fb801fe
b22a231fb801fbb2661d1fb801fab2661e1fb801f6b266341fb801f5b266
341fbc01f300660201001f01f1b2669e1f410901ea00280801001f01e700
2602ab001f01b8b24d3f1fb801b7b24d931f410901b4003e0125001f01b2
00400401001f01acb22a721fb801a8b22a281fb801a7b22a241fb801a6b2
2a241fb801a3b22a1f1fb801a1b2662e1fb8019eb266931fb8019db266e4
1fb8019ab2286c1f4109019900280401001f019800260401001f0173b24d
1b1fb80171b24d241fb80170b24d2f1fb8016fb24d351fb8016bb23ecd1f
b80169b23ee41f4109016701b1019a001f0166002a02ab001f0161b2662a
1fb8015fb2669e1f4109015d0028019a001f015c00350401001f0147b24d
391fb80146b23ecd1f410d0145003e0125001f014401430101001f014201
b102ab001f0140b22a301fb8013eb22a261fb8013db2661d1fb8013cb266
2b1fb80138b228811fb80137b2289e1fbc01360028019a001f0129b24d72
1fbc0124002a0201001f0123b22aab1fb8011fb266291fb8011eb266451f
b8011bb228811f41090113003e0125001f0112003e0401001f0111b22a29
1fb80110b22a201fbe010b0066019a001f010a0026019ab61ffd4d721ffb
3eb80156b21ffa40b80801b21ff728b80801b61fec4d621feb4db80401b2
1fea40b802abb61fdf4d721fde3eb802ab400b1fdc2ae41fdb66221fca2a
b80401401b1fc92a2e1fc326791fb828bb1fb34d1e1fb166291fb066621f
af66b80401b21fae26b802abb21fa828b80201400b1fa0664c1f982a2b1f
9726b8019ab61f9266291f8740b802ab401b1f852a791f8226811f754d93
1f744d891f732a1d1f70285e1f6a28b8040140171f692a521f682a201f67
66291f6566671f612a931f6035b80801b61f5e2acd1f5335b80801b21f4b
66b80156b21f493eb80801b61f4866521f4626b80201b21f3f66b8015640
0b1f3b66341f322a931f2e35bb0401001f002d0143b3cd1f5537bc022f00
07018000070172402e07bd077e076207540742072f072707250721071e07
1408120810080e080c080a0808080608040802080008000214b8ffe0402b
000001001406100000010006040000010004100000010010020000010002
00000001000002010802004a00b013034b024b5342b0372b4bb807ff52b0
382b4bb008505b58b101018e59014bb0c063004b6220b0f65323b8010a51
5ab005234201b0124b004b544218b0382bb00288b801005458b801ffb101
018e851bb0124358b90001012c858d1bb900010146858d59590016763f18
3f123e113946443e113946443e113946443e113946443e11394660443e11
3946604445442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b
2b182b1db0964b5358b0aa1d59b0324b5358b0ff1d594bb02953205c58b9
026c026a4544b9026b026a45445958b90168026c455258b9026c01684459
594bb03b53205c58b9003e026b4544b9004d026b45445958b9025c003e45
5258b9003e025c4459594bb03b53205c58b901b1003e4544b13e3e454459
58b9024f01b1455258b901b1024f4459594bb05a53205c58b90143003e45
44b13e3e45445958b9038b0143455258b90143038b4459594bb09e53205c
58b9002a026c4544b90040026c45445958b9056c002a455258b9002a056c
4459594bb01853205c58b126264544b1662645445958b13226455258b126
324459594bb05153205c58b126264544b1282645445958b1ad26455258b1
26ad4459594bb8010153205c58b126264544b1352645445958b902280026
455258b9002602284459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b01b33d766e58456523456023456560234560b08b7668
18b080622020b16e764565234520b003266062636820b003266165b07623
6544b06e234420b13d584565234520b003266062636820b003266165b058
236544b03d2344b10058455458b158406544b23d403d4523614459b34e81
3871456523456023456560234560b089766818b080622020b13881456523
4520b003266062636820b003266165b081236544b038234420b14e714565
234520b003266062636820b003266165b071236544b04e2344b100714554
58b171406544b24e404e45236144594b5242014b5058b108004259435c58
b108004259b3020b0a124358601b2159421610703eb0124358b93b21187e
1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d411bba04
000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a80400
000b2b59b0102342b0112342007418456944456944737373737474757575
752b2b2b73732b2b2b2b2b2b18456944737373742b454473737373737474
744544737474747474747575754544737545447373747445447373737373
747474740075757575757575757575752b2b74747474747400732b4358b1
4d4d451869441bb8ffc0b34d1b3a322b5973002b2b7575752b2b2b2b2b00
73732b435c58b8ffc0b2071633b8ffc0400b061633d54de54df54d03c041
0c011100d0011100e00111000300c0011000d0011000e00110401e03c03e
d03ee03e03c04dd04de04d03c0ded0dee0de03c02dd02de02d03372b7474
7474747473002b2b590173737473747374737473747374752b737573002b
2b2b01732b2b2b2b752b2b2b732b2b2b002b2b742b732b7373742b73732b
2b2b2b2b2b732b732b2b2b742b2b2b73737373732b73732b2b2b73002b2b
2b2b7374732b732b2b2b2b752b2b2b2b2b2b2b2b752b2b2b2b2b732b2b2b
2b7374752b2b7373732b2b2b752b2b732b2b2b2b2b2b2b2b2b2b73747573
742b7374752b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b7374752b2b2b
2b00000000>
[10731 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 1080 36 <00020010000005b00568002100240130409322100b123f66107610772387
108623aa0db71007960db30d020124230200222323210a0e0b1d0a172118
1d170b09010902081d091611151d1601240a00221673230f102023002110
2102212302212d1110141111102302232102280e0f140e0e0f02760e010e
0a7a11012111100f04162321110e02040117230f2224280000010101e410
40100f031716160a0a09080f160116ba01820023012e4023200a19302670
268026a026d026e0260625102620264026502680269026b026078f6d182b
4e71105df4191a4dfded5d00183f3c103c103c3f3c1a10fd5d3cfd3c1139
1112173901111217395d12395d39870e2e2b087d10c4870e2e182b087d10
5dc42b113939113939180010ed0110c00010ed0110c05d0010ed0110c000
10ed0110c007103c3c073c3c3130005d015d012b01210706151417161715
2135363637013301161716171521353332373635342726272703030354fe
21391c2e1b6afe3d495e4501e51301e9462d223efd701b4f201606021c6a
cad0018284422b391b100825250b639b043afba89e291f05252516101e12
130942f301d3fe2d>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 2934 54 <0001006affe00421056b0039012d403918305729772103060e01090f072b
0630180f172b2d0f2b1029112f22202b242c362a362b67298929892aa934
b82aba3413391d005a021d0101b801494015005a0f361f360236a9311d1d
1e5a201d1f201f011fb8017840461e5a001a101a021aa915292b0f08260f
0b0f0f1c0b1c0f04760f76299b0fa50bb50bc40f062b290f0b0423053531
03233515094f015f016f017f018f01050157002610260226b80110400e12
1a3b400b0d343b0f081f080208b80110b41f312e193ab80139b158182b4e
10f44de4ed5d4e102bf64ded5de45d003fed3fed1117395d710111123939
390010ec5df4ed5d0110edf4ed0010ec5df4ed0110edf4edb10602435458
4020030b030f022529262b6a0b690f7a0b790f8629852b950fac0bbb0bca
0bca0f0d005d71593130005d71015d011323262623220615141716171617
161716151404232226272623220607231133161633323635342626272e02
35343633321716163332363703c20b291de3846677151d402faaee5352fe
f7cc407256301f1a3a1225252cfb917085336884b9a257eeb5423e2f871b
1a1e0d056bfe3caacf6d472d232f2e215475686886aaf51a241428290200
d8e37a51305a51415b809e5fa2e4100c41203d00>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 1910 42 <00010053ffe00624056c0033016c40160a10052403250e29781f881f8424
84258d29882a0a23b8ff80b3090a340cb8ff80b3090a3406b8ff80b3090a
342ab8ff804043090a346807680b770b7724b903be04b806b724b726b72a
0a44234629402a8729862a059926972aa706a307a80bc525cb29074a0e18
401b103f7018011ec81d185c2217b8ffc040141b103f7f170111c81d1722
23331d005a021d0101b801144022005a30a92b1e1f01101f0d1718182205
352b030d3522090011101102113e011e1a35b8ffc040090c103435122819
3435bc01530021006e01e000182b2b4ef44d4358b60f091f0902094de95d
1bb1094ded594e102bf63c4ded5d003fed3fed12392f3c12393901123939
0010ecf4ed0110edf4ed2b015d2b2b015d2b3130004b5379b14508437940
32202a060f0b26262725272427030607250c230925000e21104201201f0f
10062a0925000a270d25000f200d420008290525012b2b2b012b103c103c
2b2b2b2a2b8181005d01715d2b2b2b2b0071011123262423220602151412
163332363711342626232335211506060706151106042322262627263510
0021321716163332363705852543fef49f98ca545ccd8d31673616453123
02934b3b100982fee797c1ffc3374601ae014665512cc5121c3014056bfe
22c4ccabfecea1c3feda8a1514011a502f262525051f24134afee63a3b69
ab6b8aab013201a610084b293900>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 108 16 <00010032016f0279023e0003001a400c02db00001a05011904ad8d182b4e
10e410e6002f4ded3130012135210279fdb90247016fcf00>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 3404 55 <0001004a0000050c054c002000acb90022ffc0b3181a3422b8ffc0403b10
1234202240225022c02204302240220201dd0707fc021d0118201d102222
09201d0f22231fdd1a1afc1e1d1f071a28002002100f080070010101b801
2a4022080f091f0902093e19101801201850189018031820101f01201f50
1f7f1f901f041fba012a001802aeb3216e58182b10f6f45d713c105d713c
fd5d3cf45d3c003f3c3f3cfd3c0110edec0010fd2b2b0110edec0010fd31
3001715d2b2b011123262627262323111416163333152135333237363736
351123220706072311050c24204e44265f6517433a2dfd3a2d3b241a0f0b
62893e571726054cfe917f6f2112fbea6834272525150e22186604163a51
96016f00>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 632 24 <00010045ffe403b3054c00220150402e0e0601090a190a2800280304140a
151b151c0338064906b705030b05011a1b0a1c041d101b0a1c1d04011a04
0303b8015c4010002214000022120f2201002210220222b80309b4120004
0104b801efb6122003bf030203b80122b30100041ab8019a400a0f131f13
0213dc0c0d02b802c8b301d10800bb02060022001d01f5401a40085008a0
0803081a2410d18f22012240131534221923f5f1182b4e10f42b724de410
f671ed10e410f4e4003fed5ded3f3cfd5d435c58401403401c113f03401b
103f0340170e3f0340160d3f2b2b2b2b59fe71435c58b90004ffc0b31c11
3f04b8ffc0b31b103f04b8ffc0b3170e3f04b8ffc0b3160d3f04b8ffc0b2
140c3f2b2b2b2b2b59ed5d71435c58401e22401c113f22401b103f224017
0e3f2240160d3f2240140c3f2240120b3f2b2b2b2b2b2b5987052e2b7d10
c400111217390111121739313000715d01725d7101210321070417161514
060423222726353436333216171617163332363534242122070138027b65
fdea330159ba998efefe9aa6593e412b2750613d2c1f275273fea0fef41b
36054cfefe870d9f83c37def813e2c382b4220442a100c7854b0dc01>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 162 19 <0002004affe403b505680016002b014a4019091b061f062509291707181b
1520152518290907080177081db8010ab2120527b8010ab3060d1217b803
0a4025004024263400402b2e34004033363400403b3d3440005000a00003
001a2d120f221f220222b8030a400e8f0d010d401315340d192cf5f1182b
4e10f62b724ded5d43584017224024273422402b2e34224033363422403b
3d346f2201712b2b2b2b594e10f6712b2b2b2b4ded4358b90017ffc0b324
273417b8ffc0b32b2e3417b8ffc0b333363417b8ffc0b53b3d3460170171
2b2b2b2b59003fed3fed313043794062012a20211f2102060f0e100e0206
2423252302060b0c0a0c090c080c040615161416020619181a181b180306
02010301040103062a2b292b02061e1122620026072262001c1317620128
05176201210e1d6201230c27620018161d62012b012762002b2b2b2b012b
2b2b2b2a2a2a2a2a2a2a2a81007101710114070e02232226272627263534
373636333216171605102726272623220706061110171616333237363703
b53922739256629e3d2c212b3e33d07476cd3043fecc040a2619382b1925
1a140f382e32192a0602a6cbb06c8a51645d447199a3ddb999a3a188bbdc
01643b8b31201823b1fdeffee062473020387500>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 1508 38 <00010051ffe10557056b0024011db90016ff80b3090a341cb8ff80b3090a
3406b8ff80b3090a340db8ff804059090a340c1a091b36134d1a86168b1a
8f1b891c086b116b12791179128911a706a80da517c717cb1b0a06160026
4316411c80168517861b841cb704bb1e0a2f26681f7706760d761b8613ba
0f07370e1112241d005a021d0101b80114401d005a21a911120e056a1d03
0e6a1509015f2f1101111a7026012612256eb9013200182b4e1043584009
0f0a1f0a020a4d1919f44de95d1bb30a4d1919f44ded594e105df65d4de4
003fed3fed113939ecf4ed0110edf4ed0010c931304b5379b13208437940
24161c060d0c2617250809070902061b260d160a2500061c0a25000b180e
2500091a0525012b2b012b2b2b2a2b2b8181015d71005d71012b2b2b2b01
112326262322060706151412163332363715060623222402353412243332
1716333236370557272cf0987fd4313f5cc49c80d57672f7a5d9feafb7cb
0159c28f9f5c19202f07056bfe2ab8c4927697b9b6fed599708975776bae
0146b8c2015cc03e242f3300>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 8226 85 <0001004b0000036e03c300290127400a0b260b390b140c103f0bb8ffc0b3
2224340bb8ffe7b31b1f342bb8ffc0b33134342bb8ff80b21f352bb8ffc0
b31d1e342bb8ffc0b30f10342bb8ffc04027141634102b01960b902b020b
190d11340f1d001e00291f1d101e10290601151617170022a21f1eb801ee
b42217c61f1db801eeb42323241f29b801ee401d230a320f401e3c3f0f40
1c373f0f67050304070029061e1d0a0f5d000aba015f0004015fb79007d0
07e0070307b801ba400b00290f171f1702172a2322b8ffc0b24b3522b8ff
c0b330343422b8ffc0b31b203422b8ffc04014121634c022017022010022
10220222da2a4e55182b10f65d5d712b2b2b2b3cfd5df4f45deded10e400
3f3c3f3c3f3c3ced2b2bed2b2b2b070e103c3c3c015d3130002b015d712b
2b2b2b2b2b2b002b2b011536363332161514062322262726232207060706
15151714171616171521353636351134272626273501c95d8c413843412e
354e070a0d1d1a29152001070c2f38fe073d2b080a263003a7d4915f453f
434a44040616223f6175d73839101b1903242405397a020550161c1a0525
>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 4834 69 <0002002bffe4041b054c001700270151400f124608001710170201181911
241f17b801ee401b23268403071e260b0b0e720f0f100b17000010220122
40071a1229b8ffc0b24b3529b8ffc040383b3d345029d029023029402950
297029a029b029c02907290e0e000f191f1902192a111240100130104010
5010c010d010051019284e71182b10f65d71435c58b90010ffc0b319213f
10b8ffc0b318203f10b8ffc0b2171f3f2b2b2b593cfd5d3c392f105d722b
2b435c58b90029ffc0b319213f29b8ffc0b318203f29b8ffc0b2171f3f2b
2b2b59f6ed5d003f3c3f3c10e43fed3fed2b030e103c3c015d3130437940
321a25040d052524261b1a1c1a02060926202525042227011d0c191e000d
0e1f0a22270123062627011a0d1e1e0021081e2700002b2b2b012b103c2b
2b2b2b2a2b2b8181435840237d05700970207f249608a705a608b7040882
088509027f047f0a7f1f7f259605972406015d00715d5901113633321616
151406062322262707231134272626273501111417161633323636353427
26232201af768c60aa607acc834c76399b22070a2b330184060a4c3b3349
3136274256054cfdfd7a71d08899fa8330366504a551131c1b0225fda4fe
607f233b493aace0d7503a00>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 6060 76 <0002002a00000223056c000b001c00db40161e8011173f0f110012001c1f
111012101c0617241f12b801eeb4220d241f11b801eeb42318241f1cbb01
ee00230006ffc04011343634af0601064000010c1c0612110a09b8ffc040
1c3436340009100902094003290c0c0f0d1f0d020d2a18174011173f17b8
ffc0b23a3517b8ffc0b320233417b8ffc0b313173417b8ffc0402f2d3034
b017018f17010017101702177b401e501e021f1e601ea01eb01e042f1e3f
1e8f1eb01ec01ee01e061d4ec0182b105d7172f65d5d712b2b2b2b2b3cfd
5d3c10f4ed5d2b003f3c3f3c3fed5d2b2b2b2b015d3130012b0132161514
0623222635343613111416171521353637363511342627350126415a5b40
405a5acc2e43fe073e1e142e42056c5b40405a5a40405bfe3bfd1b633704
242402221763022263370425>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 9478 87 <00010026fff3029604fd00190098400e8f0b8f0c028f0b8f0c020b0c0019
b801b6401901041414031583020106200b300b400b030b7209650e0b0203
b8010e401d050bb60c1a1b010404000f051f0502052a1316157914141340
0c143f13b8ffc040101d22342f13c013d0130313191a4e55182b4e10f45d
2b2b3c4d10f43c10fd5d3c3c103c4e10f64ded10f43c003ffde45d3f3cfd
3c3c103c10f43c0110c93130017100710111331523111416163332371706
23222627263511233536363701b8dede0f2610413a1e51b6597b110a7a7e
b14204fdfeaa63fdbf512f1d6316c0633d229601f92359c47900>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 4074 68 <0002005cfff303de03c30031003c024a4015061010390420103932403c44
348b3593079b35033eb8ffc040614b35b639017e07a62dac3cb72dc62dd8
21d72dd835e62d09350745074a134a1749355817660895009b35a501b601
b6080c330701803e99049a2d9c3104003e503e6316603e72179615af01a5
3abf01e03e0a0816503e743b03480802151215023bb8ffc040c41739ef3b
013233080908072b2c282b2c252b2c293c33ab33bb330304333d334d337d
338d339f33ad33bd33ce33dd33ed330b703301333b140821086508750804
02083b084c087a0889089f08a608c808d908090b081b0870080314120803
180d261f2b2b2c2929662f3b48023297005d2f2f021840292b340f181f18
5f186f189f18af18bf1807df18ec18fc18031818400e103418021f07020b
0f2c1f2c2f2c3f2c042c4429430f251f250225ea00002f093f097f09bf09
0420097f0902000910090209b801bb4010403e803e02403e603e023ea815
01151bb8ffc0402850283fff1b011b2b0037103702373205402325346f05
f0050230054005500560050405193d385518b80131852b4e10f45d712b4d
ed71f4712bc15d105d71f45d5d723c10fd5df6e45d003f3f12392b2f5d71
2b103c10f4ed10ed10fdf4e410ed1117395d717212395d71721139390111
12393910c908103c0e3c3c005d2b0172b10602435458b40c181d1802005d
59313043794032383a1c230a1003040f251d2621250b2639260e1e111e00
0c20091e0122233a03371e00101c0d1e010a220d1e0138043b1e00002b2b
2b012b103c2b2b2b2b2b2b2b818181810172715d0072715d01712b00712b
2b2b25062322263534362535342626232207061514171615140623222635
343636333216171615111416163332371706062322262711060706151417
1633320249ab88506ab80135174028412a1a1c26493b3f5572cc6e859b17
0e0a140d1a1b1e326b44505a0a793b2721192d328a97694f6bab8e5e6a37
291d1218151f2b2831454c3348834671422a97fe9540211025184a434b95
0139475136372e231b00>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 10224 92 <00010011fe4603ed03a7002f0163b50f0d1f0d020cb8ffe040ae13153e04
0114014a004a0d481a591a5a1b582e6a1a6a1b682e891bb81bc81b0e2813
28143800381a4600460d67066707670c982fa800a81ad7190d0000010d2f
0d0c2f0e060c071f061519161f151005010501041f05140e131f142a1527
28242b0e2f2f461a19141a1a190c0d0d180d163f0d5e000114000d0e0001
01212f1a190e0d0c000715272f0024190e0d0c0105051a24ea2b901e0f24
ea1e151414060605061a000b6031e031f0310331b8ffc0400d1428343117
171a0f152f150215b8010340170529292027342744270327c9212b0005d0
050205193031b80103b321c155182b2b4ef45d4df4fd5de410fd5d4e4565
44e62b72003f3c3f3c103c103c4d10ed3feded1112173911123901111217
39123987082e2b2b0e7d10c4870e2e182b0e7d10c4001112390111123918
0010ed0110c00010ed0110c05d0010ed0110c00010ed0110c00708103c08
3c3130015d5d2b005d050126262735211506061514171313363534262735
21150606070102070623222635343633321617161716333237363701f2fe
d244412e01f1312832a06d3b313e01392e3a44fef5653145685367473432
3d010108080f181b28362602b59d480e25250222182670fe92011b973b25
2c022525053db1fd4bfefc3c545f433a4c4043260b0b1d2a9600>CNHBAA+TimesNewRoman,Bold AddT42Char 

1 0 3 <> CNHBAA+TimesNewRoman,Bold AddT42Char 
1 5646 72 <0002004fffe4035d03c3001500200135405806124b145d146f1468156518
791407250aa702c602c911d102d103d80dd815f303f80d0a7f1501224013
1534560366036f2277037f228303860eea0de815092a08ff16010809092b
00081008200803085d05201600014616b80128b41b26130705b8011eb30c
0b0916b8ffc0400b32193f1640192234166900b8ffc0b632193f0f000100
b8ffc0b30b0e3400b8ffc040181135001a2f223f225f22ef22042220290f
011f0102013210b8ffc0b332193f10b8ffc0b31e123f10b8ffc0b3263034
10b8ffc0400c0c0e34d01001101921388e182b4e10f45d2b2b2b2b4dfd5d
e44e105df62b2b712b4ded2b2b3c003fed3fedf4fd3c103c10f45de40110
c97131304379401e111e1d251817191702061c121f1e001a14161e011e11
1b1e0117151b1e01002b2b012b2b2a2b81015d2b00715d01710121161716
33323637170606232227263534123332160734262726232207061515035d
fdff095a45613c6238224cb879d06b56fdaa8ed1ee2325152334213b01f5
ba6c534357169b81a081bfea0115e9a2a1781f1233599b23>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 7724 84 <0002004efe4a044a03c3001d002e01694014121246080f1700181f171018
041e001d12241f17b801ee4026231dc61f18c52224260c072c84040b1817
0e0f72101011070f0f111f1f001d101d021d2a1112b8ffc0400e32193f0f
124f1202b01201121a30b8ffc0b24b3530b8ffc0b33b3d3430b8ffc04014
0c0e345030d030027030a03002301f2801284008b8ffc0400a32193f0f08
01d0080108b8ffc040090c0e3408192f3881182b4e10f42b5d712b4ded5d
4e105d722b2b2bf65d712b3c4dfd5d3c1112392f003f3c10e43f3c3fed3f
ed2b2b030e103c3c015d313043794032202b050e26250a26212022200206
2a260625250b282700230d1f1e010e0f2b052827002709242701200e241e
0129072c2700002b2b2b012b103c2b2b2b2b2a2b2b81814358402a700570
0b7025702bb030c0300670067f0a7f26702a7b2e892e980199059c2ea805
af2eb805bf2ec92e0e005d015d59435c58b90030ffc0b319213f30b8ffc0
b318203f30b8ffc0b2171f3f012b2b2b5925060706232227263534363633
321617373311141716171521353236363511113426272623220706111417
1633323602b93d35464cb066517bd778507d2d9d22101a4ffde43e381523
2f18254c2a4239273e245b62401a249d7dae91ff8736376dfb455c172501
25251c2e4701bd0181a16826134367fee8d7573b3200>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 9714 88 <0001003fffe4043103a700220192b90024ffc040a64b355024d02402090c
1b0c2a0c490c04390c9a1ca91cb81c04ef07ee080222400b0d3421400b0d
340f0500131f05101304df0701ff070101241f0523230f241f1323231e24
1f2223230506050a1965090b0a0b0022221414130600062a0f011f010201
2a1e064045473406403d35064043350640393a3406403031340640272834
064022243406402b2d3406401e1f340640101134cf06010f06012006cf06
02000610060206b801bb400a244021413f24403e3524b8ffc0b3393a3424
b8ffc0b330313424b8ffc0b32c2e3424b8ffc0b22a3524b8ffc0b3272834
24b8ffc0b31e1f3424b8ffc04019131534c024011f24b024022f24702402
24141f1501152a0f0eb8ffc0b321413f0eb8ffc0b3373a340eb8ffc0b32f
31340eb8ffc0b22a350eb8ffc040131d2434f00e012f0ec00ed00e030e19
234e81182b4e10f45d712b2b2b2b2b3c4dfd5d3c105d71722b2b2b2b2b2b
2b2b2bf45d5d71722b2b2b2b2b2b2b2b2b2b3cfd5ded3c003f3c103c103c
3f3c3ced3f103c2b2b2b5d71015d3130012b2b00715d015d722b01111416
171521350606232226263511342627352111141616333237363711342627
3503cc283dfe834386534f7b2a273e017d13291b241d2838273e03a7fd24
6b3507247d50496182a201736a340825fd81643a1e131a4f01f46a340825
>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 6626 81 <000100460000043703c3002b0204b90006ffe8b50b390906012db8ffc040
384b35502d0105050506250603d902d603d51a0315063505460203d601df
1b02120f0e0021002b1f0e1021102baf0fbf0f08011b1c14241f0fb802db
40112226241f2123220a241f0e23231c241f20b802da40152327241f2b23
232120200f0f0e0a1966050304071bb8015fb3d0010101b8ffb540561835
017900002b060a1f0901092a1515144021413f14403d350f14012014cf14
021440454734144043351440393a341440353634144030313414402b2d34
1440272834144022243414401e1f34144010113410140114b801bb400f1f
2db02d022f2d702d022d403e352db8ffc0b3393a342db8ffc0b33536342d
b8ffc0b33031342db8ffc0b32c2e342db8ffc0b32728342db8ffc0b31e1f
342db8ffc0400f1315342d1c0f001f0002002a272726b8ffc0400e21413f
f026012f26c026d0260326b8ffc0b3373a3426b8ffc0b32f313426b8ffc0
40091d243426192c4e81182b4e10f42b2b2b5d712b3c4d10fd5d3c102b2b
2b2b2b2b2b2b5d71f45d2b2b2b2b2b2b2b2b2b2b5d712b2b3c10fd5d3c00
3f3c10f42b71ed3f3c3ced3f3c103c103c2b2b2b2b2b03100e3c3c015d43
5c58b90020ffc0b3120b3f20b8ffc04009140c3f0f40140c3f20b8ffc040
13160d3f0f40170e3f0f40190f3f0f401b103f0fb8ffc0b221143f2b2b2b
2b2b2b2b2b59313000725d0171015d722b00712b01153636333216171615
111416171521353637363511342626232207111416171521353637363511
3426273501c348844c5b781410273efe27351710122b1a564a2735fe273b
1911273e03a7794e47654b39a2fe946c350724240725196301a0733c217b
fe0b69380724240620166c02106a34082500>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 5296 70 <0001004effe4035f03c3002300f1406df506012409015909a61ec502c523
d801ea01e202070a08012c022a14571f6609671f7609760a721e9713ac13
ac14b802ba14b61eba23c51ecf25110001151300030e1cd000e0000200d0
01e00102040114010201211315181918f0110111eb18260b072148040b0f
0e010e2b01b8ffc0b332193f01b8ffc0401b0911340f0101a001b0010201
1aaf25ef2502250f1c1f1c021c3207b8ffc0b332193f07b8ffc0b6282b34
d0070107b8ffc040090c0e34071924388e182b4e10f42b5d2b2b4ded5d4e
105df65d712b2b4de472003fed3feded71103c11393911395d7139710111
12173910c93130015d00715d017271251706062322023534373633321615
14062322262726272623220706151416171633323603401f42c56fbbe066
7bd891ab45383b4d090617171f3022345449374b3158f1187c79011ac6bf
91af925a39444e643f1919334d9f84f13b2b2e00>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 7274 82 <0002004affe403b703c3000d002101544018c71a01270c011257080e260d
01000717260709080b1d4004b8ffc0400e32193f0440262b340f0401041a
23b8ffc0b24b3523b8ffc0b2473523b8ffc0b23f3523b8ffc0b3393d3423
b8ffc04024282b34c023d02302002340236023c023d0230540239f230223
0f121f12021240d00b010bb8ffc0b332193f0bb8ffc0b3262b340bb8ffc0
b60c0e340b192223b8ff80b427353871182b2b4e10f42b2b2b5d4ded5d4e
105d71722b2b2b2b2bf6712b2b4ded003f3c3ced3f3c3ced313043794044
0121102502251f1e201e020614131513020606261b1c1a1c191c03060f0d
12270021011d1e011609121e0018071d2701110c0e27011e030e1e01130a
171e001c051727002b2b2b2b012b2b2b2b2a2b2a2a2b2b81435840312801
390149014910790c0570067f0c7f10701980068f0c8f108019c802c61f0a
7f07700d700f7f188f07800d800f8f1808015d005d715901715d01321616
151407062322023534121722060615141716163332373637361134262726
01fe7ad26d657ad7d3e4e9cf3349170e0b482e2d1e270d1426251a03c37e
e88ac786a20128c3c9012b474de3ca6b5d474a19223d5f0121aa7f1d1500
>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 3678 56 <00010030ffe005a4054c002e010340a1180f192202180a27222a237b238d
0e8e23af23cd23ff2309000100020003100110021003700170027f167f17
b90ec828d828e8280e0523150e10222021262331215a2207c221f52302a6
0eb60e02330807201d0122221f201d1822222a202e1d00222411201d1722
23181717010100020c6a2409101128207f1f015f1fff1f021f7d30304030
50307030a0300530080f071f0702073e2929502a012a7d2f3d76182b4e10
f45d3c4d10fd5d3c4d105df65d713c4dfd3c003fed3f3c103c103c2b2b2b
2b3130437940222128090f0a2626250e250b25082f0027280d23102f0122
2109270c2f000f220c2f002b2b01103c2b103c2b2b2b2b8181005d717201
5d7172132115232206061511141616333236363511342627262335211523
22060706151114060623222726263511342626073002bc234f3b19377e60
6e9b4d261d2d5201d51c394c110d3ff4d3b060836c1a4056054c25213a74
fd68b6764e63aed802295b4e0f1725252e2e2053fdfdefd4b22f40c8a902
987539220100>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 8646 86 <00010051ffe402d403c3003202aa405c0b3015103f04100d2914101d2904
06141614c625c626d910ea10f910072910252a3810362a870b95239524a9
0ba323b80bb4230b050c050d0829150c470b4b0c06400b400c0212321f00
9b021f010140140c3f01400b123f9f010101b801454013009b122f400b12
342ff32b181f199b1b1f1a1ab8ffc0b60b123f901a011ab8016b401e199b
16f3121205262b07121e26120b120f011f01020140121534015b1221b8ff
e0b40914065521b8ffe0400a09140255002110210221b8ffc0400b0b0f34
002110210221220eb8ffc0403a32193f1f0e010e1a0f34012f344f345f34
6f347f34af340634120820091406550820091402550f081f080208400b0f
340f081f080208221a2928b8ffc0b632193f0f280128b8ffc040090c0e34
2819333871182b4e10f42b712b4de4ed5d2b712b2b435c58b508201b103f
08b8ffc0401732193f084014213f083c15233f083c16253f08400b123f2b
2b2b2b2b2b594e105d71f6722b4ded5d2b712b2b435c58b52120140c3f21
b8ffe040091b103f215e32193f21b8ffc0b314213f21b8ffc0b315233f21
b8ffc0b316253f21b8ffc0b20b123f2b2b2b2b2b2b2b59e42b71435c5840
19014028183f01401c113f0140101b3f01400e173f01400d163f2b2b2b2b
2b59003fed435c58b51e1e1e0f3f1eb8ffe2b30c143f1eb8ffe2b30d163f
1eb8ffe2b20e173f2b2b2b2b593fed435c58b90005ffb540121e0f3f051e
0c143f051e0d163f05140e173f2b2b2b2b5910ecf4ed5d2b0110edf4ed00
10ec2b435c58400f2f400a113f2f40090f3f2f40140c3f2b2b2b59f4ed5d
2b2b0110edf4ed435c58b5252d1c113f0bb8ffd0b31c113f0bb8ffe04009
190f3f252d170e3f0bb8ffd34009170e3f252d160d3f25b8fff1b3171f3f
25b8ffe4b718203f0c1c19213f002b2b2b2b2b2b2b2b2b59007131300071
5d015d5d002b011323262623220615141716041615140606232227262322
07230333161633323635342627262726353436333217163332363702940f
223d8341293a142001265d4e8e5643701e0b21162110222d9d46303d3c68
992d42958d4c471b1112161803c1fec18e6837241b1929c78b564e96502a
0b32015084843b2a3046476a3852636caf250f0f2300>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 2434 48 <0001002900000768054c0036014f40721e100b123f0b1e01091e7b1e0230
3845365038a700c80005251c36017700771c771d8600871c871d991da81d
ea1dfa1d0c7038e038021f121f131f1410241025050f120f130f14002400
250936060a201d0222221a201d1222222e3a1d2622220b201d1122231f3a
1d2522232f201d352223b8ff884043001d1c20010000281c1b141c1c1b00
363600002d1d1e141d1d1e0001361d1c031f011a00363502010226251d1c
121108000037381b101a011a3e0acf0bdf0b020b1a38b8ffc040091c1e34
7038e0380238b8ff804009151634381e1f282f2eb8ffc040111c1e34702e
e02e02c02ed02e022e193738b80154b3213d7618b8012c852b2b4ef45d72
2b3c4dfd3c4e102b722bf65d3c4dfd5d3c191112392f18003f3c3c3c3c3c
3f3c3c3c0111123912173908872e2b057d10c408872e182b057d10c42b18
2b2b2b2b2b2b3130015d5d725d71005d00712b0101211523220706070615
111416163333152135333237363736351101230111141716163315213533
163636373635113426262323352103d0017002282c3c24190f0b1644392c
fd3c2c3c24190f0bfdf818fdf0050d575dfe300e2d4e280b021644392b02
2a01ce037e25150e211865fc826834272525150e22186603edfb2b04ccfc
456417323f2525011f342f0b5b035a6733272500>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 6372 79 <0001002b00000224054c001000c0401c128011173f601201b012010f0500
0600101f0510061010060b241f06b801eeb42201241f05b801eeb4230c24
1f10b801ee40162300100006050a000f011f0102012a0c0b4011173f0bb8
ffc0b23a350bb8ffc0b32d34340bb8ffc0b32023340bb8ffc04023131734
b00b018f0b01000b100b020b7b1f12a012b012032f123f128f12c012e012
0512b8ffc0b331343412b8ffc0b62d2e34114ec0182b102b2b5d71f65d5d
712b2b2b2b2b3cfd5d3c003f3c3f3c2b2b2b015d3130015d712b01111416
1715213536373635113426273501b32e43fe073e1e142e42054cfb766337
0424240222176303c86237042500>CNHBAA+TimesNewRoman,Bold AddT42Char 
1 0 0 <0002011c0000051c0500000300070042b40201c30607b803084013000504
c303000a0704c3010019080605c30203bc014100090125015600182b10f6
3cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd3c31302111211125211121
011c0400fc2003c0fc400500fb002004c000>CNHBAA+TimesNewRoman,Bold AddT42Char 
CNHBAA+TimesNewRoman,Bold /CharStrings get begin
/g36 36 def
/g54 54 def
/g42 42 def
/;################ 16 def
/g55 55 def
/;######################## 24 def
/;################### 19 def
/g38 38 def
/g85 85 def
/g69 69 def
/g76 76 def
/g87 87 def
/g68 68 def
/g92 92 def
/;### 3 def
/g72 72 def
/g84 84 def
/g88 88 def
/g81 81 def
/g70 70 def
/g82 82 def
/g56 56 def
/g86 86 def
/g48 48 def
/g79 79 def
end
CNHBAA+TimesNewRoman,Bold /Encoding get
dup 1 /g36 put
dup 2 /g54 put
dup 3 /g42 put
dup 4 /;################ put
dup 5 /g55 put
dup 6 /;######################## put
dup 7 /;################### put
dup 8 /g38 put
dup 9 /g85 put
dup 10 /g69 put
dup 11 /g76 put
dup 12 /g87 put
dup 13 /g68 put
dup 14 /g92 put
dup 15 /;### put
dup 16 /g72 put
dup 17 /g84 put
dup 18 /g88 put
dup 19 /g81 put
dup 20 /g70 put
dup 21 /g82 put
dup 22 /g56 put
dup 23 /g86 put
dup 24 /g48 put
dup 25 /g79 put
pop
end
%ADOEndSubsetFont
reset_gvm
/OSRJBY+TimesNewRoman,Bold /CNHBAA+TimesNewRoman,Bold findfont ct_VMDictPut
/OSRJBY+TimesNewRoman,Bold*1 
[/.notdef /g36 /g54 /g42 /;################ /g55 /;######################## /;################### 
/g38 /g85 /g69 /g76 /g87 /g68 /g92 /;### 
/g72 /g84 /g88 /g81 /g70 /g82 /g56 /g86 
/g48 /g79 230{/.notdef}rp]
OSRJBY+TimesNewRoman,Bold nf
OSRJBY+TimesNewRoman,Bold*1 [24 0 0 -24 0 0 ]msf
241.8 249.12 mo
(\001\002\003)
[17.276 13.4363 0 ]xsh
291.12 249.12 mo
(\004\003\005\006\007\004\010)
[8.03961 18.724 15.9604 12 12 8.03961 0 ]xsh
154.56 277.92 mo
(\001\011\012\013\014\011\015\011\016\017\002\020\021\022\020\023\024\020\017\003\020\023\020\011\015\014\025\011)
[17.276 10.6837 13.3163 6.72403 8.03964 10.5636 12 10.6837 12 5.99998 13.3163 10.6837 
13.3163 13.4363 10.5637 13.4363 10.5636 10.6837 6 18.724 10.5637 13.4363 10.5637 10.6837 
12 8.03961 12 0 ]xsh
225.72 308.88 mo
(\026\027\020\011)
[17.276 9.35634 10.6837 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: QPOBAA+TT0Bo00 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QPOBAA+TT0Bo00 def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.00390625 0 0 0.00390625 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /g262 put
def
/FontBBox {0 0 226 804} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
2 dict dup begin
/g262 <1C60D8A8C9B86B646C2EADE3FE5E39FD22CD24E76DCE7EE4DB98034AB
020C7ED4C192769D24166AE> |-
/.notdef <1C60D8A8C9C4A637> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/OSRJBZ+TT0Bo00 /QPOBAA+TT0Bo00 findfont ct_VMDictPut
/OSRJBZ+TT0Bo00*1 
[/.notdef /g262 254{/.notdef}rp]
OSRJBZ+TT0Bo00 nf
OSRJBZ+TT0Bo00*1 [24 0 0 -24 0 0 ]msf
273.96 308.88 mo
(\001)sh
273.72 309.12 mo
(\001)sh
273.96 309.12 mo
(\001)sh
273.72 308.88 mo
(\001)sh
OSRJBY+TimesNewRoman,Bold*1 [24 0 0 -24 0 0 ]msf
297.84 308.88 mo
(\027\017\017\030\015\023\022\015\031)
[9.35632 6 6.00003 22.6837 12 13.3163 13.3163 12 0 ]xsh
50.28 345.72 mo
560.16 345.72 li
560.28 474.96 li
523.44 454.44 li
485.52 435.6 li
446.52 418.68 li
406.56 403.44 li
365.64 390 li
323.64 378.36 li
280.56 368.4 li
236.52 360.36 li
191.52 354 li
145.44 349.44 li
98.4 346.68 li
50.28 345.72 li
gsave
grestore
/169310360.0 
<<
/ID /169310360.0 
/PaintType 1
/PatternType 1
/TilingType 2
/BBox [0 0 64 64 ] 
/XStep 64 
/YStep 64 
/PaintProc { begin save
Adobe_AGM_Core/AGMCORE_pattern_paint_type 1 put
gsave
0 0 mo
64 0 li
64 64 li
0 64 li
cp
clp
0 64 mo
64 64 li
64 0 li
0 0 li
cp
false sop
gsave
/0 /CSA get_res setcolorspace
clp
[1 0 0 -1 0 792 ]ct
[64 0 0 64 0 728 ]ct
snap_to_device
<<
/T 1
/W 64 
/H 64 
/M[64 0 0 -64 0 64 ]
/MD true
/BC 8 
/D[0 1 0 1 0 1 ]
/DS 
[
<~J1]\U3$]7K#D>EP:q1$o*=mro@So+\<\5,H7Uo<*jE<[.Ld0ru3>@3>-^73!'"@e==XTP/jDu3'[N@Ao
:$30MeF%/`T1N\%\YRB+0;H]>1:g_fLEqs\C/m<k<ioH)<bk^HjD'<3L=b[rRKWo9:oDQSo?/]]f0Zpn
/Mq76,3qk5dk<QDN8hI!^gM+`4=1jRLQ((C[]A5I_e-pB0m?<^gFJ0%gTi`]c-%bdcegOfm+oQLN6:-;
>.nOW?*DmhCg($G1M<E%D6b+>QCfV?bA]6VXOcu'`6WD0*3C#%8]K4F+<U~>
/LZWDecode filter
<~J2^k43$]7K#D>EP:q1$o*=mro@So+\<\5,H7Uo<*jE<[.Ld0ru3>@3>-^73!'"@e==XTP/jDu3'[N@Ao
:$30MeF%/`T1N\%\YRB+0;H]>1:g_fLEqs\C/m<k<ioH)<bk^HjD'<3L=b[rRKWo9:oDQSo?/]]f0Zpn
/Mq76,3qk5dk<QDN8hI!^gM+`4=1jRLQ((C[]A5I_e-pB0m?<^gFJ0%gTi`]c-%bdcegOfm+oQLN6:-;
>.nOW?*DmhCg($G1M<E%D6b+>QCfV?bA]6VXOcu'`6WD0*3C#%8]K4F+<U~>
/LZWDecode filter
<~J3"fL3$]7K#D>EP:q1$o*=mro@So+\<\5,H7Uo<*jE<[.Ld0ru3>@3>-^73!'"@e==XTP/jDu3'[N@Ao
:$30MeF%/`T1N\%\YRB+0;H]>1:g_fLEqs\C/m<k<ioH)<bk^HjD'<3L=b[rRKWo9:oDQSo?/]]f0Zpn
/Mq76,3qk5dk<QDN8hI!^gM+`4=1jRLQ((C[]A5I_e-pB0m?<^gFJ0%gTi`]c-%bdcegOfm+oQLN6:-;
>.nOW?*DmhCg($G1M<E%D6b+>QCfV?bA]6VXOcu'`6WD0*3C#%8]K4F+<U~>
/LZWDecode filter
]
/O 2
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
grestore
Adobe_AGM_Core/AGMCORE_pattern_paint_type 0 put
restore end }
>>
/Pattern add_res
/169310360.0 /Pattern get_res
[.0937367 0 0 .0937367 48 474.001 ]make_pattern set_pattern
ef
2 vmreclaim
gsave
50.4 345.84 mo
50.4 475.08 li
56.52 475.08 li
98.52 475.92 li
100.68 476.04 li
145.56 478.68 li
146.88 478.8 li
156.48 479.76 li
157.8 479.88 li
168.6 480.96 li
169.92 481.08 li
179.52 482.04 li
180.84 482.16 li
191.64 483.24 li
192.6 483.36 li
200.16 484.44 li
201.12 484.56 li
209.52 485.76 li
210.48 485.88 li
218.04 486.96 li
219 487.08 li
227.4 488.28 li
228.36 488.4 li
236.76 489.6 li
237.48 489.72 li
238.08 489.84 li
238.8 489.96 li
239.4 490.08 li
240.12 490.2 li
240.72 490.32 li
241.44 490.44 li
242.04 490.56 li
242.76 490.68 li
243.36 490.8 li
244.08 490.92 li
244.68 491.04 li
245.4 491.16 li
246 491.28 li
246.72 491.4 li
247.32 491.52 li
248.04 491.64 li
248.64 491.76 li
249.36 491.88 li
249.96 492 li
250.68 492.12 li
251.88 492.36 li
252.6 492.48 li
253.2 492.6 li
253.92 492.72 li
254.52 492.84 li
255.24 492.96 li
255.84 493.08 li
256.56 493.2 li
257.16 493.32 li
257.88 493.44 li
258.48 493.56 li
259.2 493.68 li
259.8 493.8 li
260.52 493.92 li
261.12 494.04 li
261.84 494.16 li
262.44 494.28 li
263.16 494.4 li
263.76 494.52 li
264.48 494.64 li
265.08 494.76 li
265.8 494.88 li
267 495.12 li
267.72 495.24 li
268.32 495.36 li
269.04 495.48 li
269.64 495.6 li
270.36 495.72 li
270.96 495.84 li
271.68 495.96 li
272.28 496.08 li
273 496.2 li
273.6 496.32 li
274.32 496.44 li
274.92 496.56 li
275.64 496.68 li
276.24 496.8 li
276.96 496.92 li
277.56 497.04 li
278.28 497.16 li
278.88 497.28 li
279.6 497.4 li
281.4 497.76 li
282.36 498 li
282.96 498.12 li
283.92 498.36 li
284.52 498.48 li
285.48 498.72 li
286.08 498.84 li
287.04 499.08 li
287.64 499.2 li
288.6 499.44 li
289.2 499.56 li
290.64 499.92 li
291.24 500.04 li
292.2 500.28 li
292.8 500.4 li
293.76 500.64 li
294.36 500.76 li
295.32 501 li
295.92 501.12 li
296.88 501.36 li
297.48 501.48 li
298.92 501.84 li
299.52 501.96 li
300.48 502.2 li
301.08 502.32 li
302.04 502.56 li
302.64 502.68 li
303.6 502.92 li
304.2 503.04 li
305.16 503.28 li
305.76 503.4 li
307.2 503.76 li
307.8 503.88 li
308.76 504.12 li
309.36 504.24 li
310.32 504.48 li
310.92 504.6 li
311.88 504.84 li
312.48 504.96 li
313.44 505.2 li
314.04 505.32 li
315.48 505.68 li
316.08 505.8 li
317.04 506.04 li
317.64 506.16 li
318.6 506.4 li
319.2 506.52 li
320.16 506.76 li
320.76 506.88 li
321.72 507.12 li
322.32 507.24 li
324.72 507.84 li
325.08 507.96 li
326.04 508.2 li
326.4 508.32 li
326.88 508.44 li
327.24 508.56 li
328.2 508.8 li
328.56 508.92 li
329.04 509.04 li
329.4 509.16 li
330.36 509.4 li
330.72 509.52 li
331.2 509.64 li
331.56 509.76 li
332.52 510 li
332.88 510.12 li
333.36 510.24 li
333.72 510.36 li
334.68 510.6 li
335.04 510.72 li
336 510.96 li
336.36 511.08 li
336.84 511.2 li
337.2 511.32 li
338.16 511.56 li
338.52 511.68 li
339 511.8 li
339.36 511.92 li
340.32 512.16 li
340.68 512.28 li
341.16 512.4 li
341.52 512.52 li
342.48 512.76 li
342.84 512.88 li
343.32 513 li
343.68 513.12 li
344.64 513.36 li
345 513.48 li
345.96 513.72 li
346.32 513.84 li
346.8 513.96 li
347.16 514.08 li
348.12 514.32 li
348.48 514.44 li
348.96 514.56 li
349.32 514.68 li
350.28 514.92 li
350.64 515.04 li
351.12 515.16 li
351.48 515.28 li
352.44 515.52 li
352.8 515.64 li
353.28 515.76 li
353.64 515.88 li
354.6 516.12 li
354.96 516.24 li
355.92 516.48 li
356.28 516.6 li
356.76 516.72 li
357.12 516.84 li
358.08 517.08 li
358.44 517.2 li
358.92 517.32 li
359.28 517.44 li
360.24 517.68 li
360.6 517.8 li
361.08 517.92 li
361.44 518.04 li
362.4 518.28 li
362.76 518.4 li
363.24 518.52 li
363.6 518.64 li
364.56 518.88 li
364.92 519 li
365.4 519.12 li
365.76 519.24 li
366.24 519.36 li
372.36 521.4 li
372.84 521.52 li
379.32 523.68 li
379.8 523.8 li
386.28 525.96 li
386.76 526.08 li
392.88 528.12 li
393.36 528.24 li
399.84 530.4 li
400.32 530.52 li
407.52 532.92 li
407.76 533.04 li
408.48 533.28 li
408.72 533.4 li
409.08 533.52 li
409.32 533.64 li
410.04 533.88 li
410.28 534 li
411 534.24 li
411.24 534.36 li
411.6 534.48 li
411.84 534.6 li
412.56 534.84 li
412.8 534.96 li
413.52 535.2 li
413.76 535.32 li
414.12 535.44 li
414.36 535.56 li
415.08 535.8 li
415.32 535.92 li
416.04 536.16 li
416.28 536.28 li
416.64 536.4 li
416.88 536.52 li
417.6 536.76 li
417.84 536.88 li
418.56 537.12 li
418.8 537.24 li
419.16 537.36 li
419.4 537.48 li
420.12 537.72 li
420.36 537.84 li
420.72 537.96 li
420.96 538.08 li
421.68 538.32 li
421.92 538.44 li
422.64 538.68 li
422.88 538.8 li
423.24 538.92 li
423.48 539.04 li
424.2 539.28 li
424.44 539.4 li
425.16 539.64 li
425.4 539.76 li
425.76 539.88 li
426 540 li
426.72 540.24 li
426.96 540.36 li
427.68 540.6 li
427.92 540.72 li
428.28 540.84 li
428.52 540.96 li
429.24 541.2 li
429.48 541.32 li
430.2 541.56 li
430.44 541.68 li
430.8 541.8 li
431.04 541.92 li
431.76 542.16 li
432 542.28 li
432.72 542.52 li
432.96 542.64 li
433.32 542.76 li
433.56 542.88 li
434.28 543.12 li
434.52 543.24 li
434.88 543.36 li
435.12 543.48 li
435.84 543.72 li
436.08 543.84 li
436.8 544.08 li
437.04 544.2 li
437.4 544.32 li
437.64 544.44 li
438.36 544.68 li
438.6 544.8 li
439.32 545.04 li
439.56 545.16 li
439.92 545.28 li
440.16 545.4 li
440.88 545.64 li
441.12 545.76 li
441.84 546 li
442.08 546.12 li
442.44 546.24 li
442.68 546.36 li
443.4 546.6 li
443.64 546.72 li
444.36 546.96 li
444.6 547.08 li
444.96 547.2 li
445.2 547.32 li
445.92 547.56 li
446.16 547.68 li
446.52 547.8 li
446.76 547.92 li
447.12 548.04 li
447.6 548.28 li
447.96 548.4 li
448.44 548.64 li
448.8 548.76 li
449.52 549.12 li
449.88 549.24 li
450.36 549.48 li
450.72 549.6 li
451.2 549.84 li
451.56 549.96 li
452.28 550.32 li
452.64 550.44 li
453.12 550.68 li
453.48 550.8 li
453.96 551.04 li
454.32 551.16 li
455.04 551.52 li
455.4 551.64 li
455.88 551.88 li
456.24 552 li
456.72 552.24 li
457.08 552.36 li
457.8 552.72 li
458.16 552.84 li
458.64 553.08 li
459 553.2 li
459.72 553.56 li
460.08 553.68 li
460.56 553.92 li
460.92 554.04 li
461.4 554.28 li
461.76 554.4 li
462.48 554.76 li
462.84 554.88 li
463.32 555.12 li
463.68 555.24 li
464.16 555.48 li
464.52 555.6 li
465.24 555.96 li
465.6 556.08 li
466.08 556.32 li
466.44 556.44 li
466.92 556.68 li
467.28 556.8 li
468 557.16 li
468.36 557.28 li
468.84 557.52 li
469.2 557.64 li
469.68 557.88 li
470.04 558 li
470.76 558.36 li
471.12 558.48 li
471.6 558.72 li
471.96 558.84 li
472.68 559.2 li
473.04 559.32 li
473.52 559.56 li
473.88 559.68 li
474.36 559.92 li
474.72 560.04 li
475.44 560.4 li
475.8 560.52 li
476.28 560.76 li
476.64 560.88 li
477.12 561.12 li
477.48 561.24 li
478.2 561.6 li
478.56 561.72 li
479.04 561.96 li
479.4 562.08 li
479.88 562.32 li
480.24 562.44 li
480.96 562.8 li
481.32 562.92 li
481.8 563.16 li
482.16 563.28 li
482.64 563.52 li
483 563.64 li
483.72 564 li
484.08 564.12 li
484.56 564.36 li
484.92 564.48 li
485.64 564.84 li
486 564.96 li
504.48 574.2 li
504.84 574.32 li
524.76 584.28 li
524.88 584.4 li
525.84 584.88 li
525.96 585 li
526.92 585.48 li
527.04 585.6 li
528 586.08 li
528.12 586.2 li
529.08 586.68 li
529.2 586.8 li
530.16 587.28 li
530.28 587.4 li
531.24 587.88 li
531.36 588 li
532.32 588.48 li
532.44 588.6 li
533.4 589.08 li
533.52 589.2 li
534.48 589.68 li
534.6 589.8 li
535.56 590.28 li
535.68 590.4 li
536.64 590.88 li
536.76 591 li
537.72 591.48 li
537.84 591.6 li
538.8 592.08 li
538.92 592.2 li
539.88 592.68 li
540 592.8 li
540.96 593.28 li
541.08 593.4 li
542.04 593.88 li
542.16 594 li
543.12 594.48 li
543.24 594.6 li
544.2 595.08 li
544.32 595.2 li
545.28 595.68 li
545.4 595.8 li
546.36 596.28 li
546.48 596.4 li
547.44 596.88 li
547.56 597 li
548.52 597.48 li
548.64 597.6 li
549.6 598.08 li
549.72 598.2 li
550.68 598.68 li
550.8 598.8 li
551.76 599.28 li
551.88 599.4 li
552.84 599.88 li
552.96 600 li
553.92 600.48 li
554.04 600.6 li
555 601.08 li
555.12 601.2 li
556.08 601.68 li
556.2 601.8 li
557.16 602.28 li
557.28 602.4 li
558.24 602.88 li
558.36 603 li
559.32 603.48 li
559.44 603.6 li
560.4 604.08 li
560.52 604.2 li
560.52 474.96 li
560.4 474.84 li
559.44 474.36 li
559.32 474.24 li
558.36 473.76 li
558.24 473.64 li
557.28 473.16 li
557.16 473.04 li
556.2 472.56 li
556.08 472.44 li
555.12 471.96 li
555 471.84 li
554.04 471.36 li
553.92 471.24 li
552.96 470.76 li
552.84 470.64 li
551.88 470.16 li
551.76 470.04 li
550.8 469.56 li
550.68 469.44 li
549.72 468.96 li
549.6 468.84 li
548.64 468.36 li
548.52 468.24 li
547.56 467.76 li
547.44 467.64 li
546.48 467.16 li
546.36 467.04 li
545.4 466.56 li
545.28 466.44 li
544.32 465.96 li
544.2 465.84 li
543.24 465.36 li
543.12 465.24 li
542.16 464.76 li
542.04 464.64 li
541.08 464.16 li
540.96 464.04 li
540 463.56 li
539.88 463.44 li
538.92 462.96 li
538.8 462.84 li
537.84 462.36 li
537.72 462.24 li
536.76 461.76 li
536.64 461.64 li
535.68 461.16 li
535.56 461.04 li
534.6 460.56 li
534.48 460.44 li
533.52 459.96 li
533.4 459.84 li
532.44 459.36 li
532.32 459.24 li
531.36 458.76 li
531.24 458.64 li
530.28 458.16 li
530.16 458.04 li
529.2 457.56 li
529.08 457.44 li
528.12 456.96 li
528 456.84 li
527.04 456.36 li
526.92 456.24 li
525.96 455.76 li
525.84 455.64 li
524.88 455.16 li
524.76 455.04 li
504.84 445.08 li
504.48 444.96 li
486 435.72 li
485.64 435.6 li
484.92 435.24 li
484.56 435.12 li
484.08 434.88 li
483.72 434.76 li
483 434.4 li
482.64 434.28 li
482.16 434.04 li
481.8 433.92 li
481.32 433.68 li
480.96 433.56 li
480.24 433.2 li
479.88 433.08 li
479.4 432.84 li
479.04 432.72 li
478.56 432.48 li
478.2 432.36 li
477.48 432 li
477.12 431.88 li
476.64 431.64 li
476.28 431.52 li
475.8 431.28 li
475.44 431.16 li
474.72 430.8 li
474.36 430.68 li
473.88 430.44 li
473.52 430.32 li
473.04 430.08 li
472.68 429.96 li
471.96 429.6 li
471.6 429.48 li
471.12 429.24 li
470.76 429.12 li
470.04 428.76 li
469.68 428.64 li
469.2 428.4 li
468.84 428.28 li
468.36 428.04 li
468 427.92 li
467.28 427.56 li
466.92 427.44 li
466.44 427.2 li
466.08 427.08 li
465.6 426.84 li
465.24 426.72 li
464.52 426.36 li
464.16 426.24 li
463.68 426 li
463.32 425.88 li
462.84 425.64 li
462.48 425.52 li
461.76 425.16 li
461.4 425.04 li
460.92 424.8 li
460.56 424.68 li
460.08 424.44 li
459.72 424.32 li
459 423.96 li
458.64 423.84 li
458.16 423.6 li
457.8 423.48 li
457.08 423.12 li
456.72 423 li
456.24 422.76 li
455.88 422.64 li
455.4 422.4 li
455.04 422.28 li
454.32 421.92 li
453.96 421.8 li
453.48 421.56 li
453.12 421.44 li
452.64 421.2 li
452.28 421.08 li
451.56 420.72 li
451.2 420.6 li
450.72 420.36 li
450.36 420.24 li
449.88 420 li
449.52 419.88 li
448.8 419.52 li
448.44 419.4 li
447.96 419.16 li
447.6 419.04 li
447.12 418.8 li
446.76 418.68 li
446.52 418.56 li
446.16 418.44 li
445.92 418.32 li
445.2 418.08 li
444.96 417.96 li
444.6 417.84 li
444.36 417.72 li
443.64 417.48 li
443.4 417.36 li
442.68 417.12 li
442.44 417 li
442.08 416.88 li
441.84 416.76 li
441.12 416.52 li
440.88 416.4 li
440.16 416.16 li
439.92 416.04 li
439.56 415.92 li
439.32 415.8 li
438.6 415.56 li
438.36 415.44 li
437.64 415.2 li
437.4 415.08 li
437.04 414.96 li
436.8 414.84 li
436.08 414.6 li
435.84 414.48 li
435.12 414.24 li
434.88 414.12 li
434.52 414 li
434.28 413.88 li
433.56 413.64 li
433.32 413.52 li
432.96 413.4 li
432.72 413.28 li
432 413.04 li
431.76 412.92 li
431.04 412.68 li
430.8 412.56 li
430.44 412.44 li
430.2 412.32 li
429.48 412.08 li
429.24 411.96 li
428.52 411.72 li
428.28 411.6 li
427.92 411.48 li
427.68 411.36 li
426.96 411.12 li
426.72 411 li
426 410.76 li
425.76 410.64 li
425.4 410.52 li
425.16 410.4 li
424.44 410.16 li
424.2 410.04 li
423.48 409.8 li
423.24 409.68 li
422.88 409.56 li
422.64 409.44 li
421.92 409.2 li
421.68 409.08 li
420.96 408.84 li
420.72 408.72 li
420.36 408.6 li
420.12 408.48 li
419.4 408.24 li
419.16 408.12 li
418.8 408 li
418.56 407.88 li
417.84 407.64 li
417.6 407.52 li
416.88 407.28 li
416.64 407.16 li
416.28 407.04 li
416.04 406.92 li
415.32 406.68 li
415.08 406.56 li
414.36 406.32 li
414.12 406.2 li
413.76 406.08 li
413.52 405.96 li
412.8 405.72 li
412.56 405.6 li
411.84 405.36 li
411.6 405.24 li
411.24 405.12 li
411 405 li
410.28 404.76 li
410.04 404.64 li
409.32 404.4 li
409.08 404.28 li
408.72 404.16 li
408.48 404.04 li
407.76 403.8 li
407.52 403.68 li
400.32 401.28 li
399.84 401.16 li
393.36 399 li
392.88 398.88 li
386.76 396.84 li
386.28 396.72 li
379.8 394.56 li
379.32 394.44 li
372.84 392.28 li
372.36 392.16 li
366.24 390.12 li
365.76 390 li
365.4 389.88 li
364.92 389.76 li
364.56 389.64 li
363.6 389.4 li
363.24 389.28 li
362.76 389.16 li
362.4 389.04 li
361.44 388.8 li
361.08 388.68 li
360.6 388.56 li
360.24 388.44 li
359.28 388.2 li
358.92 388.08 li
358.44 387.96 li
358.08 387.84 li
357.12 387.6 li
356.76 387.48 li
356.28 387.36 li
355.92 387.24 li
354.96 387 li
354.6 386.88 li
353.64 386.64 li
353.28 386.52 li
352.8 386.4 li
352.44 386.28 li
351.48 386.04 li
351.12 385.92 li
350.64 385.8 li
350.28 385.68 li
349.32 385.44 li
348.96 385.32 li
348.48 385.2 li
348.12 385.08 li
347.16 384.84 li
346.8 384.72 li
346.32 384.6 li
345.96 384.48 li
345 384.24 li
344.64 384.12 li
343.68 383.88 li
343.32 383.76 li
342.84 383.64 li
342.48 383.52 li
341.52 383.28 li
341.16 383.16 li
340.68 383.04 li
340.32 382.92 li
339.36 382.68 li
339 382.56 li
338.52 382.44 li
338.16 382.32 li
337.2 382.08 li
336.84 381.96 li
336.36 381.84 li
336 381.72 li
335.04 381.48 li
334.68 381.36 li
333.72 381.12 li
333.36 381 li
332.88 380.88 li
332.52 380.76 li
331.56 380.52 li
331.2 380.4 li
330.72 380.28 li
330.36 380.16 li
329.4 379.92 li
329.04 379.8 li
328.56 379.68 li
328.2 379.56 li
327.24 379.32 li
326.88 379.2 li
326.4 379.08 li
326.04 378.96 li
325.08 378.72 li
324.72 378.6 li
322.32 378 li
321.72 377.88 li
320.76 377.64 li
320.16 377.52 li
319.2 377.28 li
318.6 377.16 li
317.64 376.92 li
317.04 376.8 li
316.08 376.56 li
315.48 376.44 li
314.04 376.08 li
313.44 375.96 li
312.48 375.72 li
311.88 375.6 li
310.92 375.36 li
310.32 375.24 li
309.36 375 li
308.76 374.88 li
307.8 374.64 li
307.2 374.52 li
305.76 374.16 li
305.16 374.04 li
304.2 373.8 li
303.6 373.68 li
302.64 373.44 li
302.04 373.32 li
301.08 373.08 li
300.48 372.96 li
299.52 372.72 li
298.92 372.6 li
297.48 372.24 li
296.88 372.12 li
295.92 371.88 li
295.32 371.76 li
294.36 371.52 li
293.76 371.4 li
292.8 371.16 li
292.2 371.04 li
291.24 370.8 li
290.64 370.68 li
289.2 370.32 li
288.6 370.2 li
287.64 369.96 li
287.04 369.84 li
286.08 369.6 li
285.48 369.48 li
284.52 369.24 li
283.92 369.12 li
282.96 368.88 li
282.36 368.76 li
281.4 368.52 li
279.6 368.16 li
278.88 368.04 li
278.28 367.92 li
277.56 367.8 li
276.96 367.68 li
276.24 367.56 li
275.64 367.44 li
274.92 367.32 li
274.32 367.2 li
273.6 367.08 li
273 366.96 li
272.28 366.84 li
271.68 366.72 li
270.96 366.6 li
270.36 366.48 li
269.64 366.36 li
269.04 366.24 li
268.32 366.12 li
267.72 366 li
267 365.88 li
265.8 365.64 li
265.08 365.52 li
264.48 365.4 li
263.76 365.28 li
263.16 365.16 li
262.44 365.04 li
261.84 364.92 li
261.12 364.8 li
260.52 364.68 li
259.8 364.56 li
259.2 364.44 li
258.48 364.32 li
257.88 364.2 li
257.16 364.08 li
256.56 363.96 li
255.84 363.84 li
255.24 363.72 li
254.52 363.6 li
253.92 363.48 li
253.2 363.36 li
252.6 363.24 li
251.88 363.12 li
250.68 362.88 li
249.96 362.76 li
249.36 362.64 li
248.64 362.52 li
248.04 362.4 li
247.32 362.28 li
246.72 362.16 li
246 362.04 li
245.4 361.92 li
244.68 361.8 li
244.08 361.68 li
243.36 361.56 li
242.76 361.44 li
242.04 361.32 li
241.44 361.2 li
240.72 361.08 li
240.12 360.96 li
239.4 360.84 li
238.8 360.72 li
238.08 360.6 li
237.48 360.48 li
236.76 360.36 li
228.36 359.16 li
227.4 359.04 li
219 357.84 li
218.04 357.72 li
210.48 356.64 li
209.52 356.52 li
201.12 355.32 li
200.16 355.2 li
192.6 354.12 li
191.64 354 li
180.84 352.92 li
179.52 352.8 li
169.92 351.84 li
168.6 351.72 li
157.8 350.64 li
156.48 350.52 li
146.88 349.56 li
145.56 349.44 li
100.68 346.8 li
98.52 346.68 li
56.52 345.84 li
cp
eclp
560.64 345.6 mo
560.64 604.32 li
50.28 604.32 li
50.28 345.6 li
cp
false sop
gsave
/2 /CSD get_res idxcs
clp
[1 0 0 -1 0 792 ]ct
[0 -258.72 -510.36 0 560.64 446.4 ]ct
snap_to_device
<<
/T 1
/W 2156 
/H 1 
/M[2156 0 0 -1 0 1 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
Jc^N*Jc_>An,rOjrri*#n-8[nq$?Hrp^6Kuq$d'.n.,:*rt"o:n.G.&n.Y=+p_E96q%riDq&/rFp_rrI
n/Up<n/hBIn0%3Dq',VYn0@]Rq'GMWq'Yqcn1"/_n148bq(2%fpb)@qpb;Lun1seqn20ntq)7t+qD\40
pc8.2pcJ".n3-8)q*4@6pd+pHqa0d>q*b!Hn4)q<n4<%?q+C<Qr(HNQn4i^RpeUBUq,-rcn5K*]oi:rj
n5f$[n6#Khpfd/kq-<`$n6Z$"rEo&%q-j).n726(q.9&-g1Q"MJnKdMJ,~>

%%EndBinary
grestore
np
grestore
gsave
50.28 475.08 mo
50.28 755.88 li
560.28 755.88 li
560.28 604.2 li
560.16 604.08 li
559.44 603.72 li
559.32 603.6 li
558.36 603.12 li
558.24 603 li
557.28 602.52 li
557.16 602.4 li
556.2 601.92 li
556.08 601.8 li
555.12 601.32 li
555 601.2 li
554.04 600.72 li
553.92 600.6 li
552.96 600.12 li
552.84 600 li
551.88 599.52 li
551.76 599.4 li
551.04 599.04 li
550.92 598.92 li
549.96 598.44 li
549.84 598.32 li
548.88 597.84 li
548.76 597.72 li
547.8 597.24 li
547.68 597.12 li
546.72 596.64 li
546.6 596.52 li
545.64 596.04 li
545.52 595.92 li
544.56 595.44 li
544.44 595.32 li
543.48 594.84 li
543.36 594.72 li
542.4 594.24 li
542.28 594.12 li
541.56 593.76 li
541.44 593.64 li
540.48 593.16 li
540.36 593.04 li
539.4 592.56 li
539.28 592.44 li
538.32 591.96 li
538.2 591.84 li
537.24 591.36 li
537.12 591.24 li
536.16 590.76 li
536.04 590.64 li
535.08 590.16 li
534.96 590.04 li
534 589.56 li
533.88 589.44 li
532.92 588.96 li
532.8 588.84 li
532.08 588.48 li
531.96 588.36 li
531 587.88 li
530.88 587.76 li
529.92 587.28 li
529.8 587.16 li
528.84 586.68 li
528.72 586.56 li
527.76 586.08 li
527.64 585.96 li
526.68 585.48 li
526.56 585.36 li
525.6 584.88 li
525.48 584.76 li
524.52 584.28 li
524.4 584.16 li
504.72 574.32 li
504.36 574.2 li
485.88 564.96 li
485.52 564.84 li
484.8 564.48 li
484.44 564.36 li
483.96 564.12 li
483.6 564 li
483.12 563.76 li
482.76 563.64 li
482.04 563.28 li
481.68 563.16 li
481.2 562.92 li
480.84 562.8 li
480.36 562.56 li
480 562.44 li
479.52 562.2 li
479.16 562.08 li
478.44 561.72 li
478.08 561.6 li
477.6 561.36 li
477.24 561.24 li
476.76 561 li
476.4 560.88 li
475.68 560.52 li
475.32 560.4 li
474.84 560.16 li
474.48 560.04 li
474 559.8 li
473.64 559.68 li
473.16 559.44 li
472.8 559.32 li
472.08 558.96 li
471.72 558.84 li
471.24 558.6 li
470.88 558.48 li
470.4 558.24 li
470.04 558.12 li
469.32 557.76 li
468.96 557.64 li
468.48 557.4 li
468.12 557.28 li
467.64 557.04 li
467.28 556.92 li
466.8 556.68 li
466.44 556.56 li
465.72 556.2 li
465.36 556.08 li
464.88 555.84 li
464.52 555.72 li
464.04 555.48 li
463.68 555.36 li
463.2 555.12 li
462.84 555 li
462.12 554.64 li
461.76 554.52 li
461.28 554.28 li
460.92 554.16 li
460.44 553.92 li
460.08 553.8 li
459.36 553.44 li
459 553.32 li
458.52 553.08 li
458.16 552.96 li
457.68 552.72 li
457.32 552.6 li
456.84 552.36 li
456.48 552.24 li
455.76 551.88 li
455.4 551.76 li
454.92 551.52 li
454.56 551.4 li
454.08 551.16 li
453.72 551.04 li
453 550.68 li
452.64 550.56 li
452.16 550.32 li
451.8 550.2 li
451.32 549.96 li
450.96 549.84 li
450.48 549.6 li
450.12 549.48 li
449.4 549.12 li
449.04 549 li
448.56 548.76 li
448.2 548.64 li
447.72 548.4 li
447.36 548.28 li
446.88 548.04 li
446.52 547.92 li
446.28 547.8 li
445.92 547.68 li
445.68 547.56 li
444.96 547.32 li
444.72 547.2 li
444.36 547.08 li
444.12 546.96 li
443.4 546.72 li
443.16 546.6 li
442.44 546.36 li
442.2 546.24 li
441.84 546.12 li
441.6 546 li
440.88 545.76 li
440.64 545.64 li
439.92 545.4 li
439.68 545.28 li
439.32 545.16 li
439.08 545.04 li
438.36 544.8 li
438.12 544.68 li
437.4 544.44 li
437.16 544.32 li
436.8 544.2 li
436.56 544.08 li
435.84 543.84 li
435.6 543.72 li
434.88 543.48 li
434.64 543.36 li
434.28 543.24 li
434.04 543.12 li
433.32 542.88 li
433.08 542.76 li
432.72 542.64 li
432.48 542.52 li
431.76 542.28 li
431.52 542.16 li
430.8 541.92 li
430.56 541.8 li
430.2 541.68 li
429.96 541.56 li
429.24 541.32 li
429 541.2 li
428.28 540.96 li
428.04 540.84 li
427.68 540.72 li
427.44 540.6 li
426.72 540.36 li
426.48 540.24 li
425.76 540 li
425.52 539.88 li
425.16 539.76 li
424.92 539.64 li
424.2 539.4 li
423.96 539.28 li
423.24 539.04 li
423 538.92 li
422.64 538.8 li
422.4 538.68 li
421.68 538.44 li
421.44 538.32 li
420.72 538.08 li
420.48 537.96 li
420.12 537.84 li
419.88 537.72 li
419.16 537.48 li
418.92 537.36 li
418.56 537.24 li
418.32 537.12 li
417.6 536.88 li
417.36 536.76 li
416.64 536.52 li
416.4 536.4 li
416.04 536.28 li
415.8 536.16 li
415.08 535.92 li
414.84 535.8 li
414.12 535.56 li
413.88 535.44 li
413.52 535.32 li
413.28 535.2 li
412.56 534.96 li
412.32 534.84 li
411.6 534.6 li
411.36 534.48 li
411 534.36 li
410.76 534.24 li
410.04 534 li
409.8 533.88 li
409.08 533.64 li
408.84 533.52 li
408.48 533.4 li
408.24 533.28 li
407.52 533.04 li
407.28 532.92 li
398.64 530.04 li
398.16 529.92 li
390.6 527.4 li
390.12 527.28 li
382.2 524.64 li
381.72 524.52 li
374.16 522 li
373.68 521.88 li
366.12 519.36 li
365.64 519.24 li
365.28 519.12 li
364.8 519 li
364.44 518.88 li
363.48 518.64 li
363.12 518.52 li
362.64 518.4 li
362.28 518.28 li
361.32 518.04 li
360.96 517.92 li
360.48 517.8 li
360.12 517.68 li
359.16 517.44 li
358.8 517.32 li
358.32 517.2 li
357.96 517.08 li
357 516.84 li
356.64 516.72 li
356.16 516.6 li
355.8 516.48 li
354.84 516.24 li
354.48 516.12 li
353.52 515.88 li
353.16 515.76 li
352.68 515.64 li
352.32 515.52 li
351.36 515.28 li
351 515.16 li
350.52 515.04 li
350.16 514.92 li
349.2 514.68 li
348.84 514.56 li
348.36 514.44 li
348 514.32 li
347.04 514.08 li
346.68 513.96 li
346.2 513.84 li
345.84 513.72 li
344.88 513.48 li
344.52 513.36 li
343.56 513.12 li
343.2 513 li
342.72 512.88 li
342.36 512.76 li
341.4 512.52 li
341.04 512.4 li
340.56 512.28 li
340.2 512.16 li
339.24 511.92 li
338.88 511.8 li
338.4 511.68 li
338.04 511.56 li
337.08 511.32 li
336.72 511.2 li
336.24 511.08 li
335.88 510.96 li
334.92 510.72 li
334.56 510.6 li
333.6 510.36 li
333.24 510.24 li
332.76 510.12 li
332.4 510 li
331.44 509.76 li
331.08 509.64 li
330.6 509.52 li
330.24 509.4 li
329.28 509.16 li
328.92 509.04 li
328.44 508.92 li
328.08 508.8 li
327.12 508.56 li
326.76 508.44 li
326.28 508.32 li
325.92 508.2 li
324.96 507.96 li
324.6 507.84 li
322.2 507.24 li
321.6 507.12 li
320.64 506.88 li
320.04 506.76 li
319.08 506.52 li
318.48 506.4 li
317.52 506.16 li
316.92 506.04 li
315.96 505.8 li
315.36 505.68 li
314.4 505.44 li
313.8 505.32 li
312.84 505.08 li
312.24 504.96 li
311.28 504.72 li
310.68 504.6 li
309.72 504.36 li
309.12 504.24 li
308.16 504 li
307.56 503.88 li
306.6 503.64 li
306 503.52 li
305.04 503.28 li
304.44 503.16 li
303.48 502.92 li
302.88 502.8 li
301.44 502.44 li
300.84 502.32 li
299.88 502.08 li
299.28 501.96 li
298.32 501.72 li
297.72 501.6 li
296.76 501.36 li
296.16 501.24 li
295.2 501 li
294.6 500.88 li
293.64 500.64 li
293.04 500.52 li
292.08 500.28 li
291.48 500.16 li
290.52 499.92 li
289.92 499.8 li
288.96 499.56 li
288.36 499.44 li
287.4 499.2 li
286.8 499.08 li
285.84 498.84 li
285.24 498.72 li
284.28 498.48 li
283.68 498.36 li
282.72 498.12 li
282.12 498 li
281.16 497.76 li
279.36 497.4 li
278.64 497.28 li
278.04 497.16 li
277.32 497.04 li
276.72 496.92 li
276 496.8 li
275.4 496.68 li
274.68 496.56 li
274.08 496.44 li
273.36 496.32 li
272.76 496.2 li
272.04 496.08 li
271.44 495.96 li
270.72 495.84 li
270.12 495.72 li
269.4 495.6 li
268.8 495.48 li
268.08 495.36 li
267.48 495.24 li
266.76 495.12 li
265.56 494.88 li
264.84 494.76 li
264.24 494.64 li
263.52 494.52 li
262.92 494.4 li
262.2 494.28 li
261.6 494.16 li
260.88 494.04 li
260.28 493.92 li
259.56 493.8 li
258.96 493.68 li
258.24 493.56 li
257.64 493.44 li
256.92 493.32 li
256.32 493.2 li
255.6 493.08 li
255 492.96 li
254.28 492.84 li
253.68 492.72 li
252.96 492.6 li
252.36 492.48 li
251.64 492.36 li
250.44 492.12 li
249.72 492 li
249.12 491.88 li
248.4 491.76 li
247.8 491.64 li
247.08 491.52 li
246.48 491.4 li
245.76 491.28 li
245.16 491.16 li
244.44 491.04 li
243.84 490.92 li
243.12 490.8 li
242.52 490.68 li
241.8 490.56 li
241.2 490.44 li
240.48 490.32 li
239.88 490.2 li
239.16 490.08 li
238.56 489.96 li
237.84 489.84 li
237.24 489.72 li
236.52 489.6 li
225.6 488.04 li
224.64 487.92 li
214.56 486.48 li
213.6 486.36 li
203.52 484.92 li
202.56 484.8 li
192.48 483.36 li
191.52 483.24 li
180.72 482.16 li
179.4 482.04 li
169.8 481.08 li
168.48 480.96 li
157.68 479.88 li
156.36 479.76 li
146.76 478.8 li
145.44 478.68 li
100.56 476.04 li
98.4 475.92 li
56.4 475.08 li
cp
eclp
560.4 474.84 mo
560.4 756 li
50.16 756 li
50.16 474.84 li
cp
false sop
gsave
/3 /CSD get_res idxcs
clp
[1 0 0 -1 0 792 ]ct
[0 -281.16 -510.24 0 560.4 317.16 ]ct
snap_to_device
<<
/T 1
/W 2343 
/H 1 
/M[2343 0 0 -1 0 1 ]
/BC 8 
/D[0 255 ]
/DS cf /ASCII85Decode fl /RunLengthDecode filter
/O 2
>>
%%BeginBinary: 1
idximg
o)epolNI%fn-8Lioa($nq$Q[#q[<B3k7-G]j:C;_r=S3)k7[b-lP011n.tX4ob[ZHnJV0AlPojDkT0[E
lQ>sGn0.WPq]b\Xn0IiVlR)WZjs]:>r$pn[j=B:Bjt6Qbo.TnmqCqCnoeQ1rmkjkulSec%lT"f%j>l6]
j?)Ebr&s@/s$#a5qEXO9oKr4<n3m(@qF:'Gr^Z3Ds%2KJqFg<OohG*SoM>E]q,$BSs&.uXrD_u\p/^T_
r)iSnp0$T_rEHa9o3@A_JmEt6JmEt6JmHH'J,~>

%%EndBinary
grestore
np
grestore
false sop
1 gry
true set_gvm
%ADOBeginSubsetFont: PFJBAA+TimesNewRoman Initial
ct_T42Dict begin
-0.566 -0.305 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /PFJBAA+TimesNewRoman
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000566376
7420fe30def000000124000007da6670676dc3a61d010000090000000631
676c79660000000000003b340000372868656164de49addd00000f340000
00366868656112ef167c00000f6c00000024686d74780000000000000f90
000001666c6f636100000000000010f800001ab06d617870142b06ad0000
2ba8000000206e616d650000000000002bc8000000217072657039e6c80d
00002bec00000f4567646972000000000000000000000000000100000190
000500080000000000000000000000000000000000000000000000000000
00000000000000000000000000080000000000000000000000000000f000
f0ff0000000000000000000000000001000000000000058e0000054c001f
054c001c0394001b0000ffe10000ffe40000ffe8fe4afffc056b0023fe6a
ffe00313000000ad000000ad0000000000250096009f002400f0013100c2
00c0004a00a6004100500094004700cf00af000e007901cb000400230044
00a80025011f0002004600170105009900d9005c007200e500e00028004b
00de011200240045007000160039ffe90016004b0088ffb900d9000a0043
00ae00ba016c0153002f00430048022c012b0025008fffc000170028ffcd
ffd80025009d00e50124ffb10048009d00e600110027007f00910012006a
00cafffc00000024006200a7017c01e900210060008b0434048aff6b003b
00b500d5014bff6b004d007905d809b5006c009100a3011701c0ffdfffe7
00be04010065007f00820088009900b200c0022e034305a000200026003d
004e00610065007b00d9011301310340ff27ff42ff99004e00a700f2022b
02c603070011002b0049005f008d00a100af00d600e400f5010b0135019d
01ab01ab01d101ee05d80000004b0075007a0080009d00a600a700ac00b9
013101310217021700020017002900550080008f00a500b200b300d0014b
015901c001c103a50530fe3fff14ff15ffe7ffff002a00580099009f00c1
00e400f40130015901ab01ab03220374041e04740532fd81004d0064009c
00d000d100d600de00e500f500f8012a012a01e1027e027fff57ffa8ffe5
00000008001f00380051005a006f0076007700a200c000c200c400f101fb
0209027e02cf04c5057a05f0ff92001200260042004b004f005100530064
008b00ae00b200b800b800d600f50111012001310138014e01520167018f
019601b801d901d902060221027102ea03b003cb03dc04360505ff3a0012
0016001e001f002300570068006c007e0088009200a500a800c500c90115
0126012d013001d601d901f6023b0244024402a302cf02de0385038f04fc
0586fee0feebfefbff8a0007004400470058007500aa00e400ef01160120
0129016a017301e3027e029002b4030e0310032303350341035403590388
039403c803ce047204ab04da0549056105ab0761fe6efed1ff4bff840000
00010006001e0027002c0034003700620066006a006b006c007000700072
007c0081008a008e0091009200a000ab00b800bf00c900d500dd00ec00f4
0100012101300169016a016d017c0185018e018e019901ac01c101c501c9
01e101f601f601f60222022202280236023f024302460267028502850294
02d002d602e8031c0363037f03800380039e03b603d90400040404ff0532
05320548058b05a706cb07280748076208ccfcedfd2afd59fddefe00fe1a
fe5bfe96fec1fee7ff56ff7900010025002d002e007c00870091009900a1
00a500a500aa00af00b600c600cc00d700dd00ec00f20102010501170118
0123012a012c0131013f014701490149014d01510151015501550157015a
015a0161016201680168017f0180018201830184018d0195019501950198
019901a501a901b601b601b701ba01ba01d501df01e601ea01f202000200
0203021702250227022f0239024302430247024f025202520267026f026f
027002720276027e02a702b302b902d603130325032d03610371039903ae
03c203d403f90402042c042f043c04560467048304cf04d104d804fb051f
05450568059e05c2061b06340655066a069806af06e806fc070607500762
077c07d407ff082500ad00c700aa00b5000000000000000000000000002f
06cf01730514047802df009c0018037005870155002500060254036c038e
03d2056601f0032001da018a0369036bffa3034602f8036f015602bf0122
031f053a0366008c00ff01ab02e102f402e70415015402e90128049101b7
026f034302060000000005d30415048305e8000002d7003a027d01c002c5
03830383ffbd003a059e01df059e02d1002004e0021300df01c001870297
000000ce0269028b0058043405fb0069015a01a905780182013e0288012a
03d4049e00e5032302f301f00196007a00cd014a0424025e023901ab00cf
00fd011e00ed017100700195004001bb01dd01b8000101a803a7014c020c
018d01b0020d0137010000cd032101d4030a005900000000012602150150
02f0025503bc06d00335010100d000d2007a01030130007c000000000000
000000fe006e006600940227002b0045004d00d3013200180097004100f4
febcffe9001605d8058b009100a1032c00520030005d02cb003a009200e5
00e500580086003200ba0099008800300298007cff8001640028004d0065
000200b8016a002f010b001100170100007f00040016022200a6005f0000
00f8000a00ca0043004b01ee0077012000f401c00028045f0000008c0445
00c20060007b008b008b0064005d00c2009c009206b505d3004f01170000
0420fe9e00cc00dc005e004600e30032001a003c0091005a00a1042c0041
002000490071009c009cfe4800400040008600cb0102007d003a003e006a
0050044800290096ff6a0097006900e0004c001b00c90069ff970043ffbd
0052ff83ff8b005fffa1ff5c00670053ffa8002a0076ffb2003600870559
0256052b043400de00c901c4004800db018b00b3004800da011601250118
00ea00ea00ae0000003e05bb008a04d70053003fff8cffd5001500280022
00990062004a00e4006d00ee00e5004803c00033fe4e02b1ff4603700079
05df0051ffa7ff1f010a0068ff6c004f00bc00a5070500ab0080001e05a5
0025008b04660230006900290016012f0080005c059f000040425554403f
3e3d3c3b3a393837363534333231302f2e2d2c2b2a292827262524232221
201f1e1d1c1b1a1918171614131211100f0e0d0c0b0a0908070605040302
01002c4523466020b02660b004262348482d2c452346236120b02661b004
262348482d2c45234660b0206120b04660b004262348482d2c4523462361
b0206020b02661b02061b004262348482d2c45234660b0406120b06660b0
04262348482d2c4523462361b0406020b02661b04061b004262348482d2c
0110203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920
b0ed51582320b04d44235920b09051582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0172370b101173e01b0172370b10217453ab1
0200080d2d2c45b01a234445b01923442d2c2045b00325456164b0505158
45441b2121592d2cb00143632362b0002342b00f2b2d2c2045b000436044
2d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb81000
62602b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4182d
2c45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae41b03
8a45186920b01723448a8a8720b0a05158b0112bb0172344b0177ae41b21
b0177ae45959182d2cb0022546608a46b040618c482d2c4b53205c58b002
855958b00185592d2c20b0032545b019234445b01a23444565234520b003
25606a20b009234223688a6a606120b01a8ab000527921b21a1a40b9ffe0
001a45208a54582321b03f1b235961441cb114008a5279b3194020194520
8a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b
2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d
2cb11011432343650b2d2c4b525845441b2121592d2c0120b003252349b0
4060b0206320b000525823b002253823b002256538008a63381b21212121
2159012d2c4bb06451584569b00943608a103a1b212110592d2c01b00525
1023208af500b0016023edec2d2c01b005251023208af500b0016123edec
2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b0016101
10203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d
2c352d2c76b802b023701020b802b04520b0005058b00161593a2f182d2c
21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb200
402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59
b002602d2c0c6423648bb84000626023212d2cb4000100000015b00826b0
0826b00826b008260f10161345683ab001162d2cb4000100000015b00826
b00826b00826b008260f1016134568653ab001162d2c4b53234b515a5820
458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a
58381b2121592d2c4b5458381b2121592d2c014b53234b515ab00225b004
25b006254923451869525a58b00225b00225b00525462345696048592121
212d2cb0134358031b02592d2cb0134358021b03592d2c4b54b012435c5a
58381b2121592d2cb012435c580cb00425b00425060c6423646164b80708
5158b00425b00425012046b01060482046b0106048590a21211b2121592d
2cb012435c580cb00425b00425060c6423646164b807085158b00425b004
25012046b8fff060482046b8fff06048590a21211b2121592d2c4b53234b
515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b2121592d2c4b53
234b515ab012435c5a58381b2121592d2c0c8a034b54b00426024b545a8a
8a0ab012435c5a58381b2121592d2c462346608a8a462320468a608a61b8
ff8062232010238ab9035803588a70456020b0005058b00161b8ffba8b1b
b0468c59b0106068013a2d2cb1020042b123018851b1400188535a58b910
000020885458b202010243604259b12401885158b920000040885458b202
0202436042b12401885458b2022002436042004b014b5258b20208024360
42591bb940000080885458b202040243604259b94000008063b801008854
58b202080243604259b94000010063b80200885458b202100243604259b9
4000020063b80400885458b202400243604259595959592d2cb002435458
4b53234b515a58381b2121591b21212121592d00000000010000000511ec
b1b0afba5f0f3cf50819080000000000a2e31dc200000000c8c23397fb74
fd8c1000080e000000090001000000000000000100000721fe4500571000
fb74fadf10000001000000000000000000000000000000590639011c0639
011c0639011c020000000200000002000000020000000200000002000000
0200000002000000020000000200000002000000020000000200006e0200
006e02000091020000910200009102000091020000910200009102000091
020000910200009102000091020000910200009102000091020000910200
00910200009102000091020000910200009102000091020000910556004a
05c7002305c7002305c7002305c7002305c7002305c7002305c7002305c7
002304e3002904e3002904e3002904e300290473002205c7004805c70048
05c7004805c7004805c7004805c7004805c7004805c7004805c7004805c7
004805c7004805c7004805c7004805c7004805c7004805c70048038d0049
038d0049038d004604000044038d004c02aa004f02aa004f02aa004f0239
003c0239003c0239003c0239003c063900110400000c0400004504000045
0400004502aa000d031d00640239001404000002001100000000003b003b
003b003b003b003b003b003b003b003b003b003b003b003b003b008a008a
00b600b600b600b600b600b600b600b600b600b600b600b600b600b600b6
00b600b600b600b600b600b60173022c022c022c022c0349034903490349
03d403d403d403d404d10595059505950595059505950595059505950595
0595059505950595059505950792079208c10a2a0c1a0d5c0d5c0d5c0eb7
0eb70eb70eb7111c12d0140614061406151e178018ab19fd1b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b941b941b941b941b941b941b941b94
1b941b941b941b941b941b941b941b94000100000d5700f2003c009d0007
00020010002f005600000625ffff00050002000000010012000200020000
0006000f000054696d6573204e657720526f6d616e000000b9005403ecb3
032a1f3f411503e4006003e9009f03e500df03e50004001003e4001003e5
003f03e5007003e400ff03e40005ffc003e1b345453240b803e1b32b2e32
40b803e1b2282932b9ffc003e1b21a1c32bd03e102ac0027001fffc003df
b2161b32b9ffc003deb2424232b9ffc003deb2363832b9ffc003deb32a2d
32df410a03de00ef03de000203de03df0028001fffc003dfb3282e32f041
0d03df0001037e000f0101001f00a003dd00b003dd0002004003dab32426
329fbf03cc000103ca03c90064001fffc003c9b20d1132410a03c703b700
12001f03b603b50064001fffc003b5b30e1132004173038d000100c0038d
00d0038d00e0038d00f0038d0004006f03a7007f03a7008f03a700af03a7
0004000f03a7001f03a7002f03a7004f03a7000403ab03ab00ef03a50001
000f03a5002f03a5006f03a5008f03a50004005403aa0001006b03aa0001
03a8036a0022001f038c03940015001f038b03930015001f03a40393001a
001f03a20394001e001f03a10393001e001f039f0394001e001f039b0394
001a001f039a0393001e001f039903940016001f039803940016001f0397
0393001b001f03960394001b001f03950393001b001f03760375001a001f
03740375001a001f03a00373b21e1f10411e039300200393003003930003
00200394003003940040039400030000039400010383036c001e001f03b1
036c0032001f036d036c0032001fffc0037db2212332b9ffc0037db31719
32a0410a037d00b0037d00c0037d00d0037d0004ffc0037cb2212332b9ff
c0037cb3171932a0412d037c00b0037c00c0037c00d0037c000400300373
004003730002000003730010037300200373000300e0037300f003730002
00b0037300c0037300d003730003008403730090037300a0037300030377
036a0029001f0389036ab2281f40b80367b33940323fbb03660001004003
66b3191d328fbb0366000100400366b3090a3240b80366b3090e3240b803
66b3090f323fbb0365000100400365b3090c3240b80365b31a1d3240b803
65b3090e326b410e0363007b036300020014036300240363003403630044
036300040363b2242f1fba034e006d0800400e1f7f027f037f047f050430
440112bf033200500800001f0012032d003c080040291f5f3c0137600970
0980090310092009300940095009056f037f038f03031f032f033f034f03
5f0305b8ffc0b2073a33b8ffc04047063a33900ba00bb00bc00bd00b05b0
06c006d006e006f0060520063006400650066006700680069006a0060990
06900702600b700b800b03100b200b300b400b500b051f0701a041850362
000100000362001003620070036200900362000400f0035f00010020035e
0020035f0030035f0040035e00040000035e0000035f0010035f00d0035e
00e0035f00050010030f0020030f0030030f00d0030f00e0030f00050000
030f0010030f0050030f0060030f0070030f00d0030f00060000030f0010
030f0020030f0030030f00e0030f00f0030f0006030f00270000030e0030
030e000200e0030e00f0030e0002030e004a00e0030d00f0030d0002030d
002700d002fc0001001002fc002002fc005002fc000300d002fc00e002fc
0002000002fc001002fc002002fc003002fc005002fc006002fc000600e0
02fc00f002fc0002002002fc003002fc004002fc000302fc406127c02901
b02901a02901902901403c3f413240223f41321212125f235f255f285fa5
046f236f256f286fa5044f234f254f284fa5043f233f253f283fa5042f23
2f252f282fa5041f231f251f281fa5048f4caf4cbf4ccf4c045f4c6f4c7f
4c0337b8ffc0b3b22b3032b8ffc0b3b2222532b8ffc0b5b2191a32370f41
3b02af0001005f02af009f02af00df02af0003001f02af002f02af003f02
af006f02af000402af02af001f02ad002f02ad003f02ad004f02ad005f02
ad000500df02ad0001000f02ad001f02ad003f02ad005f02ad009f02ad00
05005f02ad00df02ad0002000f02ad001f02ad003f02ad0003004002acb2
3a334f414a02ac005f02ac009f02ac0003002f02ac003f02ac0002000f02
ac003f02ac00af02ac000300b002ac00e002ac0002004f02ac005f02ac00
a002ac0003001f02ac002f02ac003f02ac0003000f035a0001000f035a00
1f035a003f035a005f035a0070035a000500cf035700df03570002000f03
57001f03570070035700af03570004035a035a0357035702ad02ad02ac02
ac032c400d31151f001616000000121108104110020c004a000d01a8004a
000d0198004a000d0189004a000d013f004a000d0124400e4a0df64a0dbe
4a0d864a0d274a0dbe02280041000d01940041000d0121400b410db4410d
4f410d29410d411002170021000d02150021000d02060021000d01eb0021
000d014e0021000d012c4014210df9210df3210df1210d9d210d71210d3d
210d4110021c001f000d0214001f000d020b001f000d0196001f000d014a
001f000d0126400b1f0dc61f0d571f0d371f0d410d019e0141000d004201
41000d001e0141000d001b0141000d01f2b40f440f0009bb01f20044000d
0201b23c291fb80200b23c291fb801ffb23c411fb801feb23c471fb801fd
b23c9e1fb801fab23c931fbc01f9010f0101001f01f6b224e41f411501f4
01490401001f01f301490401001f01f1014900ab001f01f001490067001f
01a6003c0125001f01a4b23c811f411501a3010f019a001f01a200220801
001f01a100500401001f019f0149019a001f019d01490067001f019cb22c
621fb8019bb22c791fbc019a002c0101001f0197b22ce41fb80193b22c89
1fb80192b22c6c1fb8018fb2259e1fb8016ab23c2a1f4111016700240201
001f0163002502ab001f014c010f019a001f01480149006c001f0147b22c
891fb80145b22c9e1fb80144b22c791fb80143b223311fb80127b23c811f
bc012300500101001f011fb223e41f4115011d0023019a001f011c002308
01001f011b00250801001f010e010f0401001f010d00220401001f0108b2
23811fb80106b425e41ff73cbb0125001f00f5010fb29e1fe3bc01490156
001f00e20149b2ab1fd1b901490401b21fcf2cb80125b61fce23bb1fc524
b80156b21fc02cb80801b21fbf2cb80201b51fb124e41fb0b901490201b6
1faf2c671fad23b80801b21fa523b80201400b1f9f3c2d1f9b235a1f9925
b80201b21f812cbc0401001f006d010f0156400b1f592c3e1f4c3cab1f46
25b80101b21f403cb80125400a1f3a23721f393cab1f38b80149b3ab1f31
24b80401b21f3025b802abb61f2a24e41f2623b80156b21f5537ba023500
070175402c0774076207560751073b0733072d0720071d071c0714081208
10080e080c080a080808060804080208000814b8ffe0402b000001001406
100000010006040000010004100000010010020000010002000000010000
02010802004a00b013034b024b534201b0124b004b5442b0372b4bb807ff
52b0382b4bb008505b58b101018e59b0382bb00288b801005458b801ffb1
01018e851bb0124358b90001012f858d1bb90001017c858d5959014bb0c0
63004b6220b0f65323b8010a515ab0052342180016763f183f123e113946
443e113946443e113946443e113946443e11394660443e11394660442b2b
2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b181db0964b5358
b0aa1d59b0324b5358b0ff1d594bb04753205c58b90271026f4544b90270
026f45445958b9017a0271455258b90271017a4459594bb04753205c58b9
002202704544b9003c027045445958b901b30022455258b9002201b34459
594bb04c53205c58b9014900224544b1222245445958b901c20149455258
b9014901c24459594bb06753205c58b9002402714544b900500271454459
58b9021e0024455258b90024021e4459594bb8020153205c58b9010f0022
4544b1222245445958b90c00010f455258b9010f0c004459594bb01c5320
5c58b125254544b12c2545445958b13725455258b125374459594bb0ab53
205c58b125254544b1232545445958b901590025455258b9002501594459
594bb8010153205c58b125254544b1282545445958b902080025455258b9
002502084459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b65422b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b01b361dc6463456523456023456560234560b08b76
6818b080622020b164dc4565234520b003266062636820b003266165b0dc
236544b064234420b161634565234520b003266062636820b003266165b0
63236544b0612344b10063455458b163406544b26140614523614459b3a6
7f434b456523456023456560234560b089766818b080622020b1437f4565
234520b003266062636820b003266165b07f236544b043234420b1a64b45
65234520b003266062636820b003266165b04b236544b0a62344b1004b45
5458b14b406544b2a640a645236144594b5242014b5058b108004259435c
58b108004259b3020b0a124358601b2159421610703eb0124358b93b2118
7e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d412d411bba
04000400000b2b59b00e2342b00f2342b0124358b9187e3b211bba01a804
00000b2b59b0102342b0112342002b001845694445694445694445694473
7373747373737475752b7373747475184569447373742b4bb021534bb046
515a58b03cb03c45b040604459012b2b2b2b757575757575757543584010
bf3ccf3c026f3c7f3c8f3c9f3caf3c0575755943584012bf22cf22025f22
6f227f228f229f22af2206757559435c58b6403c9f22ef220375592b2b01
747474744544737374747575454473454473744544737475737373737300
757575737575752b2b757575752b752b435841220063032d00010003032d
0013032d0023032d0033032d0053032d000500c3032d00d3032d00e3032d
00f3032d00040083032d0093032d00a3032d00b3032d0004032d032d4518
694474747575592b4358b900180332b330353238b80332b361663238b803
32b3535a3238b80332b3454e3238b80332b33c413218b80332b23f330a41
0f0332000100ba033200ca033200da033200ea033200fa03320005033203
324518694474752b2b2b2b2b2b597300732b012b7575002b2b2b74002b2b
2b732b74012b002b2b017373737474732b2b00732b2b002b2b2b01737473
2b012b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b0001737500737300456944
0073730173742b2b2b2b2b732b00732b752b2b732b2b2b2b2b2b2b2b2b73
742b2b00000000>
[14121 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 1112 43 <000100230000059d054c00450177b10202435458b747400d0d02550025b8
fff6b5131302552534b8fffc401213130255341a0d0d0255340c0f0f0255
3413b8fff64013131302551301220c13130255220c0d0d025522b8ffe840
0c10100255220c0f0f0255221a411003e2001d03e2002c03e2002f03e200
2e000c03e2000903e2003f03e2003c03e2400b3d0024242e3d022e1c0a02
003f2f2f3f12392fcd10ededecec10ededecec012f2b2b2b2bc0cd2b2f2b
2b2bdd2bc031302b1b40717047a047d047e0470413479e1c40365047e047
02121f1b0b2122221f1b1c2122341f1b2e2122451f1b3e2122021f1b0a21
23131f1b1b2123251f1b2d2123351f1b3d21230100232324241b3e3d3d0b
0b0a022e2d2d1c1c1b0812132202402201df2201202230227022a022d022
e0220622b80220401a10476047c047032047014745252235503460340234
9e4661dc182b4d10f4723c4dfd3c107172f45d71723cfd3c003f3c103c10
3c3f3c103c103c12392f3cfd3c2b2b2b2b2b2b2b2b3130015d2b015d5901
211134272627262323352115232207060615111417161716333315213533
323736351121111417161716333315213533323736351134272627262323
35211523220706061501a502760d0a202b3030024430302b20170d0a1f2c
3030fdbc30532619fd8a0d0a202b3031fdbb305426180d0a1f2c30300245
31302b1f1802d701846821191218252517104164fc956721191218252531
207a019dfe636721191218252531207a036b682119121825251710416400
>PFJBAA+TimesNewRoman AddT42Char 
1 5204 72 <0002004cffe4035303b00014001d037db10202435458402808161415000c
0f100255000e0c0f1002550e0c0d0d02550e153040000120003000020000
10000200b8ffc0b41314025500b8ffc040111111025500000b1b25110700
0710070207b8ffc0b40f10025507b8ffc0b5131402550704b8ffd6b41314
025504b8ffcab71212025504310b0b003fed2b2bc42b2b5d3fed12392f2b
2b5d5d5ded012f2b2bdd2bc02fcdc031301bb10602435458401d158000a0
00b0000320003000400003000010000200000b1b2511070807b8ffc04024
1010065510072007b00703000760078007a00704079204a204b204030431
0b0b07081614b8fff440260d0d065514141f1e15000c0d0d0655000c0f0f
0655000e0c0f0f06550e160d0d06550e0e1f1e1112392f2b2bdd2b2bc011
12392f2bcdd0cd003fed5dc45d5d2b323fed12392f5d5d5dcd31301b4019
125f185d1960006014d6030519201c3917201c3916401c391fb8ffc0400a
434a34081f430d5d361fb8ffc0b32828341fb8ffc040532a2e341b061909
58135e165f175a185b1a07010309060709080c0515490689028c06870c8a
10851da302ab18b513d402d90fda10f402f3031312600760087007800789
09c107c80ff007080401070d84020309baffe00006ffe0404a3609460247
094f1f5402540962027202891389199913a409a40ab808b509b00ac702e7
02e00cf40a1408d007010007d007027107010007100720079007a007b007
06077d041400301615b8ffc040131239125f157f159f15df150415151bd3
040104b8ffd0b2143904b8ffe8b2133904b8ffd84048123904310b0b5c1b
011b25110707cc0816281b390f16016f167f168f160316f4141480080130
0890080230088f08df08031008400860087008b008e0080608aa0e150400
89000200b8032c4012300e400e500e03000e100e200e03f00e010eb8ffc0
4009434a340e431e434b182b4e10f42b7172724dfd713c10fd5d715d713c
10ed5d712b10ed003fed723fed2b2b2b7211392f5d4358b26f15015d592b
3cfd3c10f45d5d7172393130015d00383800715d014358b4060001020271
5971722b2b2b2b2b2b2b0072435c58b90007ffc0400b23390c402d390d40
2d3908b8ffc0b2283907b8ffc0b2283906b8ffc0b21b3907b8ffc0b21b39
08b8ffc0b21b3907b8ffc0b20a3908b8ffc0b20a3907b8ffc0b2093908b8
ffc0400e093915101939192011390d201139002b2b012b002b2b2b2b2b2b
2b2b2b2b2b2b595959130617163332363717060623220235341233321615
252126272626232206da016464875a852d1f15ca98a5ebf1b69ac6fd8701
a805101963365383023bcc747463781489e10101d9eb0107cbaa3a582438
4081>PFJBAA+TimesNewRoman AddT42Char 
1 6196 73 <0001004f0000037a058c002b0208b1020243545840252d40101002552d40
0f0f02552d400d0d02551b2b01100e0601080e2901080d0d025501120eb8
ffea4012121202550e120d0d02550e0c0f0f02550e06ba03e2000903e240
0a0824251e1700000f290fb8011bb2120608002f3fedc010c03fcded10ed
ed012f2b2b2bc0dd2bc010c410c610c610c6c431302b2b2b1bb106024354
58b9000f011bb2120600b8011b401d2906241e17000829010c0d0d065501
060f0f065501021010065501120eb8ffd8400b0d0d06550e060f0f06550e
b8ffdab7101006550e0e2d2c1112392f2b2b2bc0dd2b2b2bc0002f3fcdcd
3fed3fed31301b403e8b2099159926034403440c48198503850c059a0401
2f2d7f21900690079f089f099e109e11b02d0910061007025f2a5f2b021c
080eb41e08922201b41e07b80308401f231e9f1ebf1e021e11242517012b
50100110302a2912110608070a101b011bb80152b38f2d012db802f6b201
2a2bb80110400d282901120f1110920f0f01240eb8ffc0b36060340eb8ff
c0b33a3a340eb8ffc0b33f3f340eb8ffc0b32431340eb8ffc040161c2134
900e01000e100e5f0e700ec00ed00e060e192cba0306030700182b4e10f4
5d722b2b2b2b2b4ded3c10f43c103c103c3cf43c10e65de472003f3c3f3c
3c3cfd723c3ffd11395d2f2b2b3130437940122527141626251526251628
1c002714241c012b012b2b2b81810172715d0072715d5959011114171633
331521353332363635112335333534363633321716151406232226262726
232206061515331501a61c253e53fddd29284219b2b258b57169583a341e
17334a1f1f262e401cec034cfda680222c2424284462025a483c89be7544
2d381e35216d13133167d6424800>PFJBAA+TimesNewRoman AddT42Char 
1 6840 76 <0002003c00000207058e000b00220249b10202435458b90024ffc0401d0d
0d0255120d080d0d02550d21181010025521180f0f02552113180309b8ff
eeb41313025509b8ffe0b40d0d025509b8ffd6b40f0f025509b8ffceb610
100255090d18b8fff4b41313025518b8ffe2b40d0d025518b8ffe0b40f0f
025518b8ffd6b5101002551820b803e240174f216f217f210321226f0001
0060060106400f0f025506b8ffc0b71313025506220613002f3fd62b2b5d
cd5d10dd5ded012f2b2b2b2bcd2f2b2b2b2bcd10c4c62b2b102bc4313001
2b1bb10602435458400d20121010065521121010065506b8ffc0b44b4b06
5506b8ffc0b44141065506b8ffc04019373706554006010006a006026006
0106000020212207130309b8fff6401c10100655090924230d0210100655
0d020f0f06550d0c0d0d06550d18b8fff0b41010065518b8fff6b40f0f06
5518b8fff0b70d0d0655181824231112392f2b2b2bcd2b2b2b1112392f2b
cd002f3fddcd3fcd5d71722b2b2b3130012b2b1b40199024016024702490
24a024f024052024502402402450240224b8ffc0b332323424b8ffc0b338
3a3424b8ffc0b32d303424b8ffc0b323253424b8ffc0402e191a3418291e
134a220d291e124a2321271941201e21440c190c1390060106390000220c
0713120a900901093903b8ffc0b2433503b8ffc0400f3f35036b0c0c0d19
0d2418402b3918b8ffc0401a363a34901801501801601870189018a018f0
180518b223b2a3182b10f65d71722b2bed3c103c10f42b2bed72003f3c3f
3c3fed7211123910f5edfc01f52b2b3130012b2b2b2b2b015d715d017259
590132161514062322263534361311141616331521353236363511342726
26232207272501292a3b3b2a2a3c3b7e193141fe43432e1b09071e1a1c28
0e0114058e3b2a2a3c3c2a2a3bfe21fd2056391c24241a3c550161952c20
190f2470>PFJBAA+TimesNewRoman AddT42Char 

1 0 3 <> PFJBAA+TimesNewRoman AddT42Char 
1 2466 52 <00020048fe6f0579056b0015002600fd402945015807950103060e015701
580766017601860190009608c70fe50009040f40004201035608039704b8
02d0402f0816281003001eac0808200030007000800004005208080d032b
223c1f132f13020013101320133013401305134928b8ffc0401a3f352028
402802281a3c100d200d020f0d1f0d020d49276463182b4e10f45d724ded
4d10712bf65d724dede412392fed5d003fed3c3fed10f4ed313043794040
092620251c260b0c0a0c020618252423252302061f15222d011d091a2d00
170f1a2d002611222d0121141e2d0015001b0c1e2d000908190e162d0123
12162d012b2b103c2b103c2b012b2b2b2b2a2b2a2b2b8101715d00715d05
161617152624242726272602351000212000111400012207061110171633
3237361134272626038666ed978afec6fee76690547a87018a0118010a01
85feebfe7ab66f8c8e6eb5bc73874a39bd0fb0a60c200565b3653a416101
1bc101300192fe6dfecdf9fe8804ea82a3feb0feb7b28989a2013cf3a680
7900>PFJBAA+TimesNewRoman AddT42Char 
1 12630 88 <00010002ffe403fd039400250230b1020243545840162740121202550801
080d0d0255010b20281212025520b8fffc400b0f0f0255201e0d0d025520
b8ffe4401310100255201a080d0d02551a121c1212025512b8fff8b40f0f
025512b8fffab40d0d025512b8fff4b5101002551224ba03e2001703e240
0e1825060b200e18061d2c0e0b0708b8ffc0b509100255080a002fdd2bcd
3fed3f1239393f10edec012f2b2b2b2bcd2b2f2b2b2b2bc0dd2bc431302b
1bb1060243545840570740086008700803080a0b200b180e242517182506
18061d2c0e0b0b010810100655010a0f0f0655010c0d0d065501201a040f
0f06551a04101006551a0a0d0d06551a1208082620080f0f065520060d0d
065520202612b8fff2b41010065512b8fff6b40f0f065512b8fff6b70d0d
0655121227261112392f2b2b2b11392f2b2b11392f10cd2b2b2b10cd2b2b
2bc0003fed3f3f10cd10cd111239393fdd5dcd31301b40350127600d5d36
202760277027b02704340b371f3a20481f4820051a08134f1e182723214f
1e25272308270141071e0844200b251d08b8014540130a00252519191806
1d2c0e0e0a0b0a0b0b2120b80167400e00b001010f0170019f01cf010401
b802bd402512191a241212501390130280139013b01303001310132013b0
13c013d01306136026c27f182b4e10f45d71723c4d10fd3c10fd5d713cfd
3c3c103c003f3c10ed3f3c103c103c10ed11123939f5edfc01f52b2b3130
437940101b1c0f111c0f1a1c0010111b101d1c002b01103c2b8181005d01
5d2b59590111141616333237170523350606232226263511342626073521
11141633323637113426273503630f21161f270efeee2d767c454d712c1c
37480141593f2b6d4b395a0394fdd59f471c112371c28042598c80019941
321b0125fd9b8050364c02074e370225>PFJBAA+TimesNewRoman AddT42Char 
1 2858 68 <00020049ffed038903af0032003d0349b1020243545840203f400d0d0255
3f4013130255151b072e25080b0b0255250c0d0d025525000c33b8fff040
0b1212025533161313025533b8ffdeb41010025533b8fff440150f0f0255
330c0d0d02553339070c0d0d0255072d2eb8ffc04020091202552e33001e
04292c30340c40090b02550c401d1d02550c40111202550cb8ffd4401e09
1202550c0c047f180118401112025518401d1d02551810251e073c2c0400
2fed3fedc42b2b5d12392f2b2b2b2bcd2ffd11123939d42bcd012f2bcd2f
2b2b2b2b2bc0c0dd2b2bc410d4cd31302b2b1b406f0b1c8a330212533601
12201f39803fa809b60a03122b127d007d3386008b0b8b35061d12163a10
3f803f04091c4c054c06452045224c3a403f891d080a0e0720002249014b
0a490b49354b37433a493d570b670b8509840a840b0f54168316021f3f5f
3f0260083300343c2e292d34bb011b000c000cffc0b609390c280b390cb8
ffc0401a3a35100c500c02400c500c600c03200c500c600c760c040c3c18
b8ffd840290b394f185f186f18032f187f1802187e1f100110251e07303c
403c023c2c04702d802d022d35292c30b803464011040b2ec02d012d6025
00330d0c0c343433b8fffcb41010065533bb016700240025ffc0401a0e39
00251f2580259025044025f0250280250125101010065525bb0243000700
15ffc0b21f3915b80167401e1b2f393107400e3920075007800703100701
f0070150070107433e436e182b4e10f45d7172722b4dedf4ed2b10fd2b5d
71722b3cfd2b3c103c103c103c10f65d3c003ff4fde45d10ed713fed72fd
5d712b11395d71722b2b2b2fb10602435458b2030c01005d59ed11123911
123939313043794047353b1c23051337383638020609080a080206212220
220206350b392000111d131c0012130f1f0d1c0122233b05391c00380834
200135340b121c101c010e22101c013a063c1c002b2b2b3c103c2b012b10
3c2b103c2b2b2a2a2a818181017201710071017172005d4358b23f12015d
59015d2b0072435c58b431400e392eb8ffe0b210392eb8ffe0b60e393720
0e3920b8ffe8b20c3920b8ffe0400b0b3918200b3917200b391cb8fff040
1a0b390a280b3937280b390a280a3937280a390a28093937280939002b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b59005d5925060706232226353437363637
353426232207061517140623222635343633321716171615111416163332
3736371506232226271106070606151416333202478d24363d5f7b1e29cb
ec57533f2526022f26252fb09f7a4e3b1c120a170f100c153c7066313a01
972c4f4456384c846d1119826a433144785624896622222c3a2e32342d56
90291f422b85fec9833b14070d3c38964493015d3c192c6039485f00>PFJBAA+TimesNewRoman AddT42Char 
1 8760 81 <0001000c000003f703af003302d3b102024354584017354012120255300c
10100255310c101002550e080f1623b8ffea402e10100255231d24290808
0d0d025508040f0f025508060c0c025508162412120255161a0d0d025516
0c1313025516b8fff4b40f0f025516b8ffdeb41010025516b8ffee40260c
0c025516001d040f0f02551d080d0d02551d060c0c02551d291812120255
290e1313025529b8ffeeb41010025529b8fff0b40f0f025529b8fff6b40d
0d025529b8fffa400a0c0c025529001c022430b803e24009314009100255
31320dbe03e2001003e2002203e2002503e24009240f2432071a2c020700
3fed3f2f2f10ededecec10dd2bed11123939012f2b2b2b2b2b2bdd2b2b2b
c02f2b2b2b2b2b2bcd2b2b2b10c410c42b10c410c431302b2b2b1bb10602
435458405e2f1610100655300c10100655311610100655001c0224303132
071a2c02070f24080c0d0d065508021010065508060f0f06550816020d0d
065516021010065516080f0f065516163534001d0c0d0d06551d080f0f06
551d02101006551d29b8fff0b40d0d065529b8fff0b41010065529b8fff2
b70f0f0655292935341112392f2b2b2bdd2b2b2bc01112392f2b2b2bcd2b
2b2b002f2f3fed3fddcd111239393130012b2b2b1b403a35402a35083560
0d5d3630355035603570359035052d040140356035703580359035b03506
b035d03502b0350160358035c035031d0816291e0fb8030f40112229291e
244a2208291e0e4a231d291e23b8030e402e2331272a41301e31441c0023
3233071a2c02072423230f0f0e0a17162407900801b008010f0870089f08
cf080408b802bd401b29331d242a1f295029602970290480299029b02903
002910290229b8ffc04009141634296034a67f182b10f62b5d71723cfd3c
10fd5d71723cfd3c003f3c103c103c3fed3f3c113939f5edfc01f52b2b2b
2b3130437940121819030604251903171c01050618051a1c012b01103c2b
2b8181015d71015d71005d01722b2b595901363332161716151114171616
331521353332363736351134262322071114171616331521353332363511
342626232207272533014ba1924b6c20160e0b3142fe3b1340330a04414d
77760b0e314bfe3b1446310f1f1a1c270f01142b02edc24b563c7cfe7957
1f191c242427260f4f01777d7182fe1d5d161d1b242447640154a5481a0f
2470>PFJBAA+TimesNewRoman AddT42Char 
1 12032 87 <00010014fff1023c04c1001b01fdb1020243545840251d40121302551d40
101002550b0c18121202550c15130105131812120255130e1313025513b8
fff8b40f0f025513b8fff4b40d0d025513b8fff0400c10100255130b082c
0f161404b8011bb2000106003fcdfdd0cd2fedc4012f2b2b2b2b2bddc010
c62f2bcd31302b2b1bb106024354584019170c10100655160c1010065515
0c10100655160c101006551bb8ffe8b4101006551ab8ffe8b41010065519
b8ffe8401410100655700b010b0f1b01156914014914011404b8011b401c
0106082c0f0b1b0105021010065505080f0f0655050c0d0d06550513b8ff
eeb41010065513b8fff0b40f0f065513b8fffab70d0d065513131d1c1112
392f2b2b2bdd2b2b2bd0cd003fed3ffdd05d5dc010cd10c45d3130012b2b
2b2b2b002b2b1bb9000dffe840410c395f015f02023f1d99119919bf15bf
16b819e819079f1d01891a014f0c4f0d5f0c5f0df5180506181518271803
161518191a030118191a03141ba00103153004b8011b401c010330020201
060c35082c0f0b16cf15df15ef15031565141bcc000bb801ec402c200c01
0c2e2f1db01d021d000101040405241450130180130100131013b013c013
d013e0130613601cab89182b10f65d71723cfd3c103c103c105df45ded10
ed10f45d3c003ffde43f3c10ed10edfd3c10e40111173900111739123931
3000715d0171725d00722b59590111331523111416333236373306062322
2626351123353636373637014ad6d63328213e11272380442e582a913773
2d172904c1fed346fdae593e29286263335f63026821166948266500>PFJBAA+TimesNewRoman AddT42Char 
1 7534 80 <000100110000063003af005703d3b1020243545840175940121202555940
0d0d02551711080d0d025511554c30b8fff4b40f0f025530b8ffeab41010
025530b8fff4400f13130255302b080d0d02552b313746b8fff4b40f0f02
5546b8ffeab41010025546b8fff440211313025546414741080d0d025541
040f0f025541060c0c0255414c14121202554cb8fff4b40f0f02554cb8ff
f6b40d0d02554cb8ffeab4101002554cb8fffa40190c0c02554c0a131302
554c2b040f0f02552b060c0c02552b37b8fff0400b0f0f025537100d0d02
5537b8ffd4400b10100255371c1212025537b8ffea401f0c0c025537020d
0d02553702131302553711040f0f025511060c0c02551120b8ffe8400b0f
0f025520300d0d025520b8ffc2400b10100255202a1212025520b8ffda40
0b0c0c025520020d0d025520b8fffc400b131302552016192f324548b803
e24020475455400c0c02552f55014f556f557f5503555606473118252c0b
073c2c0507003fed3fed2f2f2f3fdd5d5d2bcd10fdc0c0c0c0c0012f2b2b
2b2b2b2b2bcd2b2b2f2b2b2b2b2b2b2bcd2b2b2f2b2b2b2b2b2bcd2b2b2b
c410c42b2b2b10c4102bc42b2b2b10c6102bc431302b2b1bb10602435458
403c252c0b3c2c050b070507545556071831471102101006551120041010
0655202b060f0f06552b02101006552b3741060f0f065541021010065541
4c20b8ffeab70d0d065520205837b8fff8b41010065537b8fff8b40f0f06
5537b8fff2b70d0d06553737584cb8ffeeb40f0f06554cb8fff0b4101006
554cb8fff8b70d0d06554c4c59581112392f2b2b2b11392f2b2b2b11392f
2b10cd2b2b10cd2b2b102bcd2b002f2f2f3fddcd3f3f10ed10ed313001b0
0d4b5458bf0046ffe80045ffe8002fffe80030ffe8b51a18191818183838
3838383838591b401c3407d059ef16038059011159600d5d362b0d019059
01200820291e18b802fcb42237291e31b802fc400b224c291e474a221129
1e17b8030eb4232b291e30b8030db42341291e46b8030d403e2355274d41
541e55440829374d4039292808000725475657073c2c05252c0c0a0b0706
0405074746313018170a5917171a101124213020017020b0200220b80135
400f37292e2b24383037017037b0370237b8013540164d5741244c4c1f4d
504d02804d904d02004d104d024db8ffc0b61416344d605859b8025ab321
a67f18b80164852b2b4ef42b5d71723c4d10fd3c10f471723cfde410f471
723cfd3c4e456544e6003f3c3c3c3c3c3f3c3c3f3c3c4ded10ed3f3c1112
17390111123900f5edfc01f52b2b2b2b2b2b31304379401422240c0f0d25
2326240c211c010e0f220e251c012b01103c2b2b2b81810172005d2b0171
5d5959013637363633321617363633321617161511141716163315213533
323736373635113427262322060707171114161633152135323637363511
342726232207060711141616331521353236363511342726262322072725
33015064122d6833567c15678e4b497121160d0a363dfe3c133b21170a04
1b2756356b4c0202153a46fe314c390b05212c4f3635532d19314bfe3b3f
321a09071e1a1c270f01142b02ec640f262a645f784b4b553a7cfe765620
161f24241710231150018a702e4035480b2bfe4b5e2e1f24242424115201
8a7031401d2c37fe155a361b24241b3b55015e972c21190f2470>PFJBAA+TimesNewRoman AddT42Char 
1 1960 51 <000200220000042b054c001f002c0178b9002effc040933a352f2e751874
1b741c7c28702e951c077918b724ba28db1bdb1cda24061927102e282639
2539273b28302e5a276927702e802e0bc600011a1c291c4b1cd719db1b05
a82801ca24d917da24d927d828eb24061c40231d28080e1f1b082122011f
1b0721230f1f1b152123001d202c2a1d283f234f2302232307152a281616
150208070812001a101a301a401a701a051a492eb8ffc0403e3f35002e01
402eb02e029f2ec02ed02e032e2c010613130255010c0f0f0255010c0d0d
025501220f0e0c101002550e0c0f0f02550e1a0d0d02550e9e2d2eb80177
b3216163182b2b4ef42b2b2b3c4dfd2b2b2b3c4d105d71722bf65d4d4358
b90026032de91bb90026032ded59003f3c3f3c10ed1112392f5ded123939
12392b2b2b31304379401c2429171c182528262917263301241c26330127
192a3301251b2333002b2b012b2b2b2b81810049547940101e22211f233b
04221e203b0021201f0001103c103c2b002b8101715d0071720172005d01
5d2b01111417163333152135333237363511342726232335213216161514
062322262716163332363534262623220701a41c264d34fdbb335625141b
274d3301f1b6d290dbc831724135521d68974884543350027bfe75801f2c
2525381f74036c801f2c254bb27aa6d00e470a0aa18058974b13>PFJBAA+TimesNewRoman AddT42Char 
1 10252 85 <0001000d000002b703af002801b5b1020243545840282a4013130255061f
171127040f0f025527181f0111080d0d025511040f0f025511060c0c0255
111fb8fff4b40f0f02551fb8fff6b40d0d02551fb8ffee4011101002551f
14121202551f0e131302551fb8fffc400b0f0f02551f011003181619bb03
e20018002603e2400e4f276f277f2703272807180c0307003fcd2f3fdd5d
ed10fdc011123939012f2b2b2b2b2b2bdd2b2b2bc010c4c62b10c410c431
302b1bb10602435458402301100318262728076f097f0902090c03071806
1f01110c0d0d0655110410100655111fb8fffab40d0d06551fb8ffeab40f
0f06551fb8ffeab7101006551f1f2a291112392f2b2b2bdd2b2bc010c400
2f3fcdcd5d3fddcd1112393931301b406f2002200f3202320f4002400f82
0407402a015f2a011f291e18272211291e17862327272041261e2744000a
0b2a111420100104188009010939100c010c590303000718170a5f060140
0601062e1f2a012a0011241f1f1f2001802090200200201020b020c020d0
2005206029a66e182b4e10f45d71723c4d10fd3c1072e47172003f3c3f3c
10ed72ed5d11173901111239390010f5edfc01f52b2b3130017271005d59
590115363332161514062322262322070607111417161633152135323736
373635113426262322072725014c73793748342423571512152d30130d42
3efe2b4622190a050d231a1f270a011503afcece432c27364514295efe49
4c271b24242416102311500163a03d1c0f247000>PFJBAA+TimesNewRoman AddT42Char 
1 3876 70 <00010046ffe4034a03af002101f5b2080401b102024354584020021a060c
10100255060c0f0f0255060c0d0d02550616250f0907602170210221b8ff
c0b513130255211db8ffd4b4131402551db8ffcab6121202551d3103002f
ed2b2bc42b5d3fc4ed012f2b2b2bcdc431301bb11223b8ffc040732a2d34
0023430d5d36170d5705021c135404530553065407581b581c0767057605
80008021b41bc520d020e000e50509370147015618551c5f236018601c76
18721c8a128e1390119018a601a402af23b301c101c707c719e908e41cea
20f4011806024a1257128b1f8b208023f02307112001bcffe00020ffe000
1fffe0b2001d00b803464030102101602180210200211021202150216021
70219021a021b021c021d021e021f0210d21661ddf0f010fc7162509071d
b8ffd8b214391db8ffd8403812391d31030b21cc1f0c014f0c8f0c020c2f
100030004000600070009000b000c000e00009300040000200aa731a831a
02501a019f1a011ab8010c4012f006010006100620063006400605064322
43b9029100182b4e10f472714ded5d7271fd715de47172ed003fed2b2b3f
eded7110f45d7172e412b10602435458400a531d631d731d03931d01005d
7159393130383838013801715d005d017200722b2b435c58b4001018391b
b8fff0b613390510103901b8ffc0b2103920b8ffc0b11039002b2b2b2b01
2b5959017101060623220235340033321615140623222726262726232207
061514163332373637034a25d8839ce80101b487ae312c3b1e110b23233e
643d51a189624e3734015cb5c30106dfd8010e8f4d262f2615761f1e4a62
a1a4fb432e79>PFJBAA+TimesNewRoman AddT42Char 
1 10812 86 <00010064ffe402d503af00310434b1020243545840273340131302553340
0b0b02550201181010025501180f0f0255010f1b1a08270c0b0b02552721
0fb8ffe0b4101002550fb8fff440320f0f02550f310708270f2104122b05
017905016c050105252f0101012a0719771e01631e011e25201a01601a70
1a021a120b003fc45d5ded5d5d2f3fc45ded5d5d5d1217393f012f2b2bcd
2f2bcdd4cd10d42b2bcd31302b2b1bb106024354584032210f2708042a16
1e122e05022a3107601a701a021a19124b05016b057b050205252a07441e
01641e741e021e25120b01210fb8fff2401a0d0d06550f0f33321a080e0d
0d06550827120d0d0655272733321112392f2bcd2bc41112392f2bcdc400
3fed5d5d3fed5d5d10c4c45d3f10c4123911123912173931301b4029092c
192c0212122e400b392c280b391814590c5a269b109424050a070a280a29
603370338033060f33b8012040870d5d36cb0dcb0ec424c425d723d624d9
2ce604e623e624e92c0b123f2c5d2c6e2d7d2c8f018f028f038015801a80
1b801c892d8f2e0d0f010f020a03090c061c0a2cc822c923081c03161412
1c161d19291b2c9909990a9b20932393240b122b0d282c4a2c4f335f3378
29782c860ea823af33e803e61c0c2908311e00bd021e011f012f010201b8
012bb200bd2eb8011a40112a181e19bd1b1e1a1f1a01101a201a021ab801
2bb219bd16b8011a4022121224230d0b040f2724230d0b04051e01c7002e
2f2a31000005252a071a7e191918b803464014162f1e25120b02cc120101
12cf21df21ef210321b80314400b700f01600f700f900f030fb801364019
271a192e1f0801082c9f270160277027802703202730270227ba01200032
0120b14b182b4e10f45d71724ded72f43c10fd5d71fd5d4358b2ff21015d
59392f435c58b2ff01015d59ed003fede4f43c10ed3fed3c103c10e410ed
1112173901111217394358400a242323240d0b140d0d0b870e2e2b0e7d10
c459180010ecf4ed5d720110edf4ed0010ecf4ed5d0110edf4edb1060243
5458b42e20090d34002b5931304379401c28291f20101106071f11211c01
0629081c0020101e1c000728051c01002b2b012b2b81818181015d435840
09fb07f610f611fb28045d5901720071005d435840199f019f029f039f0b
9a0d9015901a901b901c992297239f2d0c5d595d2b017100722b2b435840
0b2f232f248b2c9b249b2c055d59435c584011282019390928193901400a
3902400a391bb8ffc0b20a391ab8ffc040190a392e400a392c400a392c40
09390c101e123f0e201e123f0eb8fff0b21b390eb8fff0b2193924b8ffe8
b2133923b8ffe8b213390cb8ffe8b613392c1813391bb8ffc0b212391ab8
ffc0400f123901401239024012392c20123924b8fff0400f0f392c180f39
03100d392e400d3923b8fff040120d390c100d392c200d392c1811392c18
1139002b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b012b2b59005d59590111232626232206151417161717161514062322
272623220723113316163332363534262427263534363332171633323637
02902126775c4656201f5f92cbbd75546c2115170d21211c9e62455761fe
de2d2d9b7b364d331110120c03affec8936a4a2d3828292e4763a27d991e
0a1a01478c8e5139455e903a39577198170f0e18>PFJBAA+TimesNewRoman AddT42Char 
1 9632 82 <00020045ffe403b903af000f001d020cb10202435458401c140c06101002
550c0c0f0f02550c0c0d0d02550c100b0b02550c1a04b8fff4b410100255
04b8fff440130b0b0255040c0f0f0255041725080b10250007003fed3fed
012f2b2b2bcd2f2b2b2b2bcd31301bb10602435458400910250007172508
0b1ab8fff4401b0d0d06551a04140c0d0d0655140c100f0f06550c100d0d
06550c04b8fff0400b0d0d065504041e0c0c1f1e1112392f11392f2b102b
2bcd2b10cd2b003fed3fed31301b404512801501a716b616c501c909c41d
d9090612e70a0148094516571585018c09890fd91b071f403235041f430d
5d369f1f01c615c91a02401f014908102500071725080b1204b8ffc0402b
120b3f4f0401400401d0040140045004600470049004b0040604ec0c4012
0b3f400c9f0c020c431e434b182b4e10f4722b4ded5d5d71722b4bb02853
4bb050515ab10c1e49b11f0449525a58bd000cffc00004ffc0001fffc038
3838594358bc001a0332000400140332e910e91bbc001a03320004001403
32ed10ed59003fed3fed313043794036011d12250e2602251c260a250626
110f1420001d011a2001160914200018071a2001130d1020011b03102001
150b17200019051720002b2b2b2b012b2b2b2b2b2b2b2b2b2b8101720171
722b2b71015d0143584011750275067a0a7a0e7a1278167518751c085d59
5d005d435c5840091c1011391b10113915b8fff0b10b39002b2b2b595959
013217161514060623222726353436361722060615141233323635342726
0200d07e6b76cf7fcf7a677dcc53356b429f82617e694703af9e87af7bfc
80a58bad7ef977413f9e7cc8fedea0c3f48c6000>PFJBAA+TimesNewRoman AddT42Char 
1 742 39 <0002002300000579054c00160021010340590b1b0b1d86109510d5100576
107614871098139915c91bc91dd41008181112141d1e03071501871a881e
022808061f1b002122071f1b0d21231721191f280e0e0d02192816160008
1c3c4f1201001210122012301240120512b8ffdeb60d0d0255124923b8ff
c0403e3f354023012023017023a023e023032321170613130255170c0f0f
0255170c0d0d0255172207060c10100255060c0f0f0255061a0d0d025506
9e226163182b4e10f42b2b2b3c4dfd2b2b2b3c4d105d71722bf62b5d724d
ed003f3c10ed3f3c10ed1139392b2b31304379401c1a1e0f15102514261e
0f1c56011a151c56011d111f56011b131956002b2b012b2b2b2b8181005d
7101725d7133353332373635113427262323352120041215100706212716
33320011100023220723335624161c274d3302280130013dc1acc1fe75db
7f56e80132fecef05a7325372173036c7f202c258afebed3fee5bed4621c
01460117011901441d00>PFJBAA+TimesNewRoman AddT42Char 
1 13306 89 <00010011ffe403ed0394002002c1b10202435458b60909001a120614be03
e2001103e2002003e2000203e2b10006003fededecec3f2f1239012f3130
1bb106024354584031180a091b080909222109001a0b1416101006551413
06112a10100655111206021610100655020106201610100655200006003f
cd2b3fcd2b3fcd2b3fcd2b3f1239011112392fddcd10ddcd31301b400912
530a58185b190319b8ffd8b20b3522b8ffc0406115351419141a2309220a
2111201224182019201a3a09390a3a12391835193a1a4a084909440a4518
4519491a69089c0899099d1a9a1b9f22a900a808a509a219a21aa81bbe08
b509b60ab618b719ba1abb1bc022d518f60af618fb1a2d9f090122b8ffc0
b332603422b8ffc0b32b313422b8ffc0b31e293422b8ffc0b347473422b8
ffc0b327273422b8ffc0b323233422b8ffc0b311113422b8ffc04040191c
340f227c007201720270057c20810585118f22093a08340a3418391bc606
c021d81a07880a891887190337124818021318141e13001b201e00120a11
1e12b8ff86402c091a192018191930090a1409090a1b1a1a240908140909
08070605040408021e01131212010100061a190b18b8011d40125f0a0110
0a240a9f0ab60ad40a050a7d091bb80167401040062fa008b908ce080308
7d0919751abb011b00200009ffc0b30f123409b8ffc0b3191d3409b8ffc0
b2323509b8ffc0b70c350009c0090209b801bfb610220180220122b8ffc0
b3191d3422b8ffc0b60f133421ab89182b19102b2b7172f45d2b2b2b2b1a
fd18e61910f45d18f41aed1910f45d7218ed003f3c3f3c103c103c10ed01
111739872e2b0e7d10c487052e182b0e7d10c42b180010ed0110c00010ed
0110c00010ed0110c03130015d5d5d712b2b2b2b2b2b2b2b005d015d2b2b
0172435c58b50a20160d3f08b8ffe8b7160d3f09240b3918b8ffe0b21339
0ab8ffe0400a1339082013391b201339012b2b2b2b002b012b2b59595913
211523220615141713133635342726262335211506070607012301262627
26271101af1c272915d5d617080b2234012b3414231cfebb29feb916281f
113203942526202330fe06020d381d0e090f0b252504111e46fcee030536
2f100908>PFJBAA+TimesNewRoman AddT42Char 
1 364 38 <0001004affe1050f056b002401024042091e2f012f022f032f1f960f991e
a30fa312b60fb7120b081e011617017d037b1578168d038a169d03961aac
03bb03090c030e04021d48035903052f081011241b00b80105b5021b0101
ba00b8034bb6209a05281c0301b802dfb5112bb0100110b80341b58f0d9f
0d020db8032f402f140902ac000101013210acaf11011f113f1102111a40
260126093c2018010f181f1802180c0d0d02551849256463182b4e10f42b
5d724ded4e105df672714dedf471ed003ffd71f45df4e63fedecf4ed0110
edf4ed10c9313043794020151b060c07251a260b261625061b092d000c15
092d000819052d010a170d2d00002b2b012b2b2b2b2b2b818101715d0072
715d01132326262322060215141216333236371706042320272635341224
33321716333237363704d11f1f3ee6a187da7d76ed9884ca791f66fef0bb
feafb98ab6013fbd938f2a121b141a0b056bfe33cfb689fed4dfb8fef290
71a814b5a8fabafccb0154bb4816131b3000>PFJBAA+TimesNewRoman AddT42Char 
1 276 17 <00010091ffe4016f00c2000b002b401c0040060b034009403a3509403f35
5f09019f09af090209850c6a7a182b10f671722b2bed003fed3130253216
15140623222635343601002f40412e2e4141c2412e2e41412e2f4000>PFJBAA+TimesNewRoman AddT42Char 
1 118 15 <0001006efeab019800c800170053402759025917c4160309176019d01903
0901000704040f081200b612400c0b043a0f151f1580150315b8012a400b
1f0f5f0f020f19189ca4182b4e10f45d4dfd5ded003fede4123901111217
393130015d01711335363635342726232207062322263534363332161514
066e67710907070b251214313a4b3642678ffeab2c228f50130d0914093a
333146735f67b100>PFJBAA+TimesNewRoman AddT42Char 
1 1682 47 <00010029000004b7054c002000b0401b1000100120002001402257026702
77028a209920a920b9200c0122b8018e40330e643655025c1e02091f1b03
212216371b113d220a1f1b102123201f2000300040000300e71c1110021c
2302030800ac016c02b802c4402f16170613130255170c0f0f0255170c0d
0d0255172209090a0c101002550a0c0f0f02550a1a0d0d02550a9e21615d
182b4e10f42b2b2b3c4d10fd2b2b2b3cf4f4ed003f3ced3f3c10e45d3939
2b2b2b313001722b015d0117032135333237363511342726232335211526
0606151114171616333332363604962174fbe6335625151c274d3302666c
5720100c3283639c7e68017707fe9025382074036b7f202c2525012a4079
fcac531f15142e75>PFJBAA+TimesNewRoman AddT42Char 
1 4482 71 <00020044ffe40405058e001f002d024bb1020243545840262f4010100255
2906180d0d025506080f0f0255060c101002550600201d160a0d0d025516
0b20b8fff4401112120255200c1313025520180d0d025520b8fff8400c0f
0f0255201810100255201cba03e2001dffc0b6091002551d1f12b803e240
101340090e0255131400252509072c2c03002fed3fed3fdd2bed2fdd2bed
012f2b2b2b2b2bc0dd2bc410c02f2b2b2bcd31302b1bb106024354584052
1213140000200b0303252509071c701d01401d601d021d1f0b2c2c030b16
0c0d0d0655160410100655160b20141010065520040f0f065520020d0d06
5520202f2e290c0d0d06552906180d0d065506062f2e1112392f2bcd2b11
12392f2b2b2bc0cd2b2b003fed3fdd5d5dcd3fed1217393fddcd31301bb9
002fffc0b34747342fb8ffc040422b2e34602f7c047c058a04802faf2fc0
2f07402f802f02002f162a152b55055508542b960707480701202f370a47
0a560a9804a72aa02f07c02ff02b022020002021baffe0000bffe040453c
204f205e20660a6c207a209f009f20aa07b907c62a0b260813270c41121e
1344151d2716411c1e1d441f0020210b042c1500252509071f2c012c2c1f
030b1f000b210c20b8016740121560168016af16031f1690160216eb2950
06b8ffc0b3282e3406b8ffc0b7473506432e437f182b4e10f42b2b4dedfd
725d3cfd3c3c3c3c3c003f3ced723fed3f11173910f5edfc01f50010f5ed
fc01f531304379401a262b0408272526082920002b042920002807252001
2a052c2000002b2b012b2b2b8181005d3838383801715d00710172715d2b
2b5959250606232226353412333217353426262322072725331114161633
323717052335112e0223220706151416333202c743804a96e0f8c3794f0f
20181a2b0d01112d0f21161b2d0bfef02e063c632f58455bb06c5b67463d
fbc5c501474da99d481a102370fbdda1471c112371c901d84470394f68c8
cad7>PFJBAA+TimesNewRoman AddT42Char 
1 0 0 <0002011c0000051c050000030007004db10201bb02be0006000702bfb200
0504b802beb403000a0704b802beb5010019080605bf02be000200030129
0009016b015e00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd
3c31302111211125211121011c0400fc2003c0fc400500fb002004c0>PFJBAA+TimesNewRoman AddT42Char 
PFJBAA+TimesNewRoman /CharStrings get begin
/g43 43 def
/g72 72 def
/g73 73 def
/g76 76 def
/;### 3 def
/g52 52 def
/g88 88 def
/g68 68 def
/g81 81 def
/g87 87 def
/g80 80 def
/g51 51 def
/g85 85 def
/g70 70 def
/g86 86 def
/g82 82 def
/g39 39 def
/g89 89 def
/g38 38 def
/;################# 17 def
/;############### 15 def
/g47 47 def
/g71 71 def
end
PFJBAA+TimesNewRoman /Encoding get
dup 1 /g43 put
dup 2 /g72 put
dup 3 /g73 put
dup 4 /g76 put
dup 5 /;### put
dup 6 /g52 put
dup 7 /g88 put
dup 8 /g68 put
dup 9 /g81 put
dup 10 /g87 put
dup 11 /g80 put
dup 12 /g51 put
dup 13 /g85 put
dup 14 /g70 put
dup 15 /g86 put
dup 16 /g82 put
dup 17 /g39 put
dup 18 /g89 put
dup 19 /g38 put
dup 20 /;################# put
dup 21 /;############### put
dup 22 /g47 put
dup 23 /g71 put
pop
end
%ADOEndSubsetFont
reset_gvm
/OSRJCA+TimesNewRoman /PFJBAA+TimesNewRoman findfont ct_VMDictPut
/OSRJCA+TimesNewRoman*1 
[/.notdef /g43 /g72 /g73 /g76 /;### /g52 /g88 
/g68 /g81 /g87 /g80 /g51 /g85 /g70 /g86 
/g82 /g39 /g89 /g38 /;################# /;############### /g47 /g71 
232{/.notdef}rp]
OSRJCA+TimesNewRoman nf
OSRJCA+TimesNewRoman*1 [30 0 0 -30 0 0 ]msf
149.88 644.4 mo
(\001\002\003\002\004\005\006\007\010\011\012\007\013\005\014\015\002\016\004\017\020\011\005)
[21.715 13.3246 9.95953 13.3246 8.28503 7.55998 21.595 15 13.3246 15 8.405 15 
23.285 7.56 16.6754 9.9595 13.3246 13.3246 8.28503 11.7554 15 15 0 ]xsh
196.56 680.4 mo
(\021\002\022\004\016\002\017\005\023\020\024\025\005\026\012\027)
[21.715 13.3246 15 8.28503 13.3246 13.3246 11.6354 7.56 19.9204 15 7.56 7.56 
7.44 18.3646 8.28503 0 ]xsh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
[/CSD [/0 /1 /2 /3 ]]
[/Pattern [/169310360.0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.29 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
