%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: Visio-Ç°Ãæ°å.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Administrator
%%CreationDate: 2017/6/18, 21:39:13
%%BoundingBox: 29 353 575 615
%%HiResBoundingBox: 0 0 612 792
%%CropBox: 0 0 612 792
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	1 index dup/ID get exch/Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.30 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.30 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.30 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get ne dup
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
				if
				end
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} (% &end XMP packet& %) ReadBypdfmark_5
<?xpacket begin='ï»¿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xap:CreateDate="2017-06-18T21:39:50+08:00"
   xap:CreatorTool="Doro PDF Writer [1.92] [http://j.mp/the_sz]"
   xap:ModifyDate="2017-06-18T21:39:50+08:00"
   dc:format="application/pdf"
   pdf:Keywords="Visio-Ç°Ãæ°å"
   pdf:Producer="">
   <dc:description>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Visio-Ç°Ãæ°å</rdf:li>
    </rdf:Alt>
   </dc:description>
   <dc:creator>
    <rdf:Seq>
     <rdf:li/>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">Visio-Ç°Ãæ°å</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%%EndPageSetup
1 -1 scale 0 -792 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 792 li
612 792 li
612 0 li
cp
clp
[1 0 0 1 0 0 ]ct
72.12 387.36 mo
572.64 387.36 li
572.64 230.28 li
72.12 230.28 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
1 1 1 rgb
ef
1.49999 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
72.12 387.36 mo
572.64 387.36 li
572.64 230.28 li
72.12 230.28 li
cp
0 0 0 rgb
@
70.92 181.8 mo
70.92 229.44 li
70.92 181.8 li
cp
572.64 181.8 mo
572.64 239.16 li
572.64 181.8 li
1 1 1 rgb
ef
.239988 lw
70.92 181.8 mo
70.92 229.44 li
70.92 181.8 li
cp
0 0 0 rgb
@
572.64 181.8 mo
572.64 239.16 li
572.64 181.8 li
cp
@
321.72 197.76 mo
76.44 197.76 li
@
321.72 197.76 mo
567 197.76 li
@
77.04 199.8 mo
70.92 197.76 li
77.04 195.72 li
77.04 199.8 li
ef
566.52 195.72 mo
572.64 197.76 li
566.52 199.8 li
566.52 195.72 li
ef
297.6 193.8 mo
345.96 193.8 li
345.96 174.6 li
297.6 174.6 li
cp
1 1 1 rgb
ef
/1 
[/DeviceGray] /CSA add_res
0 gry
true set_gvm
%ADOBeginSubsetFont: GHLBAA+TT7Ao00 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /GHLBAA+TT7Ao00 def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.00390625 0 0 0.00390625 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /g21 put
dup 2 /g19 put
dup 3 /g26 put
dup 4 /g17 put
def
/FontBBox {0 0 464 699} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/g21 <1C60D8A8C9B8E90E94EB6605A69ADCF2397A5676127B7B083841EE4DEA
BEAFB6766FAC1FEB80B555B5C3CC7BD49C020A49AC731DAC60213D64537CDB5D
EB3CE210712A21072825190F1628ACB5D9098638891717489AD67AF75DFC2F94
B24CDBAB213280FEABBF17701A3E3D3906D80F7751E53A95B474BEFCBE69625A
7947971DB32180A5A5D9DA78076BEB2ECF5809DC299555BFD345788F83B925A5
9901FE7E5543B10C0190E9C8197084F3D6ED7F1F3F136BCDCA562A5030F9FDD3
5400B2949638> |-
/g19 <1C60D8A8C9B8E90EBF3ED1248B956B6FC63132969FD197A9FA3F43496F
C972E73BF91B1B542B3B40D9252B900077CFF646ABD3FBA80136D2430E5A33BB
2673E48221DE394C36D0B8CE8A29BAB2AC9D12D38D5D63B765BE201B6943F558
FB255A520497FEADB78E5432142390299CBE8F8D06E5477889DEAF27FCCB5BC2
0D592E889FB4C907F8> |-
/g26 <1C60D8A8C9B8E90E843C4E6167D0130019E2E1BD4FF9461A25B8E564BD
11303E63B6CA0DE6209FC5A40578D863C416EC54397D344D960B8463EE583673
06B3D30D3369CBC4AC87B2B35C4A4E25B8FD026CCAE144CD2A6373E45F13CD3B
464AC26D336FD3553A1EBAFCF25A23511177> |-
/g17 <1C60D8A8C9B8E90EDE455613A5EAB84660456C1C919004D6FDAEE53113
4D17CBBB150537ED9B828556D0CBBAC541637A5715F20074A299F0A750ED18F1
D67ECD9B6EB0C62FBEBB> |-
/.notdef <1C60D8A8C9C4A637> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/NCXQLX+TT7Ao00 /GHLBAA+TT7Ao00 findfont ct_VMDictPut
/NCXQLX+TT7Ao00*1 
[/.notdef /g21 /g19 /g26 /g17 251{/.notdef}rp]
NCXQLX+TT7Ao00 nf
NCXQLX+TT7Ao00*1 [15.96 0 0 -15.96 0 0 ]msf
297.84 189 mo
(\001\002\003)
[8.04437 8.0444 0 ]xsh
297.6 189.24 mo
(\001\002\003\001\002\003)
[8.04437 8.0444 -15.8356 8.0444 8.04437 0 ]xsh
297.6 189 mo
(\001\002\003\004)
[8.04437 8.0444 8.40436 0 ]xsh
321.84 189.24 mo
(\004\004)
[.244385 0 ]xsh
321.84 189 mo
(\004\002\002)
[8.28439 8.04437 0 ]xsh
329.88 189.24 mo
(\002\002\002\002)
[8.04437 -7.79559 8.04437 0 ]xsh
329.88 189 mo
(\002\002)
[8.04437 0 ]xsh
217.56 331.92 mo
217.56 327.6 221.16 324.12 225.48 324.12 cv
229.8 324.12 233.28 327.6 233.28 331.92 cv
233.28 336.24 229.8 339.84 225.48 339.84 cv
221.16 339.84 217.56 336.24 217.56 331.92 cv
1 1 1 rgb
ef
1.49999 lw
217.56 331.92 mo
217.56 327.6 221.16 324.12 225.48 324.12 cv
229.8 324.12 233.28 327.6 233.28 331.92 cv
233.28 336.24 229.8 339.84 225.48 339.84 cv
221.16 339.84 217.56 336.24 217.56 331.92 cv
cp
0 0 0 rgb
@
249 331.92 mo
249 327.6 252.6 324.12 256.92 324.12 cv
261.24 324.12 264.72 327.6 264.72 331.92 cv
264.72 336.24 261.24 339.84 256.92 339.84 cv
252.6 339.84 249 336.24 249 331.92 cv
1 1 1 rgb
ef
249 331.92 mo
249 327.6 252.6 324.12 256.92 324.12 cv
261.24 324.12 264.72 327.6 264.72 331.92 cv
264.72 336.24 261.24 339.84 256.92 339.84 cv
252.6 339.84 249 336.24 249 331.92 cv
cp
0 0 0 rgb
@
280.44 331.92 mo
280.44 327.6 284.04 324.12 288.36 324.12 cv
292.68 324.12 296.16 327.6 296.16 331.92 cv
296.16 336.24 292.68 339.84 288.36 339.84 cv
284.04 339.84 280.44 336.24 280.44 331.92 cv
1 1 1 rgb
ef
280.44 331.92 mo
280.44 327.6 284.04 324.12 288.36 324.12 cv
292.68 324.12 296.16 327.6 296.16 331.92 cv
296.16 336.24 292.68 339.84 288.36 339.84 cv
284.04 339.84 280.44 336.24 280.44 331.92 cv
cp
0 0 0 rgb
@
311.88 331.92 mo
311.88 327.6 315.48 324.12 319.8 324.12 cv
324.12 324.12 327.6 327.6 327.6 331.92 cv
327.6 336.24 324.12 339.84 319.8 339.84 cv
315.48 339.84 311.88 336.24 311.88 331.92 cv
1 1 1 rgb
ef
311.88 331.92 mo
311.88 327.6 315.48 324.12 319.8 324.12 cv
324.12 324.12 327.6 327.6 327.6 331.92 cv
327.6 336.24 324.12 339.84 319.8 339.84 cv
315.48 339.84 311.88 336.24 311.88 331.92 cv
cp
0 0 0 rgb
@
343.32 331.92 mo
343.32 327.6 346.92 324.12 351.24 324.12 cv
355.56 324.12 359.04 327.6 359.04 331.92 cv
359.04 336.24 355.56 339.84 351.24 339.84 cv
346.92 339.84 343.32 336.24 343.32 331.92 cv
1 1 1 rgb
ef
343.32 331.92 mo
343.32 327.6 346.92 324.12 351.24 324.12 cv
355.56 324.12 359.04 327.6 359.04 331.92 cv
359.04 336.24 355.56 339.84 351.24 339.84 cv
346.92 339.84 343.32 336.24 343.32 331.92 cv
cp
0 0 0 rgb
@
374.76 331.92 mo
374.76 327.6 378.36 324.12 382.68 324.12 cv
387 324.12 390.48 327.6 390.48 331.92 cv
390.48 336.24 387 339.84 382.68 339.84 cv
378.36 339.84 374.76 336.24 374.76 331.92 cv
1 1 1 rgb
ef
374.76 331.92 mo
374.76 327.6 378.36 324.12 382.68 324.12 cv
387 324.12 390.48 327.6 390.48 331.92 cv
390.48 336.24 387 339.84 382.68 339.84 cv
378.36 339.84 374.76 336.24 374.76 331.92 cv
cp
0 0 0 rgb
@
406.2 331.92 mo
406.2 327.6 409.68 324.12 414.12 324.12 cv
418.44 324.12 421.92 327.6 421.92 331.92 cv
421.92 336.24 418.44 339.84 414.12 339.84 cv
409.68 339.84 406.2 336.24 406.2 331.92 cv
1 1 1 rgb
ef
406.2 331.92 mo
406.2 327.6 409.68 324.12 414.12 324.12 cv
418.44 324.12 421.92 327.6 421.92 331.92 cv
421.92 336.24 418.44 339.84 414.12 339.84 cv
409.68 339.84 406.2 336.24 406.2 331.92 cv
cp
0 0 0 rgb
@
437.64 331.92 mo
437.64 327.6 441.12 324.12 445.56 324.12 cv
449.88 324.12 453.36 327.6 453.36 331.92 cv
453.36 336.24 449.88 339.84 445.56 339.84 cv
441.12 339.84 437.64 336.24 437.64 331.92 cv
1 1 1 rgb
ef
437.64 331.92 mo
437.64 327.6 441.12 324.12 445.56 324.12 cv
449.88 324.12 453.36 327.6 453.36 331.92 cv
453.36 336.24 449.88 339.84 445.56 339.84 cv
441.12 339.84 437.64 336.24 437.64 331.92 cv
cp
0 0 0 rgb
@
512.64 332.28 mo
512.64 327.96 516.12 324.48 520.44 324.48 cv
524.88 324.48 528.36 327.96 528.36 332.28 cv
528.36 336.6 524.88 340.2 520.44 340.2 cv
516.12 340.2 512.64 336.6 512.64 332.28 cv
1 1 1 rgb
ef
512.64 332.28 mo
512.64 327.96 516.12 324.48 520.44 324.48 cv
524.88 324.48 528.36 327.96 528.36 332.28 cv
528.36 336.6 524.88 340.2 520.44 340.2 cv
516.12 340.2 512.64 336.6 512.64 332.28 cv
cp
0 0 0 rgb
@
486 332.28 mo
486 327.96 489.48 324.48 493.92 324.48 cv
498.24 324.48 501.72 327.96 501.72 332.28 cv
501.72 336.6 498.24 340.2 493.92 340.2 cv
489.48 340.2 486 336.6 486 332.28 cv
1 1 1 rgb
ef
486 332.28 mo
486 327.96 489.48 324.48 493.92 324.48 cv
498.24 324.48 501.72 327.96 501.72 332.28 cv
501.72 336.6 498.24 340.2 493.92 340.2 cv
489.48 340.2 486 336.6 486 332.28 cv
cp
0 0 0 rgb
@
0 gry
%ADOBeginSubsetFont: NCXQLY+ Initial
10 dict begin
ct_T3Defs
/FontType 3 def
/FontName /NCXQLY+ def
/FontMatrix [0.0133 0 0 -0.0133 0 0 ] def
/FontBBox [0 -0.0133 3.3333 0.7733 ] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /O put
dup 33 /U put
dup 34 /T put
dup 35 /one put
dup 36 /two put
dup 37 /three put
dup 38 /four put
dup 39 /five put
dup 40 /six put
dup 41 /seven put
dup 42 /eight put
dup 43 /I put
dup 44 /N put
 def
/GlyphProcs 256 dict begin
/.notdef {250 0 0 0 250 0 setcachedevice
}bind def
/O {61 0 3 -58 58 1 setcachedevice
3 1 mo
58 1 li
58 -58 li
3 -58 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[55 0 0 59 3 791 ]ct
<<
/T 1
/W 55 
/H 59 
/M[55 0 0 -59 0 59 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J,fQL2u<X[![#27ODk=$*=%0`TYLPT3WAN!#NF'c6s:?+5K08A.'u)=-%DR30\@coru?]r-..OLJnb:P
3$V75,Jl9fJ]6YG.6HN&#FCM4E_#*fQOTh4j:rLlri#t"<N<7eHlePYKNBCa)ZTrSA$]:<euL*kcYKi@
m$0&#C9^j>h6/[1<B?73J)BJJ$7u1/5(_bUo9cW,rns,:+L)eHVBZkn8gKQL`-OKTN("r9#Saij5g7"-
p1l5b;#p~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/U {58 0 6 -57 52 1 setcachedevice
6 1 mo
52 1 li
52 -57 li
6 -57 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[46 0 0 58 6 791 ]ct
<<
/T 1
/W 46 
/H 58 
/M[46 0 0 -58 0 58 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J3Vlj!!)un!eN_3&6M%))%2-cU+hsN;BZd1`1mo(bZZk?O@SA/kp1FH*0`qS;Ah$_=XTKUjq%4)&H;Ho
c)24O"Pj"SSPS1-62UEW!J(d=huFcDrdY*cg]@8:;PsJq5M,u4c"a"VW)m\uRPc:o5b?OSPtI8R^4:f2
B93Z~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/T {47 0 1 -57 46 0 setcachedevice
1 0 mo
46 0 li
46 -57 li
1 -57 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[45 0 0 57 1 792 ]ct
<<
/T 1
/W 45 
/H 57 
/M[45 0 0 -57 0 57 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J3Vsg-c?K$#(OHsd&7p>%h"%XTeR)Y!YZ<+`T%Q/bMk5lO%/1bf_fbU-'?=1;Meqe>pPcZV@ttSekJ)f
c6]egeAchtSBtniC)$N&0S"Z~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/one {46 0 6 -58 42 0 setcachedevice
6 0 mo
42 0 li
42 -58 li
6 -58 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[36 0 0 58 6 792 ]ct
<<
/T 1
/W 36 
/H 58 
/M[36 0 0 -58 0 58 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J,fQLp_4&7"V8Gb!&sg(rsaTK!"dd^;Blp57A=d`HmulPK#f'4-la^0+d5JD;OM'i>pGZZ-1Z>GenI(.
bi^crgu;g-Qc1'8$5F1&7Y]>>FBW5sMZE~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/two {46 0 4 -58 42 0 setcachedevice
4 0 mo
42 0 li
42 -58 li
4 -58 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[38 0 0 58 4 792 ]ct
<<
/T 1
/W 38 
/H 58 
/M[38 0 0 -58 0 58 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J,fRfoDejk5C^<G!#PP2qu?i:?f1q^8HBQ\YTj\Q"E!*=&&'5@JGTBc,_J>=!Q["op_]=3!YAf;ndPhn
9d_`R][hEk+20)bq@pAq!'e>s1oOt@3<k&=+OM*h!$;>r7;&kcCd(cXPLLa53dk02<JnV#ou]^J!<98q
XAl3q)R!nX9eFfX]Ll1QHseX*/.N<u%Dq*I+9~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/three {46 0 6 -58 42 1 setcachedevice
6 1 mo
42 1 li
42 -58 li
6 -58 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[36 0 0 59 6 791 ]ct
<<
/T 1
/W 36 
/H 59 
/M[36 0 0 -59 0 59 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J,fiCJ,fQRs*p[A!Vf$6"UK\ji=F"VrV[I\`Zk`iq>gO%*^\cN!It.l,7jhTni/0@JM!0RVD@Ch^1@Y:
6=@+0`1@>IT>d['pnSr1"J\>_dg=PBiBs?V,4oQm((iN\9r2gnQ#Hg)Y<V:ECD[,l6*f21QA@,@i<k4I
-2/6%S\Z2#0Hh!cea3BaN8ERg\>AVc+0\;9[cf7F~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/four {46 0 1 -57 44 0 setcachedevice
1 0 mo
44 0 li
44 -57 li
1 -57 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[43 0 0 57 1 792 ]ct
<<
/T 1
/W 43 
/H 57 
/M[43 0 0 -57 0 57 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J,g]fpOieP!J3UfE0q=l$N^FJ!!)eY;B>fK`1o&,r(-i/M*Ks\KD[o)%fsG@YmFAl%fDU1h\-QKc5n'P
9LnLWeFFZ1?qar"(jl2^.tdmKE4T!a;b[6bl2^S?:%;&M<Zn]Yh*Q[!O[tuX)\nM8A$T8h2QJF,c"s`&
VD'Nk6KK#q>q[!ujmN'OW'ET~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/five {46 0 6 -57 41 1 setcachedevice
6 1 mo
41 1 li
41 -57 li
6 -57 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[35 0 0 58 6 791 ]ct
<<
/T 1
/W 35 
/H 58 
/M[35 0 0 -58 0 58 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J.LQ,0E_^h#(OHsE0s$C%h".[+p7Ri!\G+E6"7*DghJV^N^r-8#kWjG-&"Q-n2(8._%(i[V,1gs7O!A9
+:!E&)ZhQ4J'WWFq@$I9s-J69FGR=WOo_E[.MV`=:+]MG<,'k9%(;23T2?F=)?KsR/;;d8F')\I(GUW_
@<2-J[Xg<;dU40~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/six {46 0 4 -58 44 1 setcachedevice
4 1 mo
44 1 li
44 -58 li
4 -58 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[40 0 0 59 4 791 ]ct
<<
/T 1
/W 40 
/H 59 
/M[40 0 0 -59 0 59 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J,fQLp\Y9sIt,*2!&sg$!!e7qKCKKQr[A,.6X_)Se%ut"!6:eL#_N0^&3rLROC3G3$m1g$KC?l8rb2EU
^*^1b&cNM.GQZo'j8?FdnV3\Iml5(`rqD/W,>ahuihlXS_b`#_`>SVZMV%!S#Q3j7AH5ll:e5`7f+`g4
TPs^m`nl395pnRWp$Q6HYfn;paIF:H"KfBiQ<8f0),ZDm5S9th@W>edcf:1U#Q~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/seven {46 0 3 -57 43 0 setcachedevice
3 0 mo
43 0 li
43 -57 li
3 -57 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[40 0 0 57 3 792 ]ct
<<
/T 1
/W 40 
/H 57 
/M[40 0 0 -57 0 57 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J3Vsg3$]7K#D>A"cq!R,*"RKcJ-#G(3'R+o&*"5be7ISO5KDa'pB4(f-&5(N^_ckL="T1-hrkB*c>,6:
!T3Dre4:YjLX75b=r_.2*KEV)&fCh.!<8rhJ.fslZ<RBt<U2GcFR!j/LX,*<+T2YjA>@Q:8,HRATdGn%
-1Zit~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/eight {46 0 3 -58 42 1 setcachedevice
3 1 mo
42 1 li
42 -58 li
3 -58 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[39 0 0 59 3 791 ]ct
<<
/T 1
/W 39 
/H 59 
/M[39 0 0 -59 0 59 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J,fR&oDejk%tD;9_tX')%0),KU(?qt%OU*9`82&]KPi.3&&6IFOSh*;r#`ZR&t)Fr;$miW^_7=X_IYQn
94kLJ>_5ZmIt/X2ko=.2kDD^&#RDD>KaiaQ@+#ho)#jQ#;eS"d,\A17KJDBP#n.:$5DMR:Vt\09>^pul
hj4Y=qSriQ<C-AK`SU?<]3JmR40;+R-NHa'n2Wmc)%`H2A!T1K-79>&9(7?:bSC6~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/I {25 0 2 -57 24 0 setcachedevice
2 0 mo
24 0 li
24 -57 li
2 -57 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[22 0 0 57 2 792 ]ct
<<
/T 1
/W 22 
/H 57 
/M[22 0 0 -57 0 57 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J3Vr[a:o6l"b]2#:hS],rd]bl+n6DF:+[*;7:S&se93hoNQ>VX.0PYE%$ShBE"E~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/N {64 0 7 -57 57 0 setcachedevice
7 0 mo
57 0 li
57 -57 li
7 -57 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[50 0 0 57 7 792 ]ct
<<
/T 1
/W 50 
/H 57 
/M[50 0 0 -57 0 57 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J3Vok!!!3%^jj*AOD%#X(C,H-TWnb"4qR`Z7,ma(A,ZuWO#SBqq%RuNn<(j=coEp4>9enn?1D'^dNI_3
7pL"YeFFa@P"00q#j[(<76eL8'W?Y7If,pqhpiX91`l[kJ`#Z0D/-TeDuee^)Jg=C@'`cs&,2'`fkNac
D+"'bcKej<#NOEn]rLsSX]hf./)6:8C:3%TZ602J&3n4p03=(W,-R65Ag$RS~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
currentdict end def FontName currentdict end definefont pop
%ADOEndSubsetFont
/NCXQLZ+ /NCXQLY+ findfont ct_VMDictPut
/NCXQLZ+*1 
[32{/.notdef}rp /O /U /T /one /two /three /four 
/five /six /seven /eight /I /N 211{/.notdef}rp]
NCXQLZ+ nf
NCXQLZ+*1 [9 0 0 -9 0 0 ]msf
212.76 317.52 mo
( !"# !"$ !"%)
[7.30164 7.06253 5.50597 11.5062 7.30165 7.06253 5.50595 11.5062 7.30164 7.06253 5.50595 0 
]xsh
307.08 317.76 mo
( !"&)
[7.30167 7.06253 5.50595 0 ]xsh
338.52 317.52 mo
( !"' !"\( !"\) !"*+,#+,$)
[7.30167 7.06253 5.50595 11.5062 7.30164 7.06253 5.50598 11.5062 7.30167 7.06253 5.50595 11.5062 
7.30161 7.06253 5.50598 34.3062 2.99252 7.54077 14.7462 2.99255 7.66077 0 ]xsh
%ADOBeginSubsetFont: NCXQMA+ Initial
10 dict begin
ct_T3Defs
/FontType 3 def
/FontName /NCXQMA+ def
/FontMatrix [0.0121 0 0 -0.0121 0 0 ] def
/FontBBox [0 -0.1084 3.0121 0.8193 ] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 32 /g2616 put
dup 33 /g14037 put
dup 34 /g18431 put
dup 35 /g4480 put
dup 36 /g13038 put
dup 37 /g4598 put
dup 38 /g1306 put
dup 39 /g3224 put
dup 40 /g7481 put
dup 41 /g19584 put
dup 42 /g1948 put
dup 43 /g2600 put
 def
/GlyphProcs 256 dict begin
/.notdef {250 0 0 0 250 0 setcachedevice
}bind def
/g2616 {83 0 4 -68 79 7 setcachedevice
4 7 mo
79 7 li
79 -68 li
4 -68 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[75 0 0 75 4 785 ]ct
<<
/T 1
/W 75 
/H 75 
/M[75 0 0 -75 0 75 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J,g]W!/(gk!XqBQ_<=i,Igpr>fF\5^!\"Z\5N<:LZmZ"ONkrLa(n;uYn8L`[mK8-AJ9Zg$fE93.I/sb1
6c&9>n,OORJY)oBGq9j.!!15M^_acd!q:iai)J>cXos3+bb?e:Zj8lb!(5[0qG[fU!X$t&E%i8H"]BmO
?h.C-#S;Kc:Z,ZtrOTrL*s:EkRlguU#JnmHpq0c71]q,-nWu3,p]*"#bpJOF5Q[VjYXUHQ4XQHt5diu?
[Yb4)a'd#!/>*H405$!56+7O;hWb:MhJ`0Mc1_j'_W&r;I'-6IS'0u7pss=Q9:=Apof@FnSHEXIk1DU6
/cV$DWrN/CqM8)R~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/g14037 {83 0 3 -64 80 9 setcachedevice
3 9 mo
80 9 li
80 -64 li
3 -64 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[77 0 0 73 3 783 ]ct
<<
/T 1
/W 77 
/H 73 
/M[77 0 0 -73 0 73 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J,g]X#S\$W^]4iecrY_tp]?&%+A_b/p]c8"%jH!i*$>61JNb6m32BFTGQ8d1O[o&8;]QCkA^[FY`_eL[
9r;t<Pi?sIPYPku)>ro<6^Q3a'UdJIPt%Xu.J2n>rVlSdJ1B*,SP#YNUen%6.YWV`?F*46;sRF%"FR[]
UW*[u!ojH`6L/XGeR&%U]YUCB86uf+"iEj8'V$d3"ce=J+Agi9!!AG*A\]0VrbFM8bCF['/IR1eQIBDS
i#PPl=07Nui>SKqo4bYb0I$;UkT2H.df9Ac!'Hm/!X$.rZMR`en.(UF!&@XQ^_d(:o]3.ThuJ69l7aDI
r@i[Kqu@-*!.G=n6,JRImZ@cW!u:M(rBLo*~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/g18431 {83 0 3 -67 80 6 setcachedevice
3 6 mo
80 6 li
80 -67 li
3 -67 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[77 0 0 73 3 786 ]ct
<<
/T 1
/W 77 
/H 73 
/M[77 0 0 -73 0 73 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J,g]g0ED4\^k+Zl0Ls%nrssn"+jgPm2?sSI_W*A\'Oj-BO2h548,R[''U)."!!uV^>9TA,-#uR6dT8)i
8>-SR":tP8JH0>u!'11:!XGqTO[fHOQOe<Okk.!5<WjOrJ8!:aKk>N15#u3TlP*7=6(W_q'q7l&nSA2/
J/8#N`nbUE>lXjDD9hZqTZJD0]G:GEFhH\:=3J#npO1$A/?oU##7H?qjo>Vnp,7tP!Dr2LI2*u!!"[ZF
dRi*jQTY<R1t=[RI]9a(J,n'cY2_[EJo+$E%<XhL+/cm/!6V)?~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/g4480 {83 0 4 -66 79 8 setcachedevice
4 8 mo
79 8 li
79 -66 li
4 -66 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[75 0 0 74 4 784 ]ct
<<
/T 1
/W 75 
/H 74 
/M[75 0 0 -74 0 74 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J,g]g0E;^l#7!QQJbW1QIXlt[hsi\$!X'U&7:8rZ+oT4d!'fJiTF:T]#C&c?ni0Hp+UoMa!!e>\##bs3
b95_gHn%,`#R;UUaeUaV+,5R6:qBm?5=h*i+S+bra<(Km60dq_j_>!KY<\`R&.AF;)72(.p5#Jo@0<XL
DD8,^L?2IK<Gtrch9tnB^gF:SC_d6^LOrfO2uG9e&TF.*,T/&ci.!_Ca=V[!*&J0QS3J@(M3Qj997VN
~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/g13038 {83 0 3 -68 79 9 setcachedevice
3 9 mo
79 9 li
79 -68 li
3 -68 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[76 0 0 77 3 783 ]ct
<<
/T 1
/W 76 
/H 77 
/M[76 0 0 -77 0 77 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J,g]g0Z4A"!C/ofcsR6u"s75<^b<cV-3Y'<_]KGgA3'l%M+<(/#eRkq*rnT7mf;FAGq"Kh+_T^51)`@f
^ZSD^!'5"YS\NMOF:5m3#*H^:lkb6D;$$dI%i"L5%DqTo<<+ZgKR-3oGW6uR#Wp#c&Z!=FD]#^'!unAT
k]=8,!Q+H.cJQtq$ec)@P!RreaUFc)+WOK.FR1ses#RjA5X5AJmSF,g#LIK>=?[?"LJV@J*<nQW@a^=1
clbH/=0:$$[Er;D;^VXP!!2],**PH8Ha!Kk\DHK4i8MtaU%aK'#8)o,?6&BdGWtVGF6.?am5ME^mWZ7H
,O<-jhiAh+hM;nc3QZckX-]7(HEU?=J:@L5%5[M@W[Mr@U-MKk%e)W<oEt!%:SZnL"->imLBA)T`Y_%f
fYJ!/!X(K<(_HO9s1AmF`tLOS6q\+[^jK2bJFIq_J#lL4Ii?3Ir,C(.+F;B7WXWHIJUiOh!W~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/g4598 {83 0 4 -68 78 6 setcachedevice
4 6 mo
78 6 li
78 -68 li
4 -68 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[74 0 0 74 4 786 ]ct
<<
/T 1
/W 74 
/H 74 
/M[74 0 0 -74 0 74 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J,g]W"9]2D!cUH`a,!\'Gn#<8U&Y2k:+Hkd_-kIm'O1VDJO]\?p_\$=!XD!M5Ss@,>lT9R-'J(Gb!cM!
TE'%X)>F4o!!&\<J,gWM"-!:%'Nj8t&f:Vh!V.^Bn,iiQ^o3%H*!h$4IK1JJC@qE(I'HR^liZ_]_Zg.S
%tH\e_>$+pdbnL`M"!Vk!E4ago7RM]:&lBO&GR"^'/>OMWPBDp4u==Y?>-R)#%>:XDuqXH)K]U\Fgee7
5`9^jrD'T</2lDoNeeMP=?pf?$_Eu'T=uV6c,HG)s+*b8O=b,I9JD$MmnkJera/6bc$D#\FN+PGQX+:=
-pB+(S,dXT(s$Ci-9n)E@&+&F1*Zk;^p:`cV5*[9\rSU9NW[?8I/P1l.i.?A:fH#01T2!0#/X2I,6bhY
UbIqK:n00L6-uu+%)_TL.ZVEF(d=B?ko<fVJET)ITchZj'HA5d#Q~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/g1306 {83 0 4 -68 79 8 setcachedevice
4 8 mo
79 8 li
79 -68 li
4 -68 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[75 0 0 76 4 784 ]ct
<<
/T 1
/W 75 
/H 76 
/M[75 0 0 -76 0 76 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J,fQM#S\$_(kY.Bd$QNc!!.fS#ODEt!Z;IJ0I$!6">KcU3(KW3LgfiW4GH$B6g78MIk:X*im:L0_?D[r
9d\=)!'1GhNdq/s!.<(C!hn!!5WI:$M*V6mBVG99*<60A<Mi`Q\,ZsmR=i9e$$6s%'pZUDG(9_$D\eb_
V:""6asAsCaWO*`m06R;N>Nd>n,prn+e$5d^]B.LFocU&Z(N!@"c"!9!%@ZE\,m83"/+[?b0<tS!7FhS
5j^]1MlYFUVI@_/*eab;D,:9..)Sd^5XOBu%Jp4_):O+\cs"(t.<`s7?6'J7!TA^qaSQuVm-^37*mf9.
3&am;jf)1+FRMXC`S$XUqP4&a_#)lt^HJ4p_>i5XUCS8no=Sgo*q;)P-k=*NkZA&f+AGa1!2&I*<55'j
W[OF!l.Vm-T?rFFX![>Z9&V0gqDtRO$<d@d.PC2m#QWupeG_c]3YKH5,iU#O+GaJ.~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/g3224 {83 0 3 -65 79 6 setcachedevice
3 6 mo
79 6 li
79 -65 li
3 -65 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[76 0 0 71 3 786 ]ct
<<
/T 1
/W 76 
/H 71 
/M[76 0 0 -71 0 71 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J,g]g+FjFq!sS`*BE5gJ%g*&(QiZDk!X'$`^YBEWe6Xp"N]86PkhJd"#=&CNZ?]-F!@j=-,1?7fb#pWk
9P)[%`:A+0T?a8HH476;09"%f1$AE83A[%$W%A#I3X7,:%KhK:,XMVt!*C@OL_9Ob+.9p[(1;IjeH14l
/<DOniY:;\>(A7+!!U2JJH5.h('U'i)8ou5=I__[L'M*QD=[<!)^f:!AF'l?RI^5!\(uQNbLVk?C'3Z)
pA8Y5d;%:N[$CD'%Jabn^jn*6Sd5E#5MTe2ZN'uSs1VY:C]VL!7":0*3:rcsJ#@8kZ-WJ0!:h,$Yf\tS
l5PAo_"(1srg4M)?1+Kc4^Gfm^Zk*Bq#90SO5K[-^TZ\IN0k*F#,]2^C]+7K&"Ee,+`AP/b90M@0&iO;
#Q~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/g7481 {83 0 4 -68 79 8 setcachedevice
4 8 mo
79 8 li
79 -68 li
4 -68 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[75 0 0 76 4 784 ]ct
<<
/T 1
/W 75 
/H 76 
/M[75 0 0 -76 0 76 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J,g]W!X&uB!]WL(a2h3hrsaNDck-NT5Q^kA4sMa8KGXp_JW:u'#S]#u#B2rfZ?\t@!tTn*AlBrUrb"#p
8:U^8S2<GnKa6T;!W<FT6^'lO0W<JX"&4ILA:OjeH<L?8^ju)S"F^aaRDp@Wq40bO5Cle,_ti\/f57U>
&,->d9%-q0h&nsAIHUY9BA\7'qsZdpGCbORo'4<eaYKs11%Q<qK,8F.YVPdr3Wh;B#>X_Rbn_E&,0tcc
3h!4K"g6;6+PR<oro:E@hmPP)Id:^^i+][5/`,ZI^Z3X*Hsl+jB+kgC\b4gENdC`.E9Nj\g^_^6d-)V1
L_qlP!<~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/g19584 {83 0 9 -65 78 8 setcachedevice
9 8 mo
78 8 li
78 -65 li
9 -65 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[69 0 0 73 9 784 ]ct
<<
/T 1
/W 69 
/H 73 
/M[69 0 0 -73 0 73 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J,g]g0ED.R^]4cD&2sRihuGkATKj?@rVl^"`LlUL"Bk[@Ma%1Ra1skd,_nsA!#TM2.4UWSjc^!ec6kJg
9dF+)"R5G=T)d4P)B@U'#67Q!'WOkFnIgpJjg>BDZl)T'eZ0?"^iHn9$s2M5)2(0CA;T!>p/rD&dj"rq
m(b]ImY`U%!,&b9FS7S(!)@J'3Cj;S'Z(gjphSFlnVb<%j-]a]?RI1R#I&j)^]8kRP=&.0#j-11*RXpE
`W-DD5QEbDjVhWZ*a>Y.A'c&[jHsqUhFWKXL_K+U(]Xdai!8%D9HSpYj)SOVmRBF(eg+\uKU<;$P0Q;m
IZ0SM",>S[TKZV$RK</0V,Aij1iRnpI%eIVho^0cTb!?emQR:gI&+0rP!fDEjoa\)!,1-C![FV]-M3Ag
EWkSK:ZLO%,gULmJM&Trk^kg.+p@,K5QUu~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/g1948 {83 0 6 -67 78 8 setcachedevice
6 8 mo
78 8 li
78 -67 li
6 -67 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[72 0 0 75 6 784 ]ct
<<
/T 1
/W 72 
/H 75 
/M[72 0 0 -75 0 75 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J,g]g-3Oee!.7)jDobe+!-j2[!!`d/1+<HX7,Zu?aPo,eO$S:N+ljUJ&e7L'!!u=9#:g<N_!k0BapJZ3
K?sT)`#<^t"4#h5p_;!_6i[5FYVGbW?Nr\ZJ24VT6ieNb6=<fl'M8O0X4Mk;$@E2M:8NIGn2_!gKg1+j
l#_I[!i[o0cn!OK*@;YL!(LI`fG"8lJ>qL88+m*9YC@Y./YF$/IJl<mggBf6-lq8o"4\^fH8SuZ<4Do>
(HN6OOUAG3O3jp+dLijf"=%n/`2Zru!)6kPcogI<8#K?0=,Op+q6tpn2R#7YcDA[kn_c_0(6ee@V<Vr(
\b/m5%tFFkhOe<W]RTW71E[3^r!-EH_#EgUbt>A"TPU>*h&slR%cnhm")NN2+9~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
/g2600 {83 0 6 -65 72 7 setcachedevice
6 7 mo
72 7 li
72 -65 li
6 -65 li
cp
false sop
gsave
clp
[1 0 0 -1 0 792 ]ct
[66 0 0 72 6 785 ]ct
<<
/T 1
/W 66 
/H 72 
/M[66 0 0 -72 0 72 ]
/MD false
/BC 1 
/D[1 0 ]
/DS 
<~J,g]g0E<:'":d`UA)I=jrssoMci=?167.)4LZ)&PoP=OKNQ<8@-p3Y!-@s;aOm,+<57.M9i8F51TK^/O
TAm!Zkl*($NeSg"as;_"6_aV_&0Mso!=8`,fFo\6*PjKA`#]YLKjI&FWRp'..]&0C:9n!%2L1Rbd;6$i
D0ILQ[c(i0?1)m:Xi<Y0LYFKnqpkE1I)=iVdV/jl:IgT/+HX\$;AGLKJ_gXrKDk`fcUPh@aOhS+$3@jc
?lIg<VZ?~>
/LZWDecode filter
/O 1
>>
%%BeginBinary: 1
img
%%EndBinary
grestore
np
f
}bind def
currentdict end def FontName currentdict end definefont pop
%ADOEndSubsetFont
/NCXQMB+ /NCXQMA+ findfont ct_VMDictPut
/NCXQMB+*1 
[32{/.notdef}rp /g2616 /g14037 /g18431 /g4480 /g13038 /g4598 /g1306 
/g3224 /g7481 /g19584 /g1948 /g2600 212{/.notdef}rp]
NCXQMB+ nf
NCXQMB+*1 [9.93756 0 0 -9.93756 0 0 ]msf
146.76 251.04 mo
( !"#$%&'\(\)*+)
[9.92027 10.0403 9.92027 9.92026 10.0403 9.92027 9.92027 10.0403 9.92027 9.92027 10.0403 0 
]xsh
true set_gvm
%ADOBeginSubsetFont: QXTAAA+TT7Do00 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /QXTAAA+TT7Do00 def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.00390625 0 0 0.00390625 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /g1323 put
dup 2 /g5951 put
dup 3 /g5311 put
dup 4 /g2119 put
dup 5 /g2561 put
dup 6 /g11087 put
dup 7 /g3224 put
def
/FontBBox {0 -101 957 820} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
8 dict dup begin
/g1323 <1C60D8A8C9B86A966ADF8954AE3CACC46CB26C77379018C488654D0E
E68A0DA8B9EFCDDF898149226B844D05C9A2DE98D29EED9C488FF54ECAD5DB2B
A1213215CC17F756A0806C9DC809EFF052200160DECA077E49257F030D42A5FA
D0C645C0C8D25BA2B05FADEAD954E90A520E614864441321735EFDFC08A7773A
487882A2B06B0A7F3295C233574B09584D6BD5C664C76D737DD92360E1C72D93
55D957A8C1FBBC4EB84DC5ADCA00304EE05115> |-
/g5951 <1C60D8A8C9B86A96743DE07753E1E9F93B65BC32E1BA872A986F6656
A57F45928CD2AE7B6B3201A394579AFB7CE2A75BAF32A6AF74CB824292F2A07C
D78879C624DB8D76022EBB2B3121403FFAA118B5C0DC6C114D1B3AC515BBEFDE
DE90B12C58D040BEBF698490EF1CE532A312EFF808F4BEA0117A56E961650B49
178C7A17421BC097C48C8E0C11271A2B8B4197B6B5E6E166E0BE8E4566EF4436
C54EA839EA20EFA5AC56CFF06E628E1BB9C3B876382698CE68A10101AF92E27D
2F479DB35739E075F5E42248F0E4E068C7A18178FC43F366CD1CB32A0627E2F6
F808E0EFDF1DF58433442E4343B3F3955B275526F3013FAEE3A2B66B2E29610F
FCE141CBCE3BFE8A2FA9C26EA3C84CBC7C9646AC296AB4385D2034A2A8B9C872
29A278EFD91E56F4D8258DD18332844180354C896DBFA4510961C727C03666A9
F067979D94DD70042A344F00E78BCBA0A69CB1989C392B6E61AF5AFF0AEED30F
B0E66E344DB434589623A03E1E4A4B036EDCDE6C78563F09FB7280391B74F66F
5FE2C0C2C121722529EB99EA026D9A60AA91CB64203E2BD339E071E2EAE90CFE
2669> |-
/g5311 <1C60D8A8C9B86A96309327B6B80864BA9F6FD8306D5BD5539D1AE359
BCF283E536D885F95737ED3CEA65913769806481C22A0F1B510210457963013A
F9C9E6199E37D7292513B970165818CF677BFDC3C7B581D94C92771493BF6F19
E2A2CDC1AA45F74B4658F4005A83E15C08438226D165CFF0F362230EBC837C3D
F589D96504A796868206AD0AE15FF6C61DBDFD3D9AFEFC12647C414CAA89E7BA
7F7B1EA99B44557B30E1044564C0D75F17F198D3D47FFB4CC2C5F807B8AE70C8
B03918B2646A992CB182A40ED4373BF9FBFC48A595724C907BC1193EF0326F09
42DB69C65168A068377F744C37599A73322343980BBE05AE5A1A4F5FAFEC22E5
F3AE260B8D20955374D5CA1BD212005A6361> |-
/g2119 <1C60D8A8C9B86A9622EDC6C572971F1C3D54FFE7AD2BFB501F28470D
80E22ABA141F5C2B7DA4B92094C8D337B3B3FD7DD5411C8363FA5C5AF6D55FEA
EEE17AEE0095574393C76CDBDEF8B111970E5310223A001D59B8E61F09B90024
DB06D16FD77361FB2CA815FFF633DB6B9603B8D8A0376274FFCA2E15A20F858F
3FB3F67FF36D7106491F5D569868F321D1A83D97ADC16180FD42A14676F4D075
4502CF41E0060A5716F3827AE480DA30C62088BFF147928DC1E8BEB9F61100A5
3C7CA0F6BB4EA685F93C78B274F571C85E866D942B8F370452EF9155D407C8C6
103D7F15EC16B97CFEC6806962E74C44E7E233354E5133> |-
/g2561 <1C60D8A8C9B86A966ADF9435266742212A4E95667AD6354F02E57CD0
6B8234073E161E7560118A141A532BE91FACEE64BD5E5453989291A0F8CE3434
53B387D697B9DCACAAE31A1FD0172C201040DF8B41047E9DACE05E7B0FEF47FC
081834F0C3BBF93AA7CE3A4C437CE4A709905227FD0500F941A3056BF5789BC1
FB86D511C53EF26A827AA3915C7012056B533DFA8F5B33513854A34E79625D0F
98126F0DEE4F111B2F4D29F7B2F8FB642BB21B58D026C5C4E74B499F07E534E7
233BE137CB85C13D2FAF1BED37A6E60C350D3DC0E819C2E6B1C865BC5B6E4F3A
D0310128953BC01969971F698B5EEDBA5BE48644432202B40135B81BD03A1BC3
0F> |-
/g11087 <1C60D8A8C9B86A96497B734A39D6D4766F3C5389700381E7A117AC1
5B100B9622ABFC0E1378B318F0993B35DAABCB67E6C18CF6BE36C2BB75AD62B5
C1FFF95242CEBE852BE899A762A468664BDB2815D5F3D52380B0D439BE43C7A6
F25C449C97B1008215292F178CF08911D078DCC0A77602CF5B4C6FD7B3FF8EB4
4A9248747F9FD0D25572625> |-
/g3224 <1C60D8A8C9B86A9645A48164A42E01797AACEB5154A92E6060D5DBB7
9D88A797E47C507311B5983621B9C6E689C71F1E97A0A67E4762CBA94E5E2D17
ED7C2685C8B5493016C4A4AB41FECE0D3AEF0198CBF970232426F7F7BA5410BA
7F5EF2ED0BB64DF6F9CFBAD1E873CFEDED0C9368F6DF38752AD67EB8C778B8E1
CEA277E0C3C2AE8E7680EBD1BD23268AE077DE65E5ADDF1F34AB164132AD50CC
7CE81352F6213042117D62EAB01D1A65F3BD45071624AA6DA14B96177050196B
C4D0BD6961ECCA4BBB68A0E340CB6BA4A0253B56DA6516F60443E415927E736B
F1B9616B167DE9D27B35A7121823240A8AAA4F929516A4C53268DAAC2AC315B8
97059169E81FE0F02C9A3BEF727FA4DCC802DA1F0B7FC82DDD96C393C0EA1573
82A020DA22A560D51D09B59222E80EB3B400E851BD8D54B99891F31DE6D2932D
EA226DD4FC99946CBDE48A3BCCE83968C2B2F252B3F30BBF18DF445DF15AC125
832CDB78F5E80C70BE76E5CB2155C6E3A2E10D595C58F209AAA29481EE3AAA17
40E18375C360DD> |-
/.notdef <1C60D8A8C9C4A637> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/NCXQMC+TT7Do00 /QXTAAA+TT7Do00 findfont ct_VMDictPut
/NCXQMC+TT7Do00*1 
[/.notdef /g1323 /g5951 /g5311 /g2119 /g2561 /g11087 /g3224 
248{/.notdef}rp]
NCXQMC+TT7Do00 nf
NCXQMC+TT7Do00*1 [18 0 0 -18 0 0 ]msf
148.08 272.76 mo
(\001\002\003\004\005\006\007)
[18 18 18 18 18 18 0 ]xsh
true set_gvm
%ADOBeginSubsetFont: OUJAAA+TimesNewRoman Initial
ct_T42Dict begin
-0.566 -0.305 2 1.004
 256 array 0 1 255 {1 index exch /.notdef put} for  /OUJAAA+TimesNewRoman
Type42DictBegin
[<00010000000c000c000c000c4f532f3200000000000000cc000000566376
7420fe30def000000124000007da6670676dc3a61d010000090000000631
676c79660000000000003b380000293a68656164de49addd00000f340000
00366868656112ef167c00000f6c00000024686d74780000000000000f90
0000016c6c6f636100000000000010fc00001ab06d617870142b06ad0000
2bac000000206e616d650000000000002bcc000000217072657039e6c80d
00002bf000000f4567646972000000000000000000000000000100000190
000500080000000000000000000000000000000000000000000000000000
00000000000000000000000000080000000000000000000000000000f000
f0ff0000000000000000000000000001000000000000058e0000054c001f
054c001c0394001b0000ffe10000ffe40000ffe8fe4afffc056b0023fe6a
ffe00313000000ad000000ad0000000000250096009f002400f0013100c2
00c0004a00a6004100500094004700cf00af000e007901cb000400230044
00a80025011f0002004600170105009900d9005c007200e500e00028004b
00de011200240045007000160039ffe90016004b0088ffb900d9000a0043
00ae00ba016c0153002f00430048022c012b0025008fffc000170028ffcd
ffd80025009d00e50124ffb10048009d00e600110027007f00910012006a
00cafffc00000024006200a7017c01e900210060008b0434048aff6b003b
00b500d5014bff6b004d007905d809b5006c009100a3011701c0ffdfffe7
00be04010065007f00820088009900b200c0022e034305a000200026003d
004e00610065007b00d9011301310340ff27ff42ff99004e00a700f2022b
02c603070011002b0049005f008d00a100af00d600e400f5010b0135019d
01ab01ab01d101ee05d80000004b0075007a0080009d00a600a700ac00b9
013101310217021700020017002900550080008f00a500b200b300d0014b
015901c001c103a50530fe3fff14ff15ffe7ffff002a00580099009f00c1
00e400f40130015901ab01ab03220374041e04740532fd81004d0064009c
00d000d100d600de00e500f500f8012a012a01e1027e027fff57ffa8ffe5
00000008001f00380051005a006f0076007700a200c000c200c400f101fb
0209027e02cf04c5057a05f0ff92001200260042004b004f005100530064
008b00ae00b200b800b800d600f50111012001310138014e01520167018f
019601b801d901d902060221027102ea03b003cb03dc04360505ff3a0012
0016001e001f002300570068006c007e0088009200a500a800c500c90115
0126012d013001d601d901f6023b0244024402a302cf02de0385038f04fc
0586fee0feebfefbff8a0007004400470058007500aa00e400ef01160120
0129016a017301e3027e029002b4030e0310032303350341035403590388
039403c803ce047204ab04da0549056105ab0761fe6efed1ff4bff840000
00010006001e0027002c0034003700620066006a006b006c007000700072
007c0081008a008e0091009200a000ab00b800bf00c900d500dd00ec00f4
0100012101300169016a016d017c0185018e018e019901ac01c101c501c9
01e101f601f601f60222022202280236023f024302460267028502850294
02d002d602e8031c0363037f03800380039e03b603d90400040404ff0532
05320548058b05a706cb07280748076208ccfcedfd2afd59fddefe00fe1a
fe5bfe96fec1fee7ff56ff7900010025002d002e007c00870091009900a1
00a500a500aa00af00b600c600cc00d700dd00ec00f20102010501170118
0123012a012c0131013f014701490149014d01510151015501550157015a
015a0161016201680168017f0180018201830184018d0195019501950198
019901a501a901b601b601b701ba01ba01d501df01e601ea01f202000200
0203021702250227022f0239024302430247024f025202520267026f026f
027002720276027e02a702b302b902d603130325032d03610371039903ae
03c203d403f90402042c042f043c04560467048304cf04d104d804fb051f
05450568059e05c2061b06340655066a069806af06e806fc070607500762
077c07d407ff082500ad00c700aa00b5000000000000000000000000002f
06cf01730514047802df009c0018037005870155002500060254036c038e
03d2056601f0032001da018a0369036bffa3034602f8036f015602bf0122
031f053a0366008c00ff01ab02e102f402e70415015402e90128049101b7
026f034302060000000005d30415048305e8000002d7003a027d01c002c5
03830383ffbd003a059e01df059e02d1002004e0021300df01c001870297
000000ce0269028b0058043405fb0069015a01a905780182013e0288012a
03d4049e00e5032302f301f00196007a00cd014a0424025e023901ab00cf
00fd011e00ed017100700195004001bb01dd01b8000101a803a7014c020c
018d01b0020d0137010000cd032101d4030a005900000000012602150150
02f0025503bc06d00335010100d000d2007a01030130007c000000000000
000000fe006e006600940227002b0045004d00d3013200180097004100f4
febcffe9001605d8058b009100a1032c00520030005d02cb003a009200e5
00e500580086003200ba0099008800300298007cff8001640028004d0065
000200b8016a002f010b001100170100007f00040016022200a6005f0000
00f8000a00ca0043004b01ee0077012000f401c00028045f0000008c0445
00c20060007b008b008b0064005d00c2009c009206b505d3004f01170000
0420fe9e00cc00dc005e004600e30032001a003c0091005a00a1042c0041
002000490071009c009cfe4800400040008600cb0102007d003a003e006a
0050044800290096ff6a0097006900e0004c001b00c90069ff970043ffbd
0052ff83ff8b005fffa1ff5c00670053ffa8002a0076ffb2003600870559
0256052b043400de00c901c4004800db018b00b3004800da011601250118
00ea00ea00ae0000003e05bb008a04d70053003fff8cffd5001500280022
00990062004a00e4006d00ee00e5004803c00033fe4e02b1ff4603700079
05df0051ffa7ff1f010a0068ff6c004f00bc00a5070500ab0080001e05a5
0025008b04660230006900290016012f0080005c059f000040425554403f
3e3d3c3b3a393837363534333231302f2e2d2c2b2a292827262524232221
201f1e1d1c1b1a1918171614131211100f0e0d0c0b0a0908070605040302
01002c4523466020b02660b004262348482d2c452346236120b02661b004
262348482d2c45234660b0206120b04660b004262348482d2c4523462361
b0206020b02661b02061b004262348482d2c45234660b0406120b06660b0
04262348482d2c4523462361b0406020b02661b04061b004262348482d2c
0110203c003c2d2c20452320b0cd442320b8015a51582320b08d44235920
b0ed51582320b04d44235920b09051582320b00d44235921212d2c202045
18684420b001602045b04676688a4560442d2c01b10b0a432343650a2d2c
00b10a0b4323430b2d2c00b0172370b101173e01b0172370b10217453ab1
0200080d2d2c45b01a234445b01923442d2c2045b00325456164b0505158
45441b2121592d2cb00143632362b0002342b00f2b2d2c2045b000436044
2d2c01b00643b00743650a2d2c2069b04061b0008b20b12cc08a8cb81000
62602b0c642364615c58b00361592d2c45b0112bb0172344b0177ae4182d
2c45b0112bb01723442d2cb01243588745b0112bb0172344b0177ae41b03
8a45186920b01723448a8a8720b0a05158b0112bb0172344b0177ae41b21
b0177ae45959182d2cb0022546608a46b040618c482d2c4b53205c58b002
855958b00185592d2c20b0032545b019234445b01a23444565234520b003
25606a20b009234223688a6a606120b01a8ab000527921b21a1a40b9ffe0
001a45208a54582321b03f1b235961441cb114008a5279b3194020194520
8a54582321b03f1b235961442d2cb110114323430b2d2cb10e0f4323430b
2d2cb10c0d4323430b2d2cb10c0d432343650b2d2cb10e0f432343650b2d
2cb11011432343650b2d2c4b525845441b2121592d2c0120b003252349b0
4060b0206320b000525823b002253823b002256538008a63381b21212121
2159012d2c4bb06451584569b00943608a103a1b212110592d2c01b00525
1023208af500b0016023edec2d2c01b005251023208af500b0016123edec
2d2c01b0062510f500edec2d2c20b001600110203c003c2d2c20b0016101
10203c003c2d2cb02b2bb02a2a2d2c00b00743b006430b2d2c3eb02a2a2d
2c352d2c76b802b023701020b802b04520b0005058b00161593a2f182d2c
21210c6423648bb84000622d2c21b08051580c6423648bb82000621bb200
402f2b59b002602d2c21b0c051580c6423648bb81555621bb200802f2b59
b002602d2c0c6423648bb84000626023212d2cb4000100000015b00826b0
0826b00826b008260f10161345683ab001162d2cb4000100000015b00826
b00826b00826b008260f1016134568653ab001162d2c4b53234b515a5820
458a60441b2121592d2c4b545820458a60441b2121592d2c4b53234b515a
58381b2121592d2c4b5458381b2121592d2c014b53234b515ab00225b004
25b006254923451869525a58b00225b00225b00525462345696048592121
212d2cb0134358031b02592d2cb0134358021b03592d2c4b54b012435c5a
58381b2121592d2cb012435c580cb00425b00425060c6423646164b80708
5158b00425b00425012046b01060482046b0106048590a21211b2121592d
2cb012435c580cb00425b00425060c6423646164b807085158b00425b004
25012046b8fff060482046b8fff06048590a21211b2121592d2c4b53234b
515a58b03a2b1b2121592d2c4b53234b515a58b03b2b1b2121592d2c4b53
234b515ab012435c5a58381b2121592d2c0c8a034b54b00426024b545a8a
8a0ab012435c5a58381b2121592d2c462346608a8a462320468a608a61b8
ff8062232010238ab9035803588a70456020b0005058b00161b8ffba8b1b
b0468c59b0106068013a2d2cb1020042b123018851b1400188535a58b910
000020885458b202010243604259b12401885158b920000040885458b202
0202436042b12401885458b2022002436042004b014b5258b20208024360
42591bb940000080885458b202040243604259b94000008063b801008854
58b202080243604259b94000010063b80200885458b202100243604259b9
4000020063b80400885458b202400243604259595959592d2cb002435458
4b53234b515a58381b2121591b21212121592d00000000010000000511ec
b1b0afba5f0f3cf50819080000000000a2e31dc200000000c8c23397fb74
fd8c1000080e000000090001000000000000000100000721fe4500571000
fb74fadf10000001000000000000000000000000000000590639011c0639
011c0639011c020000000200000002000000020000000200000002000000
020000000200000002000000020000000200000002000000020000000200
000002000000020000000200000002000000020000000200000002000000
020000000200000002000000020000000200000002000000020000000200
00000200000002000000020000000200000005c7001005c7001005c70010
05c7001005c7001005c7001005c7004805c7004805c7004805c7004805c7
004805c7004805c7004805c7004805c7004805c7004805c7004805c70048
047300800473008004730080047300800473008004730080047300800473
0080047300800473008004730080047300800473008004730080038d0049
0400fffc038d0046038d0046038d004c038d004c038d004c038d004c0239
003c0239003c0239003c0239003c0239003c0400000c0400004504000045
0400004402aa000d02aa000d0239001404000002000200020002000c0000
003b003b003b003b003b003b003b003b003b003b003b003b003b003b003b
003b003b003b003b003b003b003b003b003b003b003b003b003b003b003b
003b003b003b003b003b003b017f017f017f017f017f017f027c027c027c
027c027c027c027c027c027c027c027c027c03f903f903f903f903f903f9
03f903f903f903f903f903f903f903f905f60718084708470a370a370a37
0a370b920b920b920b920b920d460e7c0e7c0fa910c110c111ec133e133e
133e133e149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d149d149d149d149d149d
149d149d149d149d149d149d149d149d149d149d000100000d5700f2003c
009d000700020010002f005600000625ffff000500020000000100120002
000200000006000f000054696d6573204e657720526f6d616e000000b900
5403ecb3032a1f3f411503e4006003e9009f03e500df03e50004001003e4
001003e5003f03e5007003e400ff03e40005ffc003e1b345453240b803e1
b32b2e3240b803e1b2282932b9ffc003e1b21a1c32bd03e102ac0027001f
ffc003dfb2161b32b9ffc003deb2424232b9ffc003deb2363832b9ffc003
deb32a2d32df410a03de00ef03de000203de03df0028001fffc003dfb328
2e32f0410d03df0001037e000f0101001f00a003dd00b003dd0002004003
dab32426329fbf03cc000103ca03c90064001fffc003c9b20d1132410a03
c703b70012001f03b603b50064001fffc003b5b30e1132004173038d0001
00c0038d00d0038d00e0038d00f0038d0004006f03a7007f03a7008f03a7
00af03a70004000f03a7001f03a7002f03a7004f03a7000403ab03ab00ef
03a50001000f03a5002f03a5006f03a5008f03a50004005403aa0001006b
03aa000103a8036a0022001f038c03940015001f038b03930015001f03a4
0393001a001f03a20394001e001f03a10393001e001f039f0394001e001f
039b0394001a001f039a0393001e001f039903940016001f039803940016
001f03970393001b001f03960394001b001f03950393001b001f03760375
001a001f03740375001a001f03a00373b21e1f10411e0393002003930030
0393000300200394003003940040039400030000039400010383036c001e
001f03b1036c0032001f036d036c0032001fffc0037db2212332b9ffc003
7db3171932a0410a037d00b0037d00c0037d00d0037d0004ffc0037cb221
2332b9ffc0037cb3171932a0412d037c00b0037c00c0037c00d0037c0004
00300373004003730002000003730010037300200373000300e0037300f0
0373000200b0037300c0037300d003730003008403730090037300a00373
00030377036a0029001f0389036ab2281f40b80367b33940323fbb036600
0100400366b3191d328fbb0366000100400366b3090a3240b80366b3090e
3240b80366b3090f323fbb0365000100400365b3090c3240b80365b31a1d
3240b80365b3090e326b410e0363007b0363000200140363002403630034
03630044036300040363b2242f1fba034e006d0800400e1f7f027f037f04
7f050430440112bf033200500800001f0012032d003c080040291f5f3c01
376009700980090310092009300940095009056f037f038f03031f032f03
3f034f035f0305b8ffc0b2073a33b8ffc04047063a33900ba00bb00bc00b
d00b05b006c006d006e006f0060520063006400650066006700680069006
a006099006900702600b700b800b03100b200b300b400b500b051f0701a0
41850362000100000362001003620070036200900362000400f0035f0001
0020035e0020035f0030035f0040035e00040000035e0000035f0010035f
00d0035e00e0035f00050010030f0020030f0030030f00d0030f00e0030f
00050000030f0010030f0050030f0060030f0070030f00d0030f00060000
030f0010030f0020030f0030030f00e0030f00f0030f0006030f00270000
030e0030030e000200e0030e00f0030e0002030e004a00e0030d00f0030d
0002030d002700d002fc0001001002fc002002fc005002fc000300d002fc
00e002fc0002000002fc001002fc002002fc003002fc005002fc006002fc
000600e002fc00f002fc0002002002fc003002fc004002fc000302fc4061
27c02901b02901a02901902901403c3f413240223f41321212125f235f25
5f285fa5046f236f256f286fa5044f234f254f284fa5043f233f253f283f
a5042f232f252f282fa5041f231f251f281fa5048f4caf4cbf4ccf4c045f
4c6f4c7f4c0337b8ffc0b3b22b3032b8ffc0b3b2222532b8ffc0b5b2191a
32370f413b02af0001005f02af009f02af00df02af0003001f02af002f02
af003f02af006f02af000402af02af001f02ad002f02ad003f02ad004f02
ad005f02ad000500df02ad0001000f02ad001f02ad003f02ad005f02ad00
9f02ad0005005f02ad00df02ad0002000f02ad001f02ad003f02ad000300
4002acb23a334f414a02ac005f02ac009f02ac0003002f02ac003f02ac00
02000f02ac003f02ac00af02ac000300b002ac00e002ac0002004f02ac00
5f02ac00a002ac0003001f02ac002f02ac003f02ac0003000f035a000100
0f035a001f035a003f035a005f035a0070035a000500cf035700df035700
02000f0357001f03570070035700af03570004035a035a0357035702ad02
ad02ac02ac032c400d31151f001616000000121108104110020c004a000d
01a8004a000d0198004a000d0189004a000d013f004a000d0124400e4a0d
f64a0dbe4a0d864a0d274a0dbe02280041000d01940041000d0121400b41
0db4410d4f410d29410d411002170021000d02150021000d02060021000d
01eb0021000d014e0021000d012c4014210df9210df3210df1210d9d210d
71210d3d210d4110021c001f000d0214001f000d020b001f000d0196001f
000d014a001f000d0126400b1f0dc61f0d571f0d371f0d410d019e014100
0d00420141000d001e0141000d001b0141000d01f2b40f440f0009bb01f2
0044000d0201b23c291fb80200b23c291fb801ffb23c411fb801feb23c47
1fb801fdb23c9e1fb801fab23c931fbc01f9010f0101001f01f6b224e41f
411501f401490401001f01f301490401001f01f1014900ab001f01f00149
0067001f01a6003c0125001f01a4b23c811f411501a3010f019a001f01a2
00220801001f01a100500401001f019f0149019a001f019d01490067001f
019cb22c621fb8019bb22c791fbc019a002c0101001f0197b22ce41fb801
93b22c891fb80192b22c6c1fb8018fb2259e1fb8016ab23c2a1f41110167
00240201001f0163002502ab001f014c010f019a001f01480149006c001f
0147b22c891fb80145b22c9e1fb80144b22c791fb80143b223311fb80127
b23c811fbc012300500101001f011fb223e41f4115011d0023019a001f01
1c00230801001f011b00250801001f010e010f0401001f010d0022040100
1f0108b223811fb80106b425e41ff73cbb0125001f00f5010fb29e1fe3bc
01490156001f00e20149b2ab1fd1b901490401b21fcf2cb80125b61fce23
bb1fc524b80156b21fc02cb80801b21fbf2cb80201b51fb124e41fb0b901
490201b61faf2c671fad23b80801b21fa523b80201400b1f9f3c2d1f9b23
5a1f9925b80201b21f812cbc0401001f006d010f0156400b1f592c3e1f4c
3cab1f4625b80101b21f403cb80125400a1f3a23721f393cab1f38b80149
b3ab1f3124b80401b21f3025b802abb61f2a24e41f2623b80156b21f5537
ba023500070175402c0774076207560751073b0733072d0720071d071c07
1408120810080e080c080a080808060804080208000814b8ffe0402b0000
010014061000000100060400000100041000000100100200000100020000
0001000002010802004a00b013034b024b534201b0124b004b5442b0372b
4bb807ff52b0382b4bb008505b58b101018e59b0382bb00288b801005458
b801ffb101018e851bb0124358b90001012f858d1bb90001017c858d5959
014bb0c063004b6220b0f65323b8010a515ab0052342180016763f183f12
3e113946443e113946443e113946443e113946443e11394660443e113946
60442b2b2b2b2b2b2b2b2b2b2b182b2b2b2b2b2b2b2b2b2b2b2b2b181db0
964b5358b0aa1d59b0324b5358b0ff1d594bb04753205c58b90271026f45
44b90270026f45445958b9017a0271455258b90271017a4459594bb04753
205c58b9002202704544b9003c027045445958b901b30022455258b90022
01b34459594bb04c53205c58b9014900224544b1222245445958b901c201
49455258b9014901c24459594bb06753205c58b9002402714544b9005002
7145445958b9021e0024455258b90024021e4459594bb8020153205c58b9
010f00224544b1222245445958b90c00010f455258b9010f0c004459594b
b01c53205c58b125254544b12c2545445958b13725455258b12537445959
4bb0ab53205c58b125254544b1232545445958b901590025455258b90025
01594459594bb8010153205c58b125254544b1282545445958b902080025
455258b9002502084459592b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b6542
2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b01b361dc64634565234560234565602345
60b08b766818b080622020b164dc4565234520b003266062636820b00326
6165b0dc236544b064234420b161634565234520b003266062636820b003
266165b063236544b0612344b10063455458b163406544b2614061452361
4459b3a67f434b456523456023456560234560b089766818b080622020b1
437f4565234520b003266062636820b003266165b07f236544b043234420
b1a64b4565234520b003266062636820b003266165b04b236544b0a62344
b1004b455458b14b406544b2a640a645236144594b5242014b5058b10800
4259435c58b108004259b3020b0a124358601b2159421610703eb0124358
b93b21187e1bba040001a8000b2b59b00c2342b00d2342b0124358b92d41
2d411bba04000400000b2b59b00e2342b00f2342b0124358b9187e3b211b
ba01a80400000b2b59b0102342b0112342002b0018456944456944456944
456944737373747373737475752b7373747475184569447373742b4bb021
534bb046515a58b03cb03c45b040604459012b2b2b2b7575757575757575
43584010bf3ccf3c026f3c7f3c8f3c9f3caf3c0575755943584012bf22cf
22025f226f227f228f229f22af2206757559435c58b6403c9f22ef220375
592b2b017474747445447373747475754544734544737445447374757373
73737300757575737575752b2b757575752b752b435841220063032d0001
0003032d0013032d0023032d0033032d0053032d000500c3032d00d3032d
00e3032d00f3032d00040083032d0093032d00a3032d00b3032d0004032d
032d4518694474747575592b4358b900180332b330353238b80332b36166
3238b80332b3535a3238b80332b3454e3238b80332b33c413218b80332b2
3f330a410f0332000100ba033200ca033200da033200ea033200fa033200
05033203324518694474752b2b2b2b2b2b597300732b012b7575002b2b2b
74002b2b2b732b74012b002b2b017373737474732b2b00732b2b002b2b2b
017374732b012b2b012b2b2b2b2b2b2b2b2b2b2b2b2b2b00017375007373
004569440073730173742b2b2b2b2b732b00732b752b2b732b2b2b2b2b2b
2b2b2b73742b2b00000000>
[10555 ] AllocGlyphStorage
]def 
124 60 
PrepFor2015
Type42DictEnd
1 118 36 <00020010000005b0056b001c001f0218b102024354584012011f1e021e1d
001c1e1c001d1f011e1c0214be03e2001703e2000703e2000a03e2401708
021c1e030f081c161d001f70018001020101080f0208002f3f12392f5dcd
d0cd2f2f1112173910ededeeec012f2f2f2f2f2f2f107d87c4c41087c4c4
31301b401b080e0f0f0d100a1e091f502106150f13101a111a1b1b1c181d
0621b8ffc0b2253521b8ffc0b330583421b8ffc0b32b2e3421b8ffc0b229
3521b8ffc0b320263421b8ffc0b31a1e3421b8ffc0b2173521b8ffc0b215
3521b8ffc040971013340d0f0b100a1e390f4a0f4610491e4f21590f5710
5514581e6a0f6710681e76108004870e8a0f87108712891e881f9b0f9b10
99119b1eb90fb910bd1ab91ecb0fca10c81dca1edb0fd810eb0fe810e81e
f90ff810f91df91e2c090f4b1b021f1e01011f1e02001d1e1e1c090e0a1b
09161c171b160802071b081511141b15781e0f1020101e1c1c2211101411
70110111100f0e0eb802c94011021e1402021e1f1da50000700180010201
b801b5400c08100f03151616080809081cb801fa40090f11011102a50e40
11b80230b34f1e011eb802ec400e20400e500ef00e030ea7206b8a182b10
f65d191afd5ded181a10ed105ded003f3c103c103c3f3c10f45d3c10fd3c
870e2e2b057d10c4875d0e2e182b87057dc42b180010ed0110c00010ed01
10c00010ed0110c00010ed0110c087107dc43c073c3c073c313001715d2b
2b2b2b2b2b2b2b2b01725d59012107061514161715213536373637013301
16161715213536363534270b0203a9fdf35c223b62fe555519333e01dd23
01d8395d53fde95139286ee6ec01c6d64f271f2f0725250f183093045cfb
988851052525042e212c5f010d0224fddc00>OUJAAA+TimesNewRoman AddT42Char 
1 8018 85 <0001000d000002b703af002801b5b1020243545840282a4013130255061f
171127040f0f025527181f0111080d0d025511040f0f025511060c0c0255
111fb8fff4b40f0f02551fb8fff6b40d0d02551fb8ffee4011101002551f
14121202551f0e131302551fb8fffc400b0f0f02551f011003181619bb03
e20018002603e2400e4f276f277f2703272807180c0307003fcd2f3fdd5d
ed10fdc011123939012f2b2b2b2b2b2bdd2b2b2bc010c4c62b10c410c431
302b1bb10602435458402301100318262728076f097f0902090c03071806
1f01110c0d0d0655110410100655111fb8fffab40d0d06551fb8ffeab40f
0f06551fb8ffeab7101006551f1f2a291112392f2b2b2bdd2b2bc010c400
2f3fcdcd5d3fddcd1112393931301b406f2002200f3202320f4002400f82
0407402a015f2a011f291e18272211291e17862327272041261e2744000a
0b2a111420100104188009010939100c010c590303000718170a5f060140
0601062e1f2a012a0011241f1f1f2001802090200200201020b020c020d0
2005206029a66e182b4e10f45d71723c4d10fd3c1072e47172003f3c3f3c
10ed72ed5d11173901111239390010f5edfc01f52b2b3130017271005d59
590115363332161514062322262322070607111417161633152135323736
373635113426262322072725014c73793748342423571512152d30130d42
3efe2b4622190a050d231a1f270a011503afcece432c27364514295efe49
4c271b24242416102311500163a03d1c0f247000>OUJAAA+TimesNewRoman AddT42Char 
1 3052 69 <0002fffbffe403b9058e0016002401d2b10202435458b11e05b8fff44010
1010025505140c00180a0d0d0255180cb8ffe6b4131302550cb8fffcb40d
0d02550cb8fffcb40f0f02550cb8fff4400d101002550c0c181700040209
13b803e240111440090d02551415001b25090b21590207003fed3fed3fdd
2bed11121739012f2b2b2b2bdd2bc010c62f2bcd31301bb1060243545840
2618170003020913141500215902071b25090b1e0505262500180c0d0d06
55180210100655180cb8fff8b40d0d06550cb8ffeeb7101006550c0c2625
1112392f2b2bdd2b2bc01112392fcd003fed3fed3fddcd1112173931301b
4079102601a406b606b507ea1f040526430d5d3620267503760486038704
a603ab08074707013a0814270d41131e144418170c00041b160010210121
5902071b25090b1e311f0590050260058005af050305eb0c16000018240c
0c100d500d700d900d04800d900db00d03000d100d200d300db00dc00dd0
0d070db8ffc0b73c350d6025c24b182b4e10f42b5d71723c4d10fd3c103c
10fd5d72ed003fed3fed723f111739f5edfc01f53130437940281920030b
072620031e20011a0a181c0019180b0c1c081e20011f04212001190b1b1c
001d061b2000002b2b2b012b103c103c2b2b2b81810071015d2b005d0172
595901363332161514070623222627113426262322072725331111161633
323635342623220706013b859a8dd2a28bab50a5560f20181c2a0e01132d
336d395b9d9d6435352802f6b9f1d1f495803a3a03b59c481a102370fd28
fddc3233c8bfb0bd1b14>OUJAAA+TimesNewRoman AddT42Char 
1 5230 76 <0002003c00000207058e000b00220249b10202435458b90024ffc0401d0d
0d0255120d080d0d02550d21181010025521180f0f02552113180309b8ff
eeb41313025509b8ffe0b40d0d025509b8ffd6b40f0f025509b8ffceb610
100255090d18b8fff4b41313025518b8ffe2b40d0d025518b8ffe0b40f0f
025518b8ffd6b5101002551820b803e240174f216f217f210321226f0001
0060060106400f0f025506b8ffc0b71313025506220613002f3fd62b2b5d
cd5d10dd5ded012f2b2b2b2bcd2f2b2b2b2bcd10c4c62b2b102bc4313001
2b1bb10602435458400d20121010065521121010065506b8ffc0b44b4b06
5506b8ffc0b44141065506b8ffc04019373706554006010006a006026006
0106000020212207130309b8fff6401c10100655090924230d0210100655
0d020f0f06550d0c0d0d06550d18b8fff0b41010065518b8fff6b40f0f06
5518b8fff0b70d0d0655181824231112392f2b2b2bcd2b2b2b1112392f2b
cd002f3fddcd3fcd5d71722b2b2b3130012b2b1b40199024016024702490
24a024f024052024502402402450240224b8ffc0b332323424b8ffc0b338
3a3424b8ffc0b32d303424b8ffc0b323253424b8ffc0402e191a3418291e
134a220d291e124a2321271941201e21440c190c1390060106390000220c
0713120a900901093903b8ffc0b2433503b8ffc0400f3f35036b0c0c0d19
0d2418402b3918b8ffc0401a363a34901801501801601870189018a018f0
180518b223b2a3182b10f65d71722b2bed3c103c10f42b2bed72003f3c3f
3c3fed7211123910f5edfc01f52b2b3130012b2b2b2b2b015d715d017259
590132161514062322263534361311141616331521353236363511342726
26232207272501292a3b3b2a2a3c3b7e193141fe43432e1b09071e1a1c28
0e0114058e3b2a2a3c3c2a2a3bfe21fd2056391c24241a3c550161952c20
190f2470>OUJAAA+TimesNewRoman AddT42Char 
1 8578 87 <00010014fff1023c04c1001b01fdb1020243545840251d40121302551d40
101002550b0c18121202550c15130105131812120255130e1313025513b8
fff8b40f0f025513b8fff4b40d0d025513b8fff0400c10100255130b082c
0f161404b8011bb2000106003fcdfdd0cd2fedc4012f2b2b2b2b2bddc010
c62f2bcd31302b2b1bb106024354584019170c10100655160c1010065515
0c10100655160c101006551bb8ffe8b4101006551ab8ffe8b41010065519
b8ffe8401410100655700b010b0f1b01156914014914011404b8011b401c
0106082c0f0b1b0105021010065505080f0f0655050c0d0d06550513b8ff
eeb41010065513b8fff0b40f0f065513b8fffab70d0d065513131d1c1112
392f2b2b2bdd2b2b2bd0cd003fed3ffdd05d5dc010cd10c45d3130012b2b
2b2b2b002b2b1bb9000dffe840410c395f015f02023f1d99119919bf15bf
16b819e819079f1d01891a014f0c4f0d5f0c5f0df5180506181518271803
161518191a030118191a03141ba00103153004b8011b401c010330020201
060c35082c0f0b16cf15df15ef15031565141bcc000bb801ec402c200c01
0c2e2f1db01d021d000101040405241450130180130100131013b013c013
d013e0130613601cab89182b10f65d71723cfd3c103c103c105df45ded10
ed10f45d3c003ffde43f3c10ed10edfd3c10e40111173900111739123931
3000715d0171725d00722b59590111331523111416333236373306062322
2626351123353636373637014ad6d63328213e11272380442e582a913773
2d172904c1fed346fdae593e29286263335f63026821166948266500>OUJAAA+TimesNewRoman AddT42Char 
1 2034 68 <00020049ffed038903af0032003d0349b1020243545840203f400d0d0255
3f4013130255151b072e25080b0b0255250c0d0d025525000c33b8fff040
0b1212025533161313025533b8ffdeb41010025533b8fff440150f0f0255
330c0d0d02553339070c0d0d0255072d2eb8ffc04020091202552e33001e
04292c30340c40090b02550c401d1d02550c40111202550cb8ffd4401e09
1202550c0c047f180118401112025518401d1d02551810251e073c2c0400
2fed3fedc42b2b5d12392f2b2b2b2bcd2ffd11123939d42bcd012f2bcd2f
2b2b2b2b2bc0c0dd2b2bc410d4cd31302b2b1b406f0b1c8a330212533601
12201f39803fa809b60a03122b127d007d3386008b0b8b35061d12163a10
3f803f04091c4c054c06452045224c3a403f891d080a0e0720002249014b
0a490b49354b37433a493d570b670b8509840a840b0f54168316021f3f5f
3f0260083300343c2e292d34bb011b000c000cffc0b609390c280b390cb8
ffc0401a3a35100c500c02400c500c600c03200c500c600c760c040c3c18
b8ffd840290b394f185f186f18032f187f1802187e1f100110251e07303c
403c023c2c04702d802d022d35292c30b803464011040b2ec02d012d6025
00330d0c0c343433b8fffcb41010065533bb016700240025ffc0401a0e39
00251f2580259025044025f0250280250125101010065525bb0243000700
15ffc0b21f3915b80167401e1b2f393107400e3920075007800703100701
f0070150070107433e436e182b4e10f45d7172722b4dedf4ed2b10fd2b5d
71722b3cfd2b3c103c103c103c10f65d3c003ff4fde45d10ed713fed72fd
5d712b11395d71722b2b2b2fb10602435458b2030c01005d59ed11123911
123939313043794047353b1c23051337383638020609080a080206212220
220206350b392000111d131c0012130f1f0d1c0122233b05391c00380834
200135340b121c101c010e22101c013a063c1c002b2b2b3c103c2b012b10
3c2b103c2b2b2a2a2a818181017201710071017172005d4358b23f12015d
59015d2b0072435c58b431400e392eb8ffe0b210392eb8ffe0b60e393720
0e3920b8ffe8b20c3920b8ffe0400b0b3918200b3917200b391cb8fff040
1a0b390a280b3937280b390a280a3937280a390a28093937280939002b2b
2b2b2b2b2b2b2b2b2b2b2b2b2b59005d5925060706232226353437363637
353426232207061517140623222635343633321716171615111416163332
3736371506232226271106070606151416333202478d24363d5f7b1e29cb
ec57533f2526022f26252fb09f7a4e3b1c120a170f100c153c7066313a01
972c4f4456384c846d1119826a433144785624896622222c3a2e32342d56
90291f422b85fec9833b14070d3c38964493015d3c192c6039485f00>OUJAAA+TimesNewRoman AddT42Char 
1 9852 92 <0001000cfe4603f4039400320222b10202435458401409092b2a03007827
01271d120614181010025514b803e2b611181010025511b803e2b6021810
10025502b803e2b632181010025532b803e2b10006003fed2bed2bec2bec
2b3f2fcd5d121739012f31301bb10602435458401e092b001d1411027a32
01320012060006237a2701271d0f141433000034331112392f11392f003f
dd5dc43f3f10dd5dd0d0c0111239393130b0104b5458bd001bfff80019ff
f0001afff0b10a1038383838591b40ab0910120b3f0e2b95290213342e16
64368305850602090905120819081a092b141a26092412241a262b380136
12351b47126809680a6919661a631b682c7808790a7919771a741b782c89
0a891998009809971a962bbb00d034e506230909082b2b2c2a2a0a010802
1e011319141e13002c321e00120a111e12260820191a1a302a0a142a2a0a
2c2b2b24090814092b2a09082b2a1a09040a082c2b2a1a190a0908082313
12120101000627b8ffc0400e120b3f272f23391d0f3417171a19b8010840
1b8f0a01df0af00a02600a700aef0a030a7d3f094f095f0903097d08b801
0e401d2bd60f20010f209f2002208f5f2c012f2c3f2c022c193334a921a6
7f182b2b4ef45d724de45d71e4fdf45df45d5d71fd4e456544e6003f4dfd
e42b3f3c103c103c121739011112173987082e2b0e7d10c4870e2e182b7d
10c401111239180010ed0110c00010ed0110c00010ed0110c00010ed0110
c00710083c083c3130015d01712b005d012b595913211523220615141713
133635342726262335211506060706070106062322263534363332171633
32363737012627262726270c01ab152d2d21dfcd110708222b012a252818
0919fe8b36af513b4c37302139280a1e472441feb70f2119101733039425
271d2745fe3201fa292812090b0d25250418210e3ffc6e8588442c2a3316
0f3e599f02b31f2e230c100c>OUJAAA+TimesNewRoman AddT42Char 

1 0 3 <> OUJAAA+TimesNewRoman AddT42Char 
1 1272 54 <00010080ffe10405056b00380257401912952c010f010f020b03000f0428
0029052b4f014f0209113ab8014640d03638361a031b045f185f195f1a5f
1b06050d050e002ac03a04740b740d740e760f701e701f702f7030890886
0b870d870e840f872ba804a83310120d330d340d351d331d341d352f012f
022d04201e201f29292d333e013e023f043019301e301f30213d343d3548
0d482a540b560d57105629562b1d1f011f021b331f351b3654185419541a
59325c335c345c355c365a370e030b0b29130b1b29230b203a3b29303a72
12721389249807982f9930a82fc028c12ac62bc03af03a144e08381b006f
021baf01cf0102017f010101ba00b8034b400d359a311c1b1d6f1f1b1e1e
ba1db8034b4034199a142a2b2b3c0c0e140c0c0e2b0c2a0e0426092b0c2a
0e04062301fd0000062831032328140902ac01401e223401011f260126b8
012340102f11bf1102df11012011af11df110311b80287b71fac1e2b1009
0109b80123401f9f2e01bf2eef2eff2e032e404735402ecf2eef2e03002e
202e302ec02e042ebc014600390146011800182b4e10f45d5d2b71724ded
72f4edfd5d7172fd72392f2bed003fed3fed3c10ed111217390111121739
870e2e2b0e7d10c4180010ecf4ed0110edf4ed0010ecf4ed5d011071edf4
ed3130437940362430071328260b2c093300290f26330124132633010730
0933000a2d0c33000b0c2c2b27102a33010f0e292a2512233300082f0633
01002b2b103c103c2b103c103c2b012b2b2b2b2b8181015d00725d435840
09630b660d6710632b045d595d0171722b0071005d435c58400c0b180f39
04300f3933300f39002b2b2b590111232e0223220615141716171e021514
062322272626232206072311331e02333236353426272624262635343633
3217163332363703ab25125dac5c68882b3ee9be8b4befbc3b341fc31a19
1d0725251a58b56c7d91373a27fea4934ce0ad6c7938171a210a056bfe2b
87a05e7f513e334b7d666d94519adf09053f1e2f01d1929160845a32662c
1ec3748c5492d335191f2f00>OUJAAA+TimesNewRoman AddT42Char 
1 4238 72 <0002004cffe4035303b00014001d037db10202435458402808161415000c
0f100255000e0c0f1002550e0c0d0d02550e153040000120003000020000
10000200b8ffc0b41314025500b8ffc040111111025500000b1b25110700
0710070207b8ffc0b40f10025507b8ffc0b5131402550704b8ffd6b41314
025504b8ffcab71212025504310b0b003fed2b2bc42b2b5d3fed12392f2b
2b5d5d5ded012f2b2bdd2bc02fcdc031301bb10602435458401d158000a0
00b0000320003000400003000010000200000b1b2511070807b8ffc04024
1010065510072007b00703000760078007a00704079204a204b204030431
0b0b07081614b8fff440260d0d065514141f1e15000c0d0d0655000c0f0f
0655000e0c0f0f06550e160d0d06550e0e1f1e1112392f2b2bdd2b2bc011
12392f2bcdd0cd003fed5dc45d5d2b323fed12392f5d5d5dcd31301b4019
125f185d1960006014d6030519201c3917201c3916401c391fb8ffc0400a
434a34081f430d5d361fb8ffc0b32828341fb8ffc040532a2e341b061909
58135e165f175a185b1a07010309060709080c0515490689028c06870c8a
10851da302ab18b513d402d90fda10f402f3031312600760087007800789
09c107c80ff007080401070d84020309baffe00006ffe0404a3609460247
094f1f5402540962027202891389199913a409a40ab808b509b00ac702e7
02e00cf40a1408d007010007d007027107010007100720079007a007b007
06077d041400301615b8ffc040131239125f157f159f15df150415151bd3
040104b8ffd0b2143904b8ffe8b2133904b8ffd84048123904310b0b5c1b
011b25110707cc0816281b390f16016f167f168f160316f4141480080130
0890080230088f08df08031008400860087008b008e0080608aa0e150400
89000200b8032c4012300e400e500e03000e100e200e03f00e010eb8ffc0
4009434a340e431e434b182b4e10f42b7172724dfd713c10fd5d715d713c
10ed5d712b10ed003fed723fed2b2b2b7211392f5d4358b26f15015d592b
3cfd3c10f45d5d7172393130015d00383800715d014358b4060001020271
5971722b2b2b2b2b2b2b0072435c58b90007ffc0400b23390c402d390d40
2d3908b8ffc0b2283907b8ffc0b2283906b8ffc0b21b3907b8ffc0b21b39
08b8ffc0b21b3907b8ffc0b20a3908b8ffc0b20a3907b8ffc0b2093908b8
ffc0400e093915101939192011390d201139002b2b012b002b2b2b2b2b2b
2b2b2b2b2b2b595959130617163332363717060623220235341233321615
252126272626232206da016464875a852d1f15ca98a5ebf1b69ac6fd8701
a805101963365383023bcc747463781489e10101d9eb0107cbaa3a582438
4081>OUJAAA+TimesNewRoman AddT42Char 
1 7416 84 <00020044fe4a040003af001d002b01d4b10202435458401a260c0d0d0255
2615160d0d0255150601071e01080d0d0255010eb8ffe84011121202550e
1a0d0d02550e0c131302550eb8ffe0b4101002550eb8fff8b50f0f02550e
05ba03e2000803e24010071d060f1e12232518062959120b070e003f3fed
3fed1239393f10eded012f2b2b2b2b2bcd2bc0c410c42f2bcd2b31301b40
c01b2a0f0f06551b2a0d0d06551b2a101006551a0f1a1e561003012d600d
5d362b201827502d02402d802da428a02d04301a30213f2a382b4f10401a
40214f2a482b580f501a591e50215a2a5f2b6f10621a62216f2a7c10711a
7f1e71217f2b851a8d2b9c0f961a9c1e9621982a9e2ba816a61aab1cad2b
b916be2bcd2bda2bec2bfb2b2a202d732573288f1397139714c02d075313
0122080e291e07272201291e0627231b180f1e1f03231a29012959120b23
251d180707060e1b1b001f1f0eb80167402f001f0190010260018001af01
0301081010065501eb26311015501502bf15cf15ef150315101010065515
432c437f182b4e10f42b71724dedfd2b5d723cfd3c1112392f003f3c3f3c
ed3ffd7211173912392b2b31304379401824281317241726200028132620
00251623200127142920002b2b012b2b818101725d005d017172382b0072
2b2b2b590111141616331521353332373636351106062322263534003332
161736370311342626232206151416333236036b18334afe3213381d1418
5b884985d10114c33960263a358327643f70a0a3733b5c03affb6658321c
2525100b3952018a6c4ff2cbe9012520201c24fd2f01ae4b563cbec1b9c0
3300>OUJAAA+TimesNewRoman AddT42Char 
1 9176 88 <00010002ffe403fd039400250230b1020243545840162740121202550801
080d0d0255010b20281212025520b8fffc400b0f0f0255201e0d0d025520
b8ffe4401310100255201a080d0d02551a121c1212025512b8fff8b40f0f
025512b8fffab40d0d025512b8fff4b5101002551224ba03e2001703e240
0e1825060b200e18061d2c0e0b0708b8ffc0b509100255080a002fdd2bcd
3fed3f1239393f10edec012f2b2b2b2bcd2b2f2b2b2b2bc0dd2bc431302b
1bb1060243545840570740086008700803080a0b200b180e242517182506
18061d2c0e0b0b010810100655010a0f0f0655010c0d0d065501201a040f
0f06551a04101006551a0a0d0d06551a1208082620080f0f065520060d0d
065520202612b8fff2b41010065512b8fff6b40f0f065512b8fff6b70d0d
0655121227261112392f2b2b2b11392f2b2b11392f10cd2b2b2b10cd2b2b
2bc0003fed3f3f10cd10cd111239393fdd5dcd31301b40350127600d5d36
202760277027b02704340b371f3a20481f4820051a08134f1e182723214f
1e25272308270141071e0844200b251d08b8014540130a00252519191806
1d2c0e0e0a0b0a0b0b2120b80167400e00b001010f0170019f01cf010401
b802bd402512191a241212501390130280139013b01303001310132013b0
13c013d01306136026c27f182b4e10f45d71723c4d10fd3c10fd5d713cfd
3c3c103c003f3c10ed3f3c103c103c10ed11123939f5edfc01f52b2b3130
437940101b1c0f111c0f1a1c0010111b101d1c002b01103c2b8181005d01
5d2b59590111141616333237170523350606232226263511342626073521
11141633323637113426273503630f21161f270efeee2d767c454d712c1c
37480141593f2b6d4b395a0394fdd59f471c112371c28042598c80019941
321b0125fd9b8050364c02074e370225>OUJAAA+TimesNewRoman AddT42Char 
1 5924 81 <0001000c000003f703af003302d3b102024354584017354012120255300c
10100255310c101002550e080f1623b8ffea402e10100255231d24290808
0d0d025508040f0f025508060c0c025508162412120255161a0d0d025516
0c1313025516b8fff4b40f0f025516b8ffdeb41010025516b8ffee40260c
0c025516001d040f0f02551d080d0d02551d060c0c02551d291812120255
290e1313025529b8ffeeb41010025529b8fff0b40f0f025529b8fff6b40d
0d025529b8fffa400a0c0c025529001c022430b803e24009314009100255
31320dbe03e2001003e2002203e2002503e24009240f2432071a2c020700
3fed3f2f2f10ededecec10dd2bed11123939012f2b2b2b2b2b2bdd2b2b2b
c02f2b2b2b2b2b2bcd2b2b2b10c410c42b10c410c431302b2b2b1bb10602
435458405e2f1610100655300c10100655311610100655001c0224303132
071a2c02070f24080c0d0d065508021010065508060f0f06550816020d0d
065516021010065516080f0f065516163534001d0c0d0d06551d080f0f06
551d02101006551d29b8fff0b40d0d065529b8fff0b41010065529b8fff2
b70f0f0655292935341112392f2b2b2bdd2b2b2bc01112392f2b2b2bcd2b
2b2b002f2f3fed3fddcd111239393130012b2b2b1b403a35402a35083560
0d5d3630355035603570359035052d040140356035703580359035b03506
b035d03502b0350160358035c035031d0816291e0fb8030f40112229291e
244a2208291e0e4a231d291e23b8030e402e2331272a41301e31441c0023
3233071a2c02072423230f0f0e0a17162407900801b008010f0870089f08
cf080408b802bd401b29331d242a1f295029602970290480299029b02903
002910290229b8ffc04009141634296034a67f182b10f62b5d71723cfd3c
10fd5d71723cfd3c003f3c103c103c3fed3f3c113939f5edfc01f52b2b2b
2b3130437940121819030604251903171c01050618051a1c012b01103c2b
2b8181015d71015d71005d01722b2b595901363332161716151114171616
331521353332363736351134262322071114171616331521353332363511
342626232207272533014ba1924b6c20160e0b3142fe3b1340330a04414d
77760b0e314bfe3b1446310f1f1a1c270f01142b02edc24b563c7cfe7957
1f191c242427260f4f01777d7182fe1d5d161d1b242447640154a5481a0f
2470>OUJAAA+TimesNewRoman AddT42Char 
1 3632 70 <00010046ffe4034a03af002101f5b2080401b102024354584020021a060c
10100255060c0f0f0255060c0d0d02550616250f0907602170210221b8ff
c0b513130255211db8ffd4b4131402551db8ffcab6121202551d3103002f
ed2b2bc42b5d3fc4ed012f2b2b2bcdc431301bb11223b8ffc040732a2d34
0023430d5d36170d5705021c135404530553065407581b581c0767057605
80008021b41bc520d020e000e50509370147015618551c5f236018601c76
18721c8a128e1390119018a601a402af23b301c101c707c719e908e41cea
20f4011806024a1257128b1f8b208023f02307112001bcffe00020ffe000
1fffe0b2001d00b803464030102101602180210200211021202150216021
70219021a021b021c021d021e021f0210d21661ddf0f010fc7162509071d
b8ffd8b214391db8ffd8403812391d31030b21cc1f0c014f0c8f0c020c2f
100030004000600070009000b000c000e00009300040000200aa731a831a
02501a019f1a011ab8010c4012f006010006100620063006400605064322
43b9029100182b4e10f472714ded5d7271fd715de47172ed003fed2b2b3f
eded7110f45d7172e412b10602435458400a531d631d731d03931d01005d
7159393130383838013801715d005d017200722b2b435c58b4001018391b
b8fff0b613390510103901b8ffc0b2103920b8ffc0b11039002b2b2b2b01
2b5959017101060623220235340033321615140623222726262726232207
061514163332373637034a25d8839ce80101b487ae312c3b1e110b23233e
643d51a189624e3734015cb5c30106dfd8010e8f4d262f2615761f1e4a62
a1a4fb432e79>OUJAAA+TimesNewRoman AddT42Char 
1 766 42 <00010048ffe105aa056b0034015d40540a04462e0219271a280210181019
02203640366036780870187019782a90189019b018b0190b2d2f760b870b
0318362e1a503670368c04ad04e036040c03860bc0360348081e1f1b18f3
22121f1b172123341b00b80105b3021b0101ba01b30000034b4043319a2c
1718182206282c030e282209012b1f1e0c131302551e0c0f0f02551e060d
0d02551e22111150129012020f124f1202001210127f12ff120412041010
02551212b8ffe4b40d0d025512b802f8400b0a3c5026010f261f260226b8
fff040100f0f025526100d0d0255264935648a182b4e10f42b2b5d724dfd
f62b2f2b5d71723c10fd2b2b2b3ce4003fed3fed12392f3c10ecf4ed0110
edf4ed2b2b313043794034202b07100825282729272a2703060c2624250f
21113b01201f1011072b0a2d000d230a2d0010200e3b000927062d010b25
0e2d002b2b2b012b2b103c103c2b2b2b2a2b818101715d2b005d015d0172
007271011323262726232007061514121633323637113426262335211523
220706151106062320272635343736373633321617163332363704e92323
355479befefd877196f3804b8c411f4152020d194e1d1473e089fe77cc99
5666b295cb4a796f3813131b03056bfe54a05175cdadefc2fec095262501
88663f21262634256dfe613e3afcbdf7b3a4c369571829152333>OUJAAA+TimesNewRoman AddT42Char 
1 6796 82 <00020045ffe403b903af000f001d020cb10202435458401c140c06101002
550c0c0f0f02550c0c0d0d02550c100b0b02550c1a04b8fff4b410100255
04b8fff440130b0b0255040c0f0f0255041725080b10250007003fed3fed
012f2b2b2bcd2f2b2b2b2bcd31301bb10602435458400910250007172508
0b1ab8fff4401b0d0d06551a04140c0d0d0655140c100f0f06550c100d0d
06550c04b8fff0400b0d0d065504041e0c0c1f1e1112392f11392f2b102b
2bcd2b10cd2b003fed3fed31301b404512801501a716b616c501c909c41d
d9090612e70a0148094516571585018c09890fd91b071f403235041f430d
5d369f1f01c615c91a02401f014908102500071725080b1204b8ffc0402b
120b3f4f0401400401d0040140045004600470049004b0040604ec0c4012
0b3f400c9f0c020c431e434b182b4e10f4722b4ded5d5d71722b4bb02853
4bb050515ab10c1e49b11f0449525a58bd000cffc00004ffc0001fffc038
3838594358bc001a0332000400140332e910e91bbc001a03320004001403
32ed10ed59003fed3fed313043794036011d12250e2602251c260a250626
110f1420001d011a2001160914200018071a2001130d1020011b03102001
150b17200019051720002b2b2b2b012b2b2b2b2b2b2b2b2b2b8101720171
722b2b71015d0143584011750275067a0a7a0e7a1278167518751c085d59
5d005d435c5840091c1011391b10113915b8fff0b10b39002b2b2b595959
013217161514060623222726353436361722060615141233323635342726
0200d07e6b76cf7fcf7a677dcc53356b429f82617e694703af9e87af7bfc
80a58bad7ef977413f9e7cc8fedea0c3f48c6000>OUJAAA+TimesNewRoman AddT42Char 
1 0 0 <0002011c0000051c050000030007004db10201bb02be0006000702bfb200
0504b802beb403000a0704b802beb5010019080605bf02be000200030129
0009016b015e00182b10f63cfd3c4e10f43c4dfd3c003f3cfd3c10fc3cfd
3c31302111211125211121011c0400fc2003c0fc400500fb002004c0>OUJAAA+TimesNewRoman AddT42Char 
OUJAAA+TimesNewRoman /CharStrings get begin
/g36 36 def
/g85 85 def
/g69 69 def
/g76 76 def
/g87 87 def
/g68 68 def
/g92 92 def
/;### 3 def
/g54 54 def
/g72 72 def
/g84 84 def
/g88 88 def
/g81 81 def
/g70 70 def
/g42 42 def
/g82 82 def
end
OUJAAA+TimesNewRoman /Encoding get
dup 1 /g36 put
dup 2 /g85 put
dup 3 /g69 put
dup 4 /g76 put
dup 5 /g87 put
dup 6 /g68 put
dup 7 /g92 put
dup 8 /;### put
dup 9 /g54 put
dup 10 /g72 put
dup 11 /g84 put
dup 12 /g88 put
dup 13 /g81 put
dup 14 /g70 put
dup 15 /g42 put
dup 16 /g82 put
pop
end
%ADOEndSubsetFont
reset_gvm
/NCXQMD+TimesNewRoman /OUJAAA+TimesNewRoman findfont ct_VMDictPut
/NCXQMD+TimesNewRoman*1 
[/.notdef /g36 /g85 /g69 /g76 /g87 /g68 /g92 
/;### /g54 /g72 /g84 /g88 /g81 /g70 /g42 
/g82 239{/.notdef}rp]
NCXQMD+TimesNewRoman nf
NCXQMD+TimesNewRoman*1 [12 0 0 -12 0 0 ]msf
149.28 288 mo
(\001\002\003\004\005\002\006\002\007\010\010\011\012\013\014\012\015\016\012\010\010\017\012\015\012\002\006\005\020\002)
[8.63799 4.07396 6.00586 3.24202 3.36201 3.95981 5.40181 3.95982 6 3 3 6.71817 
5.28183 6 5.99998 5.28185 6 5.40182 5.28183 3 3 8.63799 5.40179 6 
5.28186 4.0798 5.28183 3.362 5.99997 0 ]xsh
35.04 387.36 mo
69.96 387.36 li
35.04 387.36 li
cp
35.04 230.28 mo
69.96 230.28 li
35.04 230.28 li
false sop
1 1 1 rgb
ef
.239988 lw
1 lc
1 lj
10 ml
[] 0 dsh
true sadj
35.04 387.36 mo
69.96 387.36 li
35.04 387.36 li
cp
0 0 0 rgb
@
35.04 230.28 mo
69.96 230.28 li
35.04 230.28 li
cp
@
51 308.76 mo
51 381.84 li
@
51 308.76 mo
51 235.8 li
@
53.04 381.24 mo
51 387.36 li
48.96 381.24 li
53.04 381.24 li
ef
48.96 236.4 mo
51 230.28 li
53.04 236.4 li
48.96 236.4 li
ef
27.84 328.92 mo
47.04 328.92 li
47.04 288.72 li
27.84 288.72 li
cp
1 1 1 rgb
ef
0 gry
true set_gvm
%ADOBeginSubsetFont: MALAAA+TT79o00 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /MALAAA+TT79o00 def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.00390625 0 0 0.00390625 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /g25 put
dup 2 /g24 put
dup 3 /g17 put
dup 4 /g19 put
def
/FontBBox {0 0 464 699} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/g25 <1C60D8A8C9B8E90EDD2D5A92A7540D64F599EDE67339B8BDDCB569EBD3
34D2A1AB85ECE25760A10A19BEA3DE04669DDC8399A240AFA7590CB1D5C9189A
74E73B0E0350BACD6391B5B6CE260D7133EBD8B0BA1177415D21D32C2C445575
B9009FF8C134E5B196FC5C6B05C48B885F57B30C0D0B18E2AA84DB78375B93BC
3DC19D2A13358B22FD062C493BE61F4814E6CC25BFE59A56F3E8B2D3B84F09BE
5B7DE40654B01E8EC0E372F0DC9BC0898D3364589BAF59E3618CB89282CBCA9F
B15AEB0B4DDA75A4A121D2378899F1EF983002DDDF1A4826F6B1F0193213B925
53110E62E87EE2953B63> |-
/g24 <1C60D8A8C9B8E90EA29152ED517025F5AA3C001ECD91612E337F4017F2
2D627D29E0B8290FBF259C56194941076E9D8DCF6CC3E0B0847D2AD32F39342F
B594728D28DE249933B8E54844B60ADC7AA1A51D919A227BC6E9AD20B5150DD7
FB93E6455191B81FFD919C484896568D8C27C31FB6C6C6DDAFA03CE78604AE78
F74F2A8AC5789EA105709E628527B0F4D6E6852F7808DA72873EE1FB49A7A003
E074A07AD001C45013A03F9063EB0C20203DD78FD7CCF309EE859F317B> |-
/g17 <1C60D8A8C9B8E90EDE455613A5E5A0EA0D1677DD62BAF5DF25FE02D9F0
C53DEA3E22B757D7A468873BC0B4967BA0E607F0E98AD32F92EA41D4B3469442
DC7E620A51E101FA21AB> |-
/g19 <1C60D8A8C9B8E90EBF3ED1248B956B6FC63132969FD197A9FA3F43496F
C972E73BF91B1B542B3B40D9252B900077CFF734B3BC79BC80570AD109466EEF
23C4B8E99DCF317775DDA091AC32480468F934ECB9ADE29CF7C3C80FB01C1FC2
A76C4AFE14F1D1D0842C4580A5A03F2C8856787D649C2EA7E84BE97B9F315800
6706334A885CE02D77> |-
/.notdef <1C60D8A8C9C4A637> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/NCXQME+TT79o00 /MALAAA+TT79o00 findfont ct_VMDictPut
/NCXQME+TT79o00*1 
[/.notdef /g25 /g24 /g17 /g19 251{/.notdef}rp]
NCXQME+TT79o00 nf
NCXQME+TT79o00*1 [0 -15.96 -15.96 0 0 0 ]msf
42.48 329.04 mo
(\001\002)
[-8.04437 0 ]ysh
42.24 329.28 mo
(\001\002)
[-8.04437 0 ]ysh
42.48 329.28 mo
(\001\002)
[-8.04437 0 ]ysh
42.24 329.04 mo
(\001\002)
[-8.04437 0 ]ysh
42.48 312.96 mo
(\003)sh
42.24 313.2 mo
(\003)sh
42.48 313.2 mo
(\003)sh
42.24 312.96 mo
(\003)sh
42.48 304.8 mo
(\004\004)
[-8.04437 0 ]ysh
42.24 305.04 mo
(\004\004)
[-8.04437 0 ]ysh
42.48 305.04 mo
(\004\004)
[-8.04437 0 ]ysh
42.24 304.8 mo
(\004\004)
[-8.04437 0 ]ysh
104.76 300 mo
100.44 300 li
102.6 295.68 li
104.76 300 li
0 .439209 .751953 rgb
ef
.999996 lw
104.76 300 mo
100.44 300 li
102.6 295.68 li
104.76 300 li
cp
@
102.6 300 mo
102.6 417.72 li
@
171.96 293.88 mo
167.76 293.88 li
169.8 289.68 li
171.96 293.88 li
ef
171.96 293.88 mo
167.76 293.88 li
169.8 289.68 li
171.96 293.88 li
cp
@
169.8 293.88 mo
169.8 417.72 li
@
336.36 341.88 mo
332.16 341.88 li
334.32 337.56 li
336.36 341.88 li
ef
336.36 341.88 mo
332.16 341.88 li
334.32 337.56 li
336.36 341.88 li
cp
@
334.32 341.88 mo
334.32 417.72 li
@
510.48 341.88 mo
506.28 341.88 li
508.44 337.56 li
510.48 341.88 li
ef
510.48 341.88 mo
506.28 341.88 li
508.44 337.56 li
510.48 341.88 li
cp
@
508.44 341.88 mo
508.44 417.72 li
@
219.36 331.92 mo
219.36 328.56 222.12 325.92 225.48 325.92 cv
228.84 325.92 231.48 328.56 231.48 331.92 cv
231.48 335.28 228.84 337.92 225.48 337.92 cv
222.12 337.92 219.36 335.28 219.36 331.92 cv
1 1 1 rgb
ef
1.49999 lw
219.36 331.92 mo
219.36 328.56 222.12 325.92 225.48 325.92 cv
228.84 325.92 231.48 328.56 231.48 331.92 cv
231.48 335.28 228.84 337.92 225.48 337.92 cv
222.12 337.92 219.36 335.28 219.36 331.92 cv
cp
0 0 0 rgb
@
250.8 331.92 mo
250.8 328.56 253.56 325.92 256.92 325.92 cv
260.28 325.92 262.92 328.56 262.92 331.92 cv
262.92 335.28 260.28 337.92 256.92 337.92 cv
253.56 337.92 250.8 335.28 250.8 331.92 cv
1 1 1 rgb
ef
250.8 331.92 mo
250.8 328.56 253.56 325.92 256.92 325.92 cv
260.28 325.92 262.92 328.56 262.92 331.92 cv
262.92 335.28 260.28 337.92 256.92 337.92 cv
253.56 337.92 250.8 335.28 250.8 331.92 cv
cp
0 0 0 rgb
@
282.24 331.92 mo
282.24 328.56 285 325.92 288.36 325.92 cv
291.72 325.92 294.36 328.56 294.36 331.92 cv
294.36 335.28 291.72 337.92 288.36 337.92 cv
285 337.92 282.24 335.28 282.24 331.92 cv
1 1 1 rgb
ef
282.24 331.92 mo
282.24 328.56 285 325.92 288.36 325.92 cv
291.72 325.92 294.36 328.56 294.36 331.92 cv
294.36 335.28 291.72 337.92 288.36 337.92 cv
285 337.92 282.24 335.28 282.24 331.92 cv
cp
0 0 0 rgb
@
313.68 331.92 mo
313.68 328.56 316.44 325.92 319.8 325.92 cv
323.16 325.92 325.8 328.56 325.8 331.92 cv
325.8 335.28 323.16 337.92 319.8 337.92 cv
316.44 337.92 313.68 335.28 313.68 331.92 cv
1 1 1 rgb
ef
313.68 331.92 mo
313.68 328.56 316.44 325.92 319.8 325.92 cv
323.16 325.92 325.8 328.56 325.8 331.92 cv
325.8 335.28 323.16 337.92 319.8 337.92 cv
316.44 337.92 313.68 335.28 313.68 331.92 cv
cp
0 0 0 rgb
@
345.12 331.92 mo
345.12 328.56 347.88 325.92 351.24 325.92 cv
354.6 325.92 357.24 328.56 357.24 331.92 cv
357.24 335.28 354.6 337.92 351.24 337.92 cv
347.88 337.92 345.12 335.28 345.12 331.92 cv
1 1 1 rgb
ef
345.12 331.92 mo
345.12 328.56 347.88 325.92 351.24 325.92 cv
354.6 325.92 357.24 328.56 357.24 331.92 cv
357.24 335.28 354.6 337.92 351.24 337.92 cv
347.88 337.92 345.12 335.28 345.12 331.92 cv
cp
0 0 0 rgb
@
376.56 331.92 mo
376.56 328.56 379.32 325.92 382.68 325.92 cv
386.04 325.92 388.68 328.56 388.68 331.92 cv
388.68 335.28 386.04 337.92 382.68 337.92 cv
379.32 337.92 376.56 335.28 376.56 331.92 cv
1 1 1 rgb
ef
376.56 331.92 mo
376.56 328.56 379.32 325.92 382.68 325.92 cv
386.04 325.92 388.68 328.56 388.68 331.92 cv
388.68 335.28 386.04 337.92 382.68 337.92 cv
379.32 337.92 376.56 335.28 376.56 331.92 cv
cp
0 0 0 rgb
@
408 331.92 mo
408 328.56 410.76 325.92 414.12 325.92 cv
417.36 325.92 420.12 328.56 420.12 331.92 cv
420.12 335.28 417.36 337.92 414.12 337.92 cv
410.76 337.92 408 335.28 408 331.92 cv
1 1 1 rgb
ef
408 331.92 mo
408 328.56 410.76 325.92 414.12 325.92 cv
417.36 325.92 420.12 328.56 420.12 331.92 cv
420.12 335.28 417.36 337.92 414.12 337.92 cv
410.76 337.92 408 335.28 408 331.92 cv
cp
0 0 0 rgb
@
439.44 331.92 mo
439.44 328.56 442.2 325.92 445.56 325.92 cv
448.8 325.92 451.56 328.56 451.56 331.92 cv
451.56 335.28 448.8 337.92 445.56 337.92 cv
442.2 337.92 439.44 335.28 439.44 331.92 cv
1 1 1 rgb
ef
439.44 331.92 mo
439.44 328.56 442.2 325.92 445.56 325.92 cv
448.8 325.92 451.56 328.56 451.56 331.92 cv
451.56 335.28 448.8 337.92 445.56 337.92 cv
442.2 337.92 439.44 335.28 439.44 331.92 cv
cp
0 0 0 rgb
@
487.8 332.28 mo
487.8 328.92 490.56 326.28 493.92 326.28 cv
497.16 326.28 499.92 328.92 499.92 332.28 cv
499.92 335.64 497.16 338.28 493.92 338.28 cv
490.56 338.28 487.8 335.64 487.8 332.28 cv
1 1 1 rgb
ef
487.8 332.28 mo
487.8 328.92 490.56 326.28 493.92 326.28 cv
497.16 326.28 499.92 328.92 499.92 332.28 cv
499.92 335.64 497.16 338.28 493.92 338.28 cv
490.56 338.28 487.8 335.64 487.8 332.28 cv
cp
0 0 0 rgb
@
514.44 332.28 mo
514.44 328.92 517.2 326.28 520.44 326.28 cv
523.8 326.28 526.56 328.92 526.56 332.28 cv
526.56 335.64 523.8 338.28 520.44 338.28 cv
517.2 338.28 514.44 335.64 514.44 332.28 cv
1 1 1 rgb
ef
514.44 332.28 mo
514.44 328.92 517.2 326.28 520.44 326.28 cv
523.8 326.28 526.56 328.92 526.56 332.28 cv
526.56 335.64 523.8 338.28 520.44 338.28 cv
517.2 338.28 514.44 335.64 514.44 332.28 cv
cp
0 0 0 rgb
@
86.88 280.8 mo
86.52 281.04 86.4 281.52 86.52 281.88 cv
86.76 282.24 87.12 282.36 87.48 282.24 cv
87.96 282 88.08 281.52 87.84 281.16 cv
87.72 280.8 87.24 280.68 86.88 280.8 cv
ef
86.28 276.6 mo
85.92 276.84 85.92 277.44 86.16 277.8 cv
86.4 278.04 87 278.16 87.36 277.8 cv
87.6 277.56 87.72 276.96 87.36 276.72 cv
87.12 276.36 86.64 276.36 86.28 276.6 cv
ef
86.28 272.04 mo
85.92 272.52 86.04 273.12 86.4 273.48 cv
86.76 273.84 87.36 273.72 87.72 273.36 cv
88.08 272.88 88.08 272.28 87.6 271.92 cv
87.24 271.56 86.64 271.68 86.28 272.04 cv
ef
87.12 267.36 mo
86.64 267.84 86.76 268.68 87.24 269.04 cv
87.84 269.4 88.56 269.4 88.92 268.8 cv
89.4 268.32 89.28 267.6 88.8 267.12 cv
88.2 266.76 87.48 266.88 87.12 267.36 cv
ef
88.92 262.56 mo
88.44 263.16 88.44 264 88.92 264.6 cv
89.52 265.2 90.48 265.2 90.96 264.6 cv
91.56 264 91.56 263.04 90.96 262.56 cv
90.48 261.96 89.52 261.96 88.92 262.56 cv
ef
92.52 258.24 mo
91.68 258.72 91.44 259.8 91.92 260.52 cv
92.4 261.36 93.36 261.72 94.2 261.24 cv
95.04 260.76 95.4 259.68 94.92 258.84 cv
94.44 258 93.36 257.76 92.52 258.24 cv
ef
98.04 255.48 mo
96.96 255.6 96.12 256.56 96.24 257.64 cv
96.36 258.72 97.32 259.56 98.4 259.44 cv
99.6 259.32 100.32 258.36 100.32 257.28 cv
100.2 256.2 99.24 255.36 98.04 255.48 cv
ef
105.12 257.16 mo
104.04 256.44 102.6 256.56 101.88 257.52 cv
101.04 258.48 101.16 259.92 102.24 260.76 cv
103.2 261.6 104.64 261.36 105.36 260.4 cv
106.2 259.44 106.08 258 105.12 257.16 cv
ef
79.08 266.64 mo
79.08 266.16 78.72 265.92 78.24 265.92 cv
77.88 265.92 77.52 266.16 77.52 266.64 cv
77.52 267 77.88 267.36 78.36 267.36 cv
78.72 267.36 79.08 267 79.08 266.64 cv
ef
81.84 262.2 mo
81.72 261.72 81.24 261.48 80.76 261.6 cv
80.4 261.72 80.16 262.2 80.28 262.56 cv
80.4 263.04 80.88 263.28 81.24 263.16 cv
81.72 263.04 81.96 262.56 81.84 262.2 cv
ef
85.44 258 mo
85.2 257.52 84.6 257.4 84.12 257.52 cv
83.64 257.76 83.4 258.36 83.64 258.84 cv
83.88 259.32 84.48 259.56 84.96 259.32 cv
85.44 259.08 85.68 258.6 85.44 258 cv
ef
89.88 254.4 mo
89.52 253.92 88.8 253.68 88.2 253.92 cv
87.6 254.16 87.36 254.88 87.72 255.48 cv
87.96 256.08 88.68 256.32 89.28 256.08 cv
89.88 255.72 90.12 255 89.88 254.4 cv
ef
95.16 251.76 mo
94.92 251.04 94.08 250.68 93.36 250.92 cv
92.64 251.16 92.16 252 92.52 252.72 cv
92.76 253.56 93.6 253.92 94.32 253.68 cv
95.04 253.32 95.52 252.48 95.16 251.76 cv
ef
101.4 251.04 mo
101.4 250.2 100.56 249.48 99.6 249.48 cv
98.64 249.6 97.92 250.44 98.04 251.4 cv
98.04 252.36 98.88 252.96 99.84 252.96 cv
100.8 252.84 101.52 252 101.4 251.04 cv
ef
107.76 253.44 mo
108.12 252.36 107.52 251.16 106.56 250.8 cv
105.48 250.44 104.28 250.92 103.92 252 cv
103.56 253.08 104.04 254.16 105.12 254.64 cv
106.2 255 107.28 254.4 107.76 253.44 cv
ef
110.64 260.04 mo
111.72 259.44 112.2 258.12 111.72 256.92 cv
111.12 255.84 109.8 255.36 108.6 255.84 cv
107.4 256.44 106.92 257.88 107.52 258.96 cv
108.12 260.16 109.44 260.64 110.64 260.04 cv
ef
125.64 290.16 mo
125.4 289.68 124.92 289.56 124.56 289.8 cv
124.2 289.92 124.08 290.4 124.2 290.76 cv
124.44 291.12 124.92 291.24 125.28 291.12 cv
125.64 290.88 125.76 290.52 125.64 290.16 cv
ef
121.2 290.28 mo
120.96 290.04 120.36 289.92 120.12 290.28 cv
119.76 290.52 119.64 291 120 291.36 cv
120.24 291.72 120.84 291.72 121.08 291.48 cv
121.44 291.24 121.56 290.64 121.2 290.28 cv
ef
116.76 289.92 mo
116.28 289.56 115.68 289.56 115.32 290.04 cv
114.96 290.4 115.08 291 115.44 291.36 cv
115.92 291.72 116.52 291.6 116.88 291.24 cv
117.24 290.88 117.12 290.28 116.76 289.92 cv
ef
112.2 288.72 mo
111.72 288.24 111 288.36 110.52 288.84 cv
110.16 289.44 110.28 290.16 110.76 290.52 cv
111.24 291 111.96 290.88 112.44 290.4 cv
112.8 289.8 112.68 289.08 112.2 288.72 cv
ef
108 286.68 mo
107.4 286.08 106.44 286.08 105.96 286.68 cv
105.36 287.16 105.36 288.12 105.96 288.72 cv
106.56 289.2 107.4 289.2 108 288.72 cv
108.6 288.12 108.6 287.16 108 286.68 cv
ef
104.64 283.44 mo
104.16 282.6 103.08 282.24 102.24 282.72 cv
101.4 283.2 101.16 284.28 101.64 285.12 cv
102.12 285.96 103.08 286.2 103.92 285.72 cv
104.76 285.24 105.12 284.28 104.64 283.44 cv
ef
102.84 279.24 mo
102.72 278.04 101.76 277.32 100.68 277.32 cv
99.6 277.44 98.76 278.4 98.88 279.6 cv
98.88 280.68 99.96 281.52 101.04 281.4 cv
102.12 281.28 102.96 280.32 102.84 279.24 cv
ef
104.16 275.52 mo
105 274.44 104.76 273 103.8 272.28 cv
102.84 271.44 101.4 271.56 100.56 272.52 cv
99.72 273.6 99.96 275.04 100.92 275.76 cv
101.88 276.6 103.32 276.48 104.16 275.52 cv
ef
110.04 300.12 mo
110.4 300.12 110.76 299.76 110.76 299.28 cv
110.76 298.92 110.4 298.56 110.04 298.56 cv
109.56 298.56 109.2 298.92 109.2 299.4 cv
109.2 299.76 109.56 300.12 110.04 300.12 cv
ef
105.96 297.36 mo
106.44 297.24 106.68 296.88 106.56 296.4 cv
106.44 295.92 105.96 295.68 105.6 295.8 cv
105.12 295.92 104.88 296.4 105 296.88 cv
105.12 297.24 105.6 297.48 105.96 297.36 cv
ef
102.24 294 mo
102.72 293.76 102.96 293.16 102.72 292.68 cv
102.48 292.2 101.88 291.96 101.4 292.2 cv
100.92 292.44 100.8 293.04 100.92 293.52 cv
101.16 294 101.76 294.24 102.24 294 cv
ef
98.88 289.92 mo
99.48 289.68 99.72 288.96 99.48 288.36 cv
99.12 287.76 98.4 287.52 97.8 287.76 cv
97.2 288.12 96.96 288.84 97.32 289.44 cv
97.56 290.04 98.28 290.28 98.88 289.92 cv
ef
96.12 285.12 mo
96.96 284.88 97.32 284.04 97.08 283.32 cv
96.72 282.6 95.88 282.12 95.16 282.48 cv
94.44 282.72 94.08 283.56 94.32 284.28 cv
94.56 285 95.4 285.48 96.12 285.12 cv
ef
94.8 279.6 mo
95.64 279.6 96.36 278.76 96.36 277.8 cv
96.24 276.84 95.4 276.12 94.44 276.24 cv
93.48 276.24 92.88 277.08 92.88 278.04 cv
93 279 93.84 279.72 94.8 279.6 cv
ef
95.4 273.72 mo
96.48 274.08 97.56 273.6 97.92 272.52 cv
98.4 271.44 97.8 270.36 96.84 269.88 cv
95.76 269.52 94.56 270.12 94.2 271.08 cv
93.84 272.16 94.32 273.36 95.4 273.72 cv
ef
99.24 269.04 mo
99.84 270.24 101.16 270.72 102.36 270.12 cv
103.56 269.52 104.04 268.2 103.44 267 cv
102.84 265.92 101.52 265.44 100.32 265.92 cv
99.24 266.52 98.76 267.84 99.24 269.04 cv
ef
134.16 253.44 mo
134.52 253.2 134.64 252.72 134.52 252.36 cv
134.28 252 133.92 251.88 133.44 252 cv
133.08 252.24 132.96 252.72 133.2 253.08 cv
133.32 253.44 133.8 253.56 134.16 253.44 cv
ef
134.76 257.64 mo
135.12 257.4 135.12 256.8 134.88 256.56 cv
134.52 256.2 134.04 256.08 133.68 256.44 cv
133.44 256.68 133.32 257.28 133.68 257.52 cv
133.92 257.88 134.4 258 134.76 257.64 cv
ef
134.76 262.2 mo
135.12 261.72 135 261.12 134.64 260.76 cv
134.28 260.52 133.68 260.52 133.32 260.88 cv
132.96 261.36 132.96 261.96 133.44 262.32 cv
133.8 262.68 134.4 262.56 134.76 262.2 cv
ef
133.92 266.88 mo
134.4 266.4 134.28 265.68 133.8 265.2 cv
133.2 264.84 132.48 264.96 132.12 265.44 cv
131.64 265.92 131.76 266.64 132.24 267.12 cv
132.84 267.48 133.56 267.36 133.92 266.88 cv
ef
132.12 271.68 mo
132.6 271.08 132.6 270.24 132.12 269.64 cv
131.52 269.04 130.56 269.04 130.08 269.64 cv
129.48 270.24 129.48 271.2 130.08 271.68 cv
130.56 272.28 131.52 272.28 132.12 271.68 cv
ef
128.52 276 mo
129.36 275.52 129.6 274.56 129.12 273.72 cv
128.64 272.88 127.56 272.52 126.84 273 cv
126 273.48 125.64 274.56 126.12 275.4 cv
126.6 276.24 127.68 276.48 128.52 276 cv
ef
122.88 278.76 mo
124.08 278.76 124.92 277.68 124.8 276.6 cv
124.68 275.52 123.72 274.68 122.64 274.8 cv
121.44 274.92 120.72 275.88 120.72 276.96 cv
120.84 278.04 121.8 278.88 122.88 278.76 cv
ef
115.92 277.08 mo
117 277.92 118.44 277.68 119.16 276.72 cv
120 275.76 119.88 274.32 118.8 273.48 cv
117.84 272.64 116.4 272.88 115.56 273.84 cv
114.84 274.8 114.96 276.24 115.92 277.08 cv
ef
141.96 267.6 mo
141.96 268.08 142.32 268.44 142.68 268.44 cv
143.16 268.44 143.52 268.08 143.52 267.6 cv
143.52 267.24 143.16 266.88 142.68 266.88 cv
142.32 266.88 141.96 267.24 141.96 267.6 cv
ef
139.2 272.04 mo
139.32 272.52 139.8 272.76 140.16 272.64 cv
140.64 272.52 140.88 272.04 140.76 271.68 cv
140.64 271.2 140.16 270.96 139.8 271.08 cv
139.32 271.2 139.08 271.68 139.2 272.04 cv
ef
135.6 276.24 mo
135.84 276.72 136.44 276.96 136.92 276.72 cv
137.4 276.48 137.64 275.88 137.4 275.4 cv
137.16 274.92 136.56 274.68 136.08 274.92 cv
135.6 275.16 135.36 275.76 135.6 276.24 cv
ef
131.16 279.84 mo
131.52 280.44 132.24 280.68 132.84 280.32 cv
133.32 280.08 133.56 279.36 133.32 278.76 cv
133.08 278.16 132.36 277.92 131.76 278.16 cv
131.16 278.52 130.92 279.24 131.16 279.84 cv
ef
125.88 282.48 mo
126.12 283.2 126.96 283.56 127.68 283.32 cv
128.4 283.08 128.88 282.24 128.52 281.52 cv
128.28 280.68 127.44 280.32 126.72 280.68 cv
126 280.92 125.52 281.76 125.88 282.48 cv
ef
119.52 283.2 mo
119.64 284.16 120.48 284.88 121.44 284.76 cv
122.4 284.64 123.12 283.8 123 282.96 cv
122.88 282 122.16 281.28 121.2 281.28 cv
120.24 281.4 119.52 282.24 119.52 283.2 cv
ef
113.28 280.8 mo
112.92 281.88 113.4 283.08 114.48 283.44 cv
115.56 283.8 116.64 283.32 117.12 282.24 cv
117.48 281.16 117 280.08 115.92 279.72 cv
114.84 279.24 113.76 279.84 113.28 280.8 cv
ef
110.4 274.92 mo
109.32 275.4 108.84 276.84 109.32 277.92 cv
109.92 279.12 111.24 279.6 112.44 279 cv
113.64 278.52 114.12 277.08 113.52 276 cv
112.92 274.8 111.6 274.32 110.4 274.92 cv
ef
95.4 244.2 mo
95.64 244.56 96.12 244.68 96.48 244.44 cv
96.84 244.32 96.96 243.84 96.84 243.48 cv
96.6 243.12 96.12 243 95.76 243.12 cv
95.4 243.36 95.28 243.72 95.4 244.2 cv
ef
99.84 243.96 mo
100.08 244.2 100.68 244.32 100.92 243.96 cv
101.28 243.72 101.28 243.24 101.04 242.88 cv
100.8 242.52 100.2 242.52 99.84 242.76 cv
99.6 243.12 99.48 243.6 99.84 243.96 cv
ef
104.28 244.32 mo
104.76 244.68 105.36 244.68 105.72 244.2 cv
106.08 243.84 105.96 243.24 105.6 242.88 cv
105.12 242.52 104.52 242.64 104.16 243 cv
103.8 243.36 103.92 244.08 104.28 244.32 cv
ef
108.84 245.52 mo
109.32 246 110.04 245.88 110.52 245.4 cv
110.88 244.8 110.76 244.08 110.28 243.72 cv
109.8 243.24 108.96 243.36 108.6 243.84 cv
108.24 244.44 108.24 245.16 108.84 245.52 cv
ef
113.04 247.56 mo
113.64 248.16 114.6 248.16 115.08 247.56 cv
115.68 247.08 115.68 246.12 115.08 245.52 cv
114.48 245.04 113.64 245.04 113.04 245.52 cv
112.44 246.12 112.44 247.08 113.04 247.56 cv
ef
116.4 250.8 mo
116.88 251.64 117.96 252 118.8 251.52 cv
119.64 251.04 119.88 249.96 119.4 249.12 cv
118.92 248.28 117.84 248.04 117.12 248.52 cv
116.28 249 115.92 250.08 116.4 250.8 cv
ef
118.2 255 mo
118.32 256.2 119.28 256.92 120.36 256.92 cv
121.44 256.8 122.28 255.84 122.16 254.76 cv
122.04 253.56 121.08 252.84 120 252.84 cv
118.92 252.96 118.08 253.92 118.2 255 cv
ef
116.88 258.84 mo
116.04 259.8 116.28 261.24 117.24 262.08 cv
118.2 262.8 119.64 262.68 120.48 261.72 cv
121.32 260.64 121.08 259.2 120.12 258.48 cv
119.16 257.64 117.72 257.76 116.88 258.84 cv
ef
111 234.12 mo
110.64 234.12 110.28 234.48 110.28 234.96 cv
110.28 235.32 110.64 235.68 111 235.68 cv
111.48 235.68 111.72 235.32 111.72 234.96 cv
111.72 234.48 111.48 234.12 111 234.12 cv
ef
115.08 236.88 mo
114.6 237 114.36 237.48 114.48 237.84 cv
114.6 238.32 115.08 238.56 115.44 238.44 cv
115.92 238.32 116.16 237.84 116.04 237.48 cv
115.92 237 115.44 236.76 115.08 236.88 cv
ef
118.8 240.24 mo
118.32 240.48 118.08 241.08 118.32 241.56 cv
118.56 242.04 119.04 242.28 119.64 242.04 cv
120.12 241.8 120.24 241.2 120.12 240.72 cv
119.88 240.24 119.28 240 118.8 240.24 cv
ef
122.16 244.32 mo
121.56 244.56 121.32 245.28 121.56 245.88 cv
121.92 246.48 122.64 246.72 123.24 246.48 cv
123.84 246.12 124.08 245.4 123.72 244.8 cv
123.48 244.32 122.76 244.08 122.16 244.32 cv
ef
124.92 249.12 mo
124.08 249.36 123.72 250.2 123.96 250.92 cv
124.32 251.64 125.16 252.12 125.88 251.76 cv
126.6 251.52 126.96 250.68 126.72 249.96 cv
126.48 249.24 125.64 248.76 124.92 249.12 cv
ef
126.24 254.64 mo
125.28 254.76 124.68 255.48 124.68 256.44 cv
124.8 257.4 125.64 258.12 126.6 258.12 cv
127.56 258 128.16 257.16 128.16 256.2 cv
128.04 255.24 127.2 254.52 126.24 254.64 cv
ef
125.64 260.52 mo
124.56 260.16 123.48 260.64 123 261.72 cv
122.64 262.8 123.24 263.88 124.2 264.36 cv
125.28 264.72 126.48 264.24 126.84 263.16 cv
127.2 262.08 126.72 261 125.64 260.52 cv
ef
121.8 265.2 mo
121.2 264.12 119.76 263.64 118.68 264.12 cv
117.48 264.72 117 266.04 117.6 267.24 cv
118.2 268.32 119.52 268.8 120.72 268.32 cv
121.8 267.72 122.28 266.4 121.8 265.2 cv
ef
0 gry
true set_gvm
%ADOBeginSubsetFont: OLEBAA+TT7Fo00 Initial
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
12 dict dup begin
/FontType 1 def
/FontName /OLEBAA+TT7Fo00 def
/FontInfo 5 dict dup begin
/ItalicAngle 0 def
/WasEmbedded true def
end def
/PaintType 0 def
/FontMatrix [0.00390625 0 0 0.00390625 0 0] def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 1 /g68 put
dup 2 /g69 put
dup 3 /g70 put
dup 4 /g71 put
def
/FontBBox {0 0 488 726} def
end
systemdict begin
dup /Private
7 dict dup begin
/|- {def} def
/| {put} def
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/Subrs 5 array
dup 0 <1C60D8A8CC31FE2BF6E07AA3E541E2> |
dup 1 <1C60D8A8C9C3D06D9E> |
dup 2 <1C60D8A8C9C202D79A> |
dup 3 <1C60D8A849> |
dup 4 <1C60D8A8CC3674F41144B13B77> |
def
put
dup /CharStrings
5 dict dup begin
/g68 <1C60D8A8C9B8EBAD6374BE631BEF6A2FE41854AE312D88F5889ECED796
A2869F0C43C26E63A012E8CA76B2FF24E1F12C533BE710FFBBB85460F3F060F3
BC2E2626495FB57AC4DB3E70FEBED07B1A4B249100873E89B37396D3C2659413
8E285C12817D6E49C75872C970643161DEFAB78162DD4BEE40A60516BFA1B0AE
6FE75128D2277310203A731D2EF468659B6AC213A6266FC186DAD36C8A2EAAF5
E23A12450A974AEF36DDAF350CE143678F628CC014E47D0DB335C4976C452728
6DDBF0B94DF1CE444B9B435A7FF1C1C4C52A33A998D040526EA4FFCE15DF1E5E
D6D2F1DD2E6E81EE1A644D6FB958AA6F15F3F2F8D44A3365A7568BAEFEBAA707> |-
/g69 <1C60D8A8C9B8EBAD6DE77A880F56210FF617FEA2542E790238217451AE
0A4C64316276D6A1C8058C93268AFB1D60A5E2E135048AD8877810EC26D52A74
4B8A108E32E3897FBE02313975968B07577A8A5780AD2CD7B6B3C38D32B15E23
71F30559D5E5FE7B06F30DFABE0757DB6F917CAD48971E564533D36FE4F7CCA7
A0501DF1CB8AD8EEDEBC9215ACD8D1E1E42EC4CAD1F7BA1EDF4D110F604A8150
501CF7E377E87D38413FE8B44AEB6E> |-
/g70 <1C60D8A8C9B8EBAD3F154F48F908D2526CD205B8AE76F7AE6129C79580
58A9D2CE87517FC9A294F6F34BB75332C4AB49313BA04512E5B744BD773E73B9
DC190813CA5319C73E73B73B2D2D84366A630D768BFC4AB6257D642CC9A89B70
84C69CC35381D75D517CD21DFFCD3A73FF6CCCD4045E9267960CA0D2E925C6E7
4D8B49DD7EDBD717BCF7E3900E3AF2AB27C99B9162D8784951FF47B5106B02DB
092C5ED2A52F7B798343FA9FF8> |-
/g71 <1C60D8A8C9B8EBAD38A4659194531B50753A3A83CD263E2FA311F181B9
D092CF9D8D92CFDCAA14B4DE1162254775DFAA93AE36B8E8C2E5F46874646898
7751ABB3609A7EEA4E6460828ABBF715065F38A51EEED3D2113A2A051BE39859
F4B5D0080E733E202C9C8304DFB36C4E159B2F8E47C33A6A27AD78195D81602B
F931ECFAA5A5CFA00519E1BA9CC817BC604BFF0DDC9DA9CFB10211036ABE1831
B4126FB8312C5A7711A71A7A0DCF7A5879A23316926106E73C67C07CEBA612B6
8EAD15681DB00868E484E1798FF5D195311033483C> |-
/.notdef <1C60D8A8C9C4A637> |-
end put
end
dup /FontName get exch definefont pop
end
%ADOEndSubsetFont
reset_gvm
/NCXQMF+TT7Fo00 /OLEBAA+TT7Fo00 findfont ct_VMDictPut
/NCXQMF+TT7Fo00*1 
[/.notdef /g68 /g69 /g70 /g71 251{/.notdef}rp]
NCXQMF+TT7Fo00 nf
NCXQMF+TT7Fo00*1 [24 0 0 -24 0 0 ]msf
96.6 437.64 mo
(\001)sh
96.36 437.88 mo
(\001\001)
[.242203 0 ]xsh
96.36 437.64 mo
(\001\002)
[66.8421 0 ]xsh
162.96 437.88 mo
(\002\002)
[.242203 0 ]xsh
162.96 437.64 mo
(\002\003)
[166.082 0 ]xsh
328.8 437.88 mo
(\003\003)
[.242218 0 ]xsh
328.8 437.64 mo
(\003\004)
[174.602 0 ]xsh
503.16 437.88 mo
(\004\004)
[.242218 0 ]xsh
503.16 437.64 mo
(\004)sh
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
true set_gvm
/NCXQLZ+*1 uf
/NCXQLZ+ uf
/ uf
/NCXQMB+*1 uf
/NCXQMB+ uf
/ uf
reset_gvm
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.29 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
