%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Roman
%%Title: logo.pdf
%%Creator: Adobe Acrobat 8.0
%%For: Administrator
%%CreationDate: 2017/6/9, 21:24:47
%%BoundingBox: 32 29 184 180
%%HiResBoundingBox: 0 0 212.5980 204.0951
%%CropBox: 0 0 212.5980 204.0951
%%LanguageLevel: 2
%%DocumentNeededResources: (atend)
%%DocumentSuppliedResources: (atend)
%%DocumentNeededFeatures: (atend)
%%DocumentSuppliedFeatures: (atend)
%%DocumentData: Clean7Bit
%%Pages: (atend)
%%DocumentProcessColors:  Cyan Magenta Black
%%DocumentCustomColors: (atend)
%%EndComments
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 73 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2005 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{aload pop setcolor}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	1 index dup/ID get exch/Pattern add_res
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		clonedict
		begin
			/Intent Intent def
			currentdict
		end
		setcolorrendering
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.30 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.30 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.30 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get ne dup
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
				if
				end
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$None SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2003 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
										]cvx def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			AGMIMG_&customcolorimage
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2016 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
[/NamespacePush pdfmark_5
[/_objdef {Doc_Metadata} /type /stream /OBJ pdfmark_5
[{Doc_Metadata} (% &end XMP packet& %) ReadBypdfmark_5
<?xpacket begin='﻿' id='W5M0MpCehiHzreSzNTczkc9d'?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.0-c316 44.253921, Sun Oct 01 2006 17:14:39">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xap="http://ns.adobe.com/xap/1.0/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:pdf="http://ns.adobe.com/pdf/1.3/"
   xap:CreateDate="2016-06-03T09:00:10+08:00"
   xap:CreatorTool="CorelDRAW X7"
   xap:ModifyDate="2017-06-09T21:25:05+08:00"
   dc:format="application/pdf"
   pdf:Producer="Corel PDF Engine Version 17.3.0.772">
   <dc:creator>
    <rdf:Seq>
     <rdf:li>Yu He</rdf:li>
    </rdf:Seq>
   </dc:creator>
   <dc:title>
    <rdf:Alt>
     <rdf:li xml:lang="x-default">logo.cdr</rdf:li>
    </rdf:Alt>
   </dc:title>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
                                                                                                                                
<?xpacket end='w'?>


% &end XMP packet& %

[{Doc_Metadata} 2 dict begin /Type /Metadata def /Subtype /XML def currentdict end /PUT pdfmark_5
[/Document 1 dict begin /Metadata {Doc_Metadata} def currentdict end /BDC pdfmark_5
[/NamespacePop pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
Adobe_AGM_Core/ps gx
gsave
<< /0 
[/CIEBasedABC 20 dict
dup /CreationDate (19980209064900) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (sRGB IEC61966-2.1) put
dup /ColorSpace (RGB ) put
dup /Copyright (Copyright (c) 1998 Hewlett-Packard Company) put
dup /ProfileID <1D3FDA2EDB4A89AB60A23C5F7C7D81DD> put
dup /DecodeABC [
{{0 0.00031 0.00061 0.0009 0.0012 0.00151 0.00181 0.00212 0.00242 0.00271
0.00302 0.00334 0.00366 0.00401 0.00437 0.00476 0.00515 0.00558 0.00602 0.00648
0.00696 0.00745 0.00798 0.00852 0.00908 0.00966 0.01027 0.01089 0.01153 0.0122
0.0129 0.01362 0.01435 0.01511 0.01589 0.0167 0.01752 0.01837 0.01925 0.02015
0.02107 0.02203 0.02299 0.02399 0.02501 0.02606 0.02713 0.02822 0.02934 0.03049
0.03166 0.03287 0.03409 0.03533 0.03662 0.03792 0.03925 0.04061 0.04199 0.04341
0.04484 0.04631 0.04781 0.04933 0.05088 0.05245 0.05406 0.05569 0.05736 0.05904
0.06077 0.06252 0.0643 0.06611 0.06794 0.06981 0.0717 0.07363 0.07558 0.07756
0.07959 0.08162 0.0837 0.08581 0.08795 0.09011 0.09231 0.09454 0.0968 0.09909
0.10142 0.10376 0.10616 0.10857 0.11102 0.11351 0.11602 0.11856 0.12114 0.12376
0.12639 0.12907 0.13178 0.13452 0.13729 0.14009 0.14294 0.14581 0.14873 0.15166
0.15463 0.15765 0.16068 0.16376 0.16687 0.17001 0.17319 0.17641 0.17965 0.18293
0.18625 0.1896 0.19299 0.19641 0.19987 0.20335 0.20688 0.21045 0.21405 0.21767
0.22134 0.22505 0.22879 0.23257 0.23638 0.24023 0.24411 0.24804 0.25199 0.25599
0.26002 0.26409 0.2682 0.27234 0.27651 0.28073 0.28499 0.28928 0.29361 0.29798
0.30238 0.30683 0.3113 0.31582 0.32038 0.32497 0.3296 0.33428 0.33898 0.34372
0.34851 0.35333 0.3582 0.3631 0.36804 0.37302 0.37804 0.3831 0.38819 0.39333
0.3985 0.40372 0.40898 0.41427 0.41961 0.42498 0.43039 0.43585 0.44134 0.44688
0.45245 0.45806 0.46372 0.46942 0.47516 0.48094 0.48675 0.49261 0.49851 0.50445
0.51043 0.51646 0.52253 0.52863 0.53477 0.54097 0.54719 0.55347 0.55979 0.56613
0.57253 0.57897 0.58545 0.59198 0.59855 0.60515 0.6118 0.61849 0.62524 0.63201
0.63884 0.6457 0.6526 0.65955 0.66654 0.67357 0.68066 0.68778 0.69495 0.70215
0.7094 0.71669 0.72404 0.73142 0.73885 0.74632 0.75383 0.76138 0.76899 0.77663
0.78433 0.79206 0.79983 0.80765 0.81552 0.82343 0.83139 0.8394 0.84744 0.85554
0.86367 0.87185 0.88007 0.88835 0.89666 0.90503 0.91343 0.92189 0.93038 0.93892
0.94751 0.95614 0.96482 0.97355 0.98232 0.99114 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
dup
] put
dup /MatrixABC [
0.2180189128 0.1112492942 0.0069565698
0.1925612492 0.358452993 0.0485281768
0.0715286348 0.0303053423 0.3569742448
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0 0 0] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]

/CSA add_res
/CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
<< /1 
/CIEBasedDEFG /ColorSpaceFamily resourcestatus
{pop pop false} {true} ifelse
{[/DeviceCMYK]}
{[/CIEBasedDEFG 20 dict
dup /CreationDate (20020901000001) put
dup /RenderingIntent (RelativeColorimetric) put
dup /Description (Japan Color 2001 Coated) put
dup /ColorSpace (CMYK) put
dup /Copyright (Copyright 2002 Adobe Systems, Inc.) put
dup /ProfileID <4CB167869183B59BBAD20FB90CCF3E0C> put
dup /DecodeDEFG [
{{0 0.00205 0.00444 0.00731 0.01051 0.0139 0.01736 0.02084 0.02436 0.02792
0.03151 0.03511 0.03874 0.04237 0.04599 0.04949 0.053 0.05653 0.06007 0.06362
0.06718 0.07074 0.07432 0.07785 0.08141 0.08501 0.08864 0.09227 0.09587 0.09949
0.10312 0.10675 0.1104 0.11406 0.11774 0.12142 0.12511 0.12881 0.13252 0.13624
0.13997 0.14369 0.14743 0.15117 0.15492 0.15867 0.16244 0.16622 0.17002 0.17382
0.17763 0.18145 0.18527 0.18907 0.19284 0.19661 0.20039 0.20419 0.20799 0.21179
0.21561 0.21944 0.22327 0.22712 0.23097 0.23484 0.2387 0.24253 0.24637 0.2502
0.25406 0.25792 0.26178 0.26566 0.26954 0.27344 0.27734 0.28127 0.28521 0.28914
0.29307 0.29699 0.30091 0.30484 0.30879 0.31275 0.31673 0.32072 0.32473 0.32875
0.33279 0.33684 0.34091 0.345 0.34906 0.35312 0.35719 0.36126 0.36536 0.36947
0.3736 0.37774 0.3819 0.38607 0.39026 0.39447 0.39869 0.40292 0.40714 0.41135
0.41556 0.41979 0.42403 0.42828 0.43254 0.43681 0.4411 0.44539 0.4497 0.45402
0.45833 0.46267 0.467 0.47132 0.47562 0.47992 0.48423 0.48853 0.49285 0.49717
0.50149 0.50582 0.51014 0.51447 0.5188 0.52314 0.52747 0.5318 0.53612 0.5404
0.54468 0.54896 0.55323 0.5575 0.56178 0.56605 0.57032 0.57459 0.57886 0.58312
0.58739 0.59166 0.59593 0.6002 0.60447 0.60873 0.61296 0.61717 0.62137 0.62557
0.62978 0.634 0.63822 0.64244 0.64666 0.65089 0.65512 0.65936 0.6636 0.66784
0.67208 0.67635 0.68061 0.68488 0.68915 0.69341 0.69769 0.70196 0.70623 0.71052
0.7148 0.7191 0.72339 0.72769 0.732 0.73631 0.74062 0.74492 0.74924 0.75356
0.75787 0.76219 0.76651 0.77082 0.77512 0.77943 0.78368 0.78792 0.79214 0.79638
0.80059 0.8048 0.80901 0.8132 0.81736 0.82154 0.82568 0.82981 0.83393 0.83803
0.84211 0.84617 0.85021 0.85424 0.85825 0.86224 0.86622 0.87018 0.87412 0.87803
0.88191 0.88566 0.88938 0.89307 0.89672 0.90036 0.90397 0.90754 0.91109 0.9146
0.91808 0.92152 0.92492 0.9283 0.93171 0.93537 0.93902 0.9426 0.94614 0.94963
0.95308 0.95646 0.95982 0.96313 0.96643 0.9697 0.9729 0.97603 0.97907 0.98201
0.98487 0.98762 0.99024 0.99277 0.99521 0.99761 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
{{0 0.00137 0.00311 0.00542 0.00811 0.01104 0.01404 0.01713 0.02026 0.02343
0.02667 0.02993 0.03322 0.03651 0.03983 0.04313 0.04631 0.04949 0.05269 0.0559
0.05912 0.06236 0.06559 0.06878 0.07198 0.07523 0.07852 0.08185 0.08519 0.08848
0.09178 0.09509 0.0984 0.10174 0.10509 0.10844 0.11183 0.11522 0.11862 0.12204
0.12546 0.1289 0.13233 0.13576 0.1392 0.14266 0.14612 0.1496 0.1531 0.15662
0.16014 0.16368 0.16723 0.1708 0.17438 0.17793 0.18145 0.18496 0.1885 0.19204
0.1956 0.19919 0.20279 0.2064 0.21004 0.21369 0.21736 0.22105 0.22475 0.22841
0.23204 0.23569 0.23937 0.24307 0.24678 0.25051 0.25426 0.25802 0.26181 0.26562
0.26945 0.2733 0.27715 0.28095 0.28476 0.28857 0.29241 0.29627 0.30016 0.30406
0.30798 0.31192 0.31588 0.31986 0.32385 0.32787 0.33187 0.33583 0.33978 0.34374
0.34772 0.35172 0.35573 0.35975 0.3638 0.36786 0.37192 0.37601 0.38012 0.38423
0.38836 0.39243 0.39646 0.4005 0.40456 0.40863 0.41271 0.41681 0.42092 0.42505
0.42919 0.43335 0.43751 0.44169 0.4459 0.45011 0.45426 0.45837 0.46249 0.46663
0.47078 0.47494 0.47912 0.48332 0.48753 0.49176 0.496 0.50026 0.50454 0.50883
0.51314 0.51745 0.52172 0.52594 0.53018 0.53442 0.53868 0.54296 0.54726 0.55158
0.5559 0.56024 0.56459 0.56896 0.57334 0.57773 0.58214 0.58656 0.59097 0.59531
0.5996 0.60389 0.60819 0.6125 0.61682 0.62114 0.62547 0.62981 0.63415 0.6385
0.64285 0.64721 0.65156 0.65592 0.66029 0.66465 0.66903 0.67338 0.67771 0.68204
0.68636 0.69067 0.69499 0.69931 0.70362 0.70794 0.71226 0.71657 0.72089 0.72521
0.72952 0.73383 0.73814 0.74246 0.74677 0.75107 0.75539 0.75971 0.76402 0.7683
0.77248 0.77666 0.78085 0.78504 0.78923 0.79342 0.79762 0.80183 0.80602 0.81022
0.81443 0.81864 0.82285 0.82706 0.83129 0.83552 0.83976 0.84402 0.84828 0.85255
0.85682 0.86111 0.86539 0.86968 0.87396 0.87808 0.88208 0.88609 0.89008 0.89407
0.89805 0.90201 0.90596 0.9099 0.91387 0.91809 0.9223 0.92651 0.9307 0.93488
0.93906 0.94322 0.94737 0.95152 0.95568 0.95983 0.96398 0.96807 0.97208 0.97601
0.97984 0.98353 0.98705 0.99043 0.99368 0.99685 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
{{0 0.00131 0.00308 0.00548 0.00832 0.01137 0.0145 0.01767 0.02087 0.0241
0.02735 0.03064 0.03392 0.0372 0.04046 0.04364 0.04683 0.05002 0.05323 0.05643
0.05965 0.06288 0.0661 0.06928 0.07248 0.07573 0.07903 0.08231 0.08561 0.08891
0.09222 0.09553 0.09884 0.10217 0.10551 0.10886 0.11221 0.11559 0.11896 0.12235
0.12572 0.12911 0.13251 0.13592 0.13933 0.14277 0.1462 0.14965 0.15311 0.15658
0.16006 0.16354 0.16699 0.17044 0.17392 0.1774 0.18088 0.18438 0.18789 0.19142
0.19495 0.19851 0.20206 0.20564 0.20923 0.21281 0.21639 0.21998 0.22359 0.2272
0.23083 0.23448 0.23812 0.24179 0.24547 0.24916 0.25287 0.25659 0.26029 0.264
0.26773 0.27146 0.27522 0.27899 0.28277 0.28656 0.29036 0.29418 0.29801 0.30186
0.30573 0.30959 0.31344 0.3173 0.32118 0.32506 0.32895 0.33285 0.33677 0.3407
0.34464 0.34858 0.35254 0.3565 0.36046 0.36443 0.36839 0.37235 0.37633 0.38031
0.3843 0.3883 0.3923 0.39632 0.40035 0.40438 0.40841 0.41247 0.41652 0.42059
0.42465 0.4287 0.43276 0.43682 0.4409 0.44498 0.44907 0.45318 0.45729 0.46141
0.46554 0.46968 0.47383 0.47798 0.48216 0.48633 0.49051 0.49467 0.49884 0.50302
0.50721 0.51141 0.51562 0.51985 0.52409 0.52833 0.53258 0.53685 0.54113 0.54542
0.54971 0.55402 0.55833 0.56262 0.56689 0.57116 0.57545 0.57974 0.58404 0.58835
0.59265 0.59697 0.60129 0.60562 0.60994 0.61428 0.61862 0.62296 0.6273 0.63163
0.63598 0.64032 0.64466 0.64898 0.6533 0.65764 0.66196 0.66628 0.67061 0.67493
0.67924 0.68356 0.68786 0.69217 0.69648 0.70078 0.70508 0.70938 0.71367 0.71796
0.72225 0.72654 0.73082 0.73509 0.73934 0.74356 0.74779 0.75201 0.75624 0.76046
0.76469 0.76893 0.77315 0.77738 0.78162 0.78585 0.79009 0.79433 0.79857 0.80283
0.80707 0.81132 0.81557 0.81984 0.82411 0.8284 0.83269 0.83701 0.84133 0.84566
0.84999 0.85427 0.85847 0.86268 0.86691 0.87113 0.87536 0.87958 0.88381 0.88802
0.89221 0.89639 0.90055 0.9047 0.9089 0.91341 0.91792 0.92244 0.92695 0.93145
0.93595 0.94043 0.94492 0.94939 0.95387 0.95837 0.96285 0.96725 0.97157 0.97577
0.97983 0.98367 0.98728 0.99065 0.99386 0.99696 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
{{0 0.00126 0.00292 0.00504 0.00745 0.01002 0.01265 0.01531 0.01798 0.0207
0.02344 0.02619 0.02894 0.0317 0.03447 0.03727 0.04006 0.04286 0.04568 0.0485
0.05134 0.05417 0.05702 0.05982 0.06265 0.06552 0.06842 0.07133 0.07425 0.0772
0.08013 0.08309 0.08605 0.08902 0.09201 0.09499 0.098 0.10101 0.10403 0.10705
0.11009 0.11313 0.11618 0.11924 0.1223 0.12539 0.12847 0.13157 0.13467 0.13778
0.14091 0.14403 0.14717 0.15031 0.15346 0.15661 0.15978 0.16296 0.16613 0.16932
0.17253 0.17573 0.17894 0.18216 0.18539 0.18863 0.19187 0.19512 0.19838 0.20165
0.20492 0.2082 0.21149 0.21479 0.21809 0.2214 0.22472 0.22805 0.23138 0.23472
0.23807 0.24143 0.2448 0.24818 0.25157 0.25497 0.25838 0.2618 0.26523 0.26866
0.2721 0.27556 0.27903 0.2825 0.28599 0.28949 0.293 0.29653 0.30006 0.3036
0.30716 0.31073 0.31431 0.3179 0.3215 0.32511 0.32874 0.33238 0.33603 0.3397
0.34337 0.34707 0.35078 0.3545 0.35824 0.36199 0.36575 0.36953 0.37332 0.37711
0.38092 0.38474 0.38859 0.39244 0.3963 0.40018 0.40408 0.40799 0.41191 0.41585
0.41979 0.42375 0.42771 0.43168 0.43566 0.43964 0.44364 0.44765 0.45167 0.4557
0.45975 0.46379 0.46785 0.47192 0.47599 0.48007 0.48417 0.48827 0.49237 0.49647
0.50057 0.50467 0.50878 0.5129 0.51702 0.52115 0.52529 0.52943 0.53357 0.53773
0.54189 0.54606 0.55024 0.55442 0.55861 0.5628 0.567 0.57121 0.57543 0.57965
0.58388 0.58812 0.59237 0.59663 0.6009 0.60518 0.60948 0.61379 0.61811 0.62244
0.62678 0.63115 0.63553 0.63993 0.64434 0.64877 0.65321 0.65768 0.66216 0.66665
0.67115 0.67566 0.6802 0.68476 0.68933 0.69394 0.69857 0.70321 0.70788 0.71258
0.7173 0.72203 0.72679 0.73158 0.73639 0.74122 0.74607 0.75095 0.75583 0.76075
0.76567 0.77062 0.77559 0.78058 0.7856 0.79064 0.79563 0.80066 0.80572 0.81079
0.81589 0.82102 0.82615 0.83131 0.83648 0.84165 0.84683 0.85201 0.85719 0.86234
0.86748 0.8726 0.87769 0.88275 0.88794 0.89386 0.8998 0.90573 0.91164 0.91754
0.92342 0.92928 0.93512 0.94097 0.94683 0.95274 0.95858 0.96424 0.96969 0.97488
0.97975 0.98419 0.98809 0.99151 0.99454 0.99734 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
] put
dup /Table [9 9 9 9 [
[<FE8080E47F7FCB7F7FB17F7F97807F7D80806480804A8180308282FC7D8CE27D8AC87E89
AF7E88957E877C7F86627F85498084308284F97C98E07C95C67C93AD7D90937D8E7A7E8C
617E8A498088318187F77AA5DE7BA0C47B9DAB7C99927C96797D93617E8F487F8C318189
F579B1DC7AACC27AA7A97BA2917B9D787C99607D95487F9031808BF379BEDA79B7C179B1
A87AAB907BA5777C9F5F7D99487E9431808DF278CAD978C2C079BAA77AB38F7AAC777BA5
5F7D9E487E9731808FF178D7D878CDBF79C4A679BC8E7AB4767BAB5F7CA3477E9A318090
F078E3D778D8BE78CEA679C48D7ABB767BB15E7CA7477E9C318091>
<EC887ED4887EBC877EA4867E8C857E74857F5C847F4484802D8581EA8789D28688BA8587
A284868A84857384855B84844484842D8484E88595D08493B88490A1838E89838C72838B
5A83894483872D8486E684A1CE839DB6839A9F82968882947182915A828E43828B2E8388
E483ADCC82A8B582A39D829F86819B70819759829343828F2E838AE282B9CB82B2B481AD
9C81A78681A26F819D5981974382922E838CE182C4CA81BDB281B69B80AF8580A96E81A3
58819C4381952E828EE081D0C981C7B280BF9B80B78480B06E80A85880A04381982E828F
DF81DBC881D2B180C89A80BF8480B66E80AD5880A442819A2E8290>
<DB927CC4907CAE8E7C988D7D828B7D6B8A7E55897E3F887F2A8781D89087C38E86AD8D85
968B84808A846A89835488833F87832A8783D68F93C18D90AB8B8E958A8C7F898B698889
5487883F86872A8686D58D9EBF8C9AA98A979389947E889168878F53868D3E868A2B8688
D38DA9BE8BA4A88AA092889C7D87986787955386913E858D2B8589D28CB4BC8AAEA789A9
9188A47C879F67869A5285953E85902B858BD18BBFBB8AB8A689B29087AC7B87A66686A0
52859A3E85932B858CD08BCABB8AC2A588BA9087B37B86AC6685A552859D3E84962B848E
CF8BD4BA89CBA488C38F87BB7A86B26685AA5185A13E84982B848F>
<CA9B7BB5987BA1967B8C937C77917C638F7D4E8D7E3A8B7F278A81C89A86B497849F9484
8B9283769083628E824E8C823A8B82278983C69890B2968E9E938C89918A758F89618D88
4D8C873A8A86288985C5979BB195989C9295889092748E90608D8D4D8B8B3A8989288887
C496A5AF94A19B929D879099738E965F8C934C8A8F3A898C288889C396B0AE93AA9A91A5
868FA1728D9C5F8B984C8A9439888F28878AC295BAAE93B49A91AE868FA8728DA35F8B9D
4C899739889129878BC195C4AD92BD9990B6858EAF718CA85E8BA24C899B39889429878C
C095CDAC92C59890BD858EB6718CAE5E8AA64B899E39889629878D>
<BAA57AA7A17A949E7B809A7B6D977C5A947C48927D358F7F248D80B8A384A5A083939C83
8099826C96825A9382479182358E82258C82B6A28EA49F8C919B8A7E98896C9588599387
479086358D85258B84B5A198A39E95909A937D97906B958E58928C468F8A358D88258A86
B5A0A2A29D9E8F9A9B7C97976A9494589191468F8E358C8B268A88B49FACA19CA78E99A2
7C969E69939A579196468E92358C8D268A89B39FB5A19CAF8E99AA7B96A56993A057909A
468E95358B9026898AB29FBEA09BB88D98B17B95AB6993A557909F468D98358B9226898B
B29FC7A09BBF8D98B87A95B16892AA5790A2458D9B358B9326898C>
<AAAE7A98AA7A87A67A75A27B649E7B529A7C41967D31927E228F80A9AD8398A98286A482
75A081639D81529981419581319281228E82A8AC8D97A88B85A38974A088629C87519886
419485319184238D84A7AB9696A79384A391739F8F629B8D51978B419489319087238D86
A6AA9F95A69C84A298729E95619A9251978F40938D318F8A238C87A6AAA894A5A483A1A0
729D9C619A98509694409290318F8C248C88A5A9B194A5AC83A1A6719DA261999D509698
409293318F8E248B89A5A9B994A5B382A1AD719DA76099A150959C409296318E90248B8A
A4A9C193A4BA82A0B3719CAC6099A650959F409198318E91248B8B>
<9BB97A8BB37A7BAE7A6BA97B5BA47B4B9F7C3B9A7D2D967E1F91809AB7838BB2827BAD81
6AA8815AA3814B9E813B9A812D95812090829AB68C8AB18A7AAC886AA7875AA2864A9D85
3B99852D9484218F8399B59489B09279AB8F69A68D59A18B4A9D8A3B98882D9386218F85
99B49D89AF9979AA9669A59359A1914A9C8E3B978B2D9389218E8699B4A589AFA178AA9D
69A59959A0964A9B923B978E2E928B228E8898B3AD88AEA878A9A368A49F599F9A4A9B96
3B96912E928D228D8998B3B488AEAF78A9A968A4A4599F9E4A9A993B96942E918E228D89
98B3BB88ADB578A9AE68A4A8589FA2499A9C3B96962E9190228D8A>
<8DC37B7FBD7A70B67A61B07B52AB7B44A57C369F7D29997E1D937F8DC1837FBB8170B581
61AF8052AA8044A480369E802998811E92818DC08B7EBA896FB48760AE8652A98544A385
369D842997831F91838DBF937EB9906FB38E60AD8C52A88A44A289369C872A96861F9084
8DBE9B7EB8976FB29460AD9252A78F44A18D369B8A2A95882090868CBEA27DB89E6FB29A
60AC9752A69444A090369B8D2A958A208F878CBDA97DB7A56FB1A060AB9C52A69844A094
379A8F2B948C208F888CBDB07DB7AA6FB1A560ABA052A59B44A096379A922B948D218E89
8CBCB67DB6B06EB0AA60ABA452A59E449F993799932B948E218E89>
<80CD7C73C67B65BF7B58B87B4AB17B3DAA7C31A37D259C7E1C957F80CC8373C58265BE81
58B7804AB0803DA98031A280269B811C948181CA8A73C38865BD8757B6864AAF853DA884
31A184269A831D938381C99273C28F65BC8D57B58B4AAE8A3DA78831A0872799851E9284
81C89973C19665BB9357B4904AAD8E3EA68C329F892798871E918581C8A073C19C65BA98
58B3954BAC923EA58F329E8C2797891F918681C7A673C0A165B99D58B2994BAC953EA592
329E8E28978A1F908781C7AC73C0A666B9A258B29D4BAB983EA494329E9028978C1F9088
81C6B173BFAB66B8A558B2A04BAB9B3EA496339D9128968D1F9088>
][<F17B79D87B79C07C7AA77C7B8F7D7B777D7C5E7E7D467F7E2E817FEE7985D67984BE7A84
A57B838D7B83757C825D7D82457E822E8082EC7792D4788FBC788DA4798C8C7A8A747B89
5C7C87457E862E8085EA759ED2769ABA7797A278948A7992737A8F5C7B8C457D8A2E7F87
E874AAD075A5B876A1A1779D8978997279955B7B91447D8D2F7F89E673B6CE74B0B775AB
9F76A68877A071799B5B7A96447C912F7E8BE573C2CD74BBB675B49E76AE8777A87178A1
5A7A9B447C942F7E8DE372CECC73C6B574BE9E75B68777AF7078A75A7A9F447C972F7E8E
E272DACB73D0B474C79D75BE8676B67078AD5979A3447B992F7E8F>
<DF8477C98478B283799B837985827A6E827B57827C41837D2B837FDD8283C78282B08182
9A81818381816D81815681814082812B8382DB808FC5808DAE808B98808A8280886B8087
5680864081852B8284D97F9AC37F97AD7E95967F92807F906B7F8D55808B4080892C8286
D77DA6C17DA2AB7E9E957E9A7F7E976A7E93547F9040808C2C8188D67DB1C07DACAA7DA7
947DA27E7D9E697E99547F943F7F8F2C818AD57CBDBF7CB6A97CB0937CAA7E7DA5697D9F
547E993F7F922C818CD47CC8BE7CC0A87CB9927CB27D7CAB687DA4547E9D3F7F952C808D
D37BD3BD7BCAA87BC2927CBA7D7CB1687DA9537EA03F7F972C808E>
<CE8D76BA8C77A58A788F89787A887965877A51877C3C867D28867FCD8B81B88A81A38980
8E88807987806486805086803B8581288581CB898CB6888BA287898D8688788687638586
4F85853B8584298583C98897B58795A086928B859077858E62848C4F848A3B8488298486
C887A2B3869E9F859B8A84987684946284914E838E3B838B298488C686ADB285A89E85A4
89849F75839B6183974E83923B838E298389C586B8B185B29D84AC8983A77583A161839C
4E82963B839129838BC485C2B184BB9C84B58883AE7483A86082A14D829A3B829329838C
C485CCB084C49C83BC8783B57482AD6082A54D829D3B82952A838D>
<BE9675AB9476989277849078718E795D8D7A4A8B7B378A7D25897EBD9480AA927F96907F
838F7F6F8D7F5C8B7F498A7F378980258881BB938AA89189958F87828D866E8C855B8A85
498984378883268783BA9195A79092948E90818C8E6E8B8C5B8A8A488888378787268785
B9909FA68F9B938D98808B956D8A925A898F48888D36878A268687B890A9A58EA5928CA0
7F8B9C6C89985A889548879136868C278688B78FB3A48DAD918CA87E8AA36C899E598899
48879436868F27858AB68FBCA38DB6918BB07E8AAA6B89A459879E47869836869127858B
B58FC6A38DBE908BB77D8AB06B88A95987A247869B36859327858C>
<AEA0759D9D758B9A76799777679478559279448F7B328D7C228B7EAD9E7E9C9B7E8A987E
78967E66937E54917E438E7F328C7F238A80AC9C889B9A87899786779485659284549084
438D83328B83238982AB9B929A989088968E76938C65918A538F89428D87328B86248984
AA9A9C999799879596759393649090538E8E428C8B328A89248886A999A59897A186949D
75929A649096538D92428B8F328A8B248887A999AE9796A98694A57491A0638F9B528D97
428B9232898D258789A899B79796B18593AC7491A6638FA1528D9B428B9532898F25878A
A798BF9696B98593B27391AC628FA5528C9F428A9832899125878B>
<9FA9758FA5757FA2766E9E775E9A784D97793E947A2E907C208D7E9FA87E8FA47D7EA07D
6E9D7D5D997D4D967E3D937E2E907F218C809EA6878EA2867D9F856D9B845D98834C9583
3D92822E8F82218C829DA5908DA18E7D9E8C6C9A8A5C97894C94883D91862E8E85228B84
9CA4998CA1967C9D936C9A915C968E4C938C3D908A2E8D88228A859CA3A28CA09E7B9C9B
6B99975B96944C93903D908D2F8D8A228A879BA3AA8B9FA67B9CA16B999D5B95994C9294
3D8F902F8C8C228A889BA2B28B9FAD7B9CA86B98A25B959D4B92983D8F932F8C8E238989
9AA2BA8B9FB37A9BAD6A98A75A95A14B929B3C8F952F8C8F23898A>
<91B37582AE7573AA7664A57755A178469C7938987A2A947C1E907E91B17D82AD7D73A87D
64A47D55A07D469B7D38977E2A937F1E8F8090B08682AB8572A78463A383549E82469A82
3896822A92821F8E8290AF8E81AA8C72A68B63A289549D884599873895852B9184208D83
8FAE9780AA9471A59162A18F549D8D45998B3894892B9087208C858FAD9F80A99B71A498
62A095549C9245988F38948C2B9089208C868FADA680A8A271A49E62A09A539B96459792
38938E2B8F8B218B878EACAE80A8A871A4A4629F9F539B9A4597953893912B8F8C218B88
8EACB480A8AE70A3A9629FA3539B9E4597983893932B8F8D218B89>
<84BD7576B87568B2765BAD764DA7773FA279339C7A26977C1C917D84BB7D76B67C68B07C
5BAB7C4DA67D3FA17D339B7E27967E1D907F84BA8576B58468AF835AAA824DA5823F9F81
339A812795811D8F8183B98D76B38B68AE895AA9884CA4873F9E863399852794841E8F83
83B89476B39268AD8F5AA88D4CA38B3F9E893398882893861E8E8483B79C75B29868AD95
5AA7924CA2903F9D8D33988A2892881F8D8583B7A375B19F67AC9B5AA7974CA2943F9C90
33978D2892891F8D8683B6A975B1A467ACA05AA69C4CA1973F9C9333978F28928B1F8D87
83B6AF75B1A967ABA45AA69F4CA19A3F9C9533969128918C1F8C88>
<77C7756AC1755EBB7651B47745AE7839A7792EA07A239A7C1A937D78C67D6BBF7C5EB97C
52B37C45AC7C39A67D2E9F7E24997E1B927F78C4846BBE835EB88252B18145AB8139A581
2E9E812497811C918178C38C6BBD8A5EB68852B08745AA8639A3852E9D842496831C9082
78C2936BBC905EB58E52AF8C45A98A3AA3882F9C872596851D908478C1996BBB965EB593
52AE9046A88E3AA28B2F9B892595871D8F8578C09F6BBA9B5FB49852AE9546A7913AA18E
2F9B8B2594881E8E8678C0A56BBAA05FB49C52AD9846A7943AA1912F9A8D2694891E8E86
78C0AA6BBAA55FB3A052AD9C46A7973AA0932F9A8E26948A1E8E87>
][<E37772CC7773B578759E7976877A77707B79597C7A427D7B2C7F7DE1747FCA757EB3767E
9C777E86787F6F797F587B7F427C7F2C7F80DE728BC87389B174889B75878477866E7885
577A84417C832C7E83DC7097C67194B0739299748F83758D6D778B577989417B872C7D85
DA6FA3C4709FAE719B9873988274956C769156788E417A8B2D7D87D96DAFC36FAAAD71A5
9772A081749C6B7697567893417A8E2D7D89D76DBAC16EB4AB70AE9671A98073A36A759D
557797407A912D7C8BD66CC6C06EBEAB6FB89571B17F73AA6A75A355779C4079942D7C8C
D56CD0C06DC8AA6FC09471B87E72B06974A854779F4079972D7C8E>
<D37F71BD7F72A87F74937F757D80766880785280793D817B29827DD17D7DBC7D7DA67D7D
917D7D7C7E7D677E7E527F7E3D807F298180CF7B88BA7B87A57B86907C857A7C84657D84
517E833D7F83298182CD7994B87A91A37A8F8E7B8D797B8B657C8A507D883C7E862A8084
CB789FB6789CA279998D7995787A92647B90507C8D3C7E8A2A8086C977AAB577A6A078A2
8C799D777A99637B954F7C913C7D8D2A7F88C876B5B477B09F77AA8B78A57779A0637A9B
4F7B953C7D902A7F8AC775C0B376B99F77B38A78AD7679A6627AA04F7B993C7D922A7F8B
C675CAB276C39E76BB8A77B47678AC6279A54E7B9D3C7C952A7E8C>
<C38870AF88719B87738786747385756085774C847939847B26857DC1867BAE857B9A857B
86847C72847C5E837D4B837D38837E26847FBF8486AC83859883848583837182835E8282
4B8282388282278382BE8291AA828F97828D83818B70818A5D81884A8187388285278284
BC819CA981999681968280936F80905C808E4A818B388188278286BB80A6A880A295809E
81809A6E7F975C809349808F38818B278287BA7FB0A77FAB947FA7817FA26E7F9D5B7F98
49809338808E288189B97FBAA67FB4937FAF807EA96D7FA35B7F9D497F9738809128818A
B87FC4A67EBD937EB6807EAF6D7EA85B7FA1497F9A37809228818B>
<B3916FA190718F8E727C8D736A8B75588A7646897834887A23877CB28F7AA08D7A8E8C7A
7B8B7B698A7B57897C45887D34877E24867FB08D849E8C838C8B827A8982688882568781
448781348681248681AF8C8E9D8A8D8B898B798889678788558687448685348584248583
AE8A989C89968A889378879166868E55868C44858A348587258485AD8AA29B889F89879B
77869866869454859144848E33848A258487AC89AC9A88A78987A377869E65859A548496
44849133848D258488AB88B59A87B08886AA7685A565859F54849A43849433838F258389
AA88BE9987B78886B17685AB6584A454849E43839733839125838A>
<A49A6F939870839672729373619174508F76408D78308B7A218A7CA39879939679829479
71927A60907A4F8E7B3F8C7C2F8A7D21897FA296829294828192817090815F8E804F8D80
3F8B802F8980228881A1958C90938A8091896F8F885F8D864E8C853E8A842F8883228783
A094958F92937F90916E8E8E5E8C8C4E8B8A3E89883088862287849F939F8F919B7E8F98
6E8D955E8C924E8A8F3E898C3087892386869E92A78E91A37E8F9F6D8D9B5D8B974D8A93
3E888F30878B2386879E92B08E90AB7D8EA66D8CA15D8B9C4D89973E889230878D238588
9D92B88D90B27D8EAC6D8CA75C8AA14D899B3E889530868F238589>
<95A46F86A170779D71679A735897744994763A91782B8E7A1E8C7C95A278869E78769B79
67997957967A48937B39907C2B8D7D1F8B7E94A081859D80769A80669780579480489280
398F802B8C80208A80939F8A849C89759987669686569385479184398E832C8C83208982
939E93839B9174988E65958C56928B479089398D872C8B85208984929D9B839A98749795
659493569290478F8D398D8A2C8A88218885919CA38399A073979C649498559195478F91
398C8D2C8A8A218886919CAB8299A67396A264939E559199478E95398C902C8A8B218787
909CB28299AD7396A86493A255919D468E98398C922C898D218788>
<88AD6F7AA9706CA5715EA172509D7442997634967828927A1C8E7C88AB777AA7776CA378
5DA0784F9C7941987A34947B28917D1D8D7E87AA8079A67F6BA27F5D9E7F4F9B7F41977F
34937F288F7F1E8C8087A88879A5876BA1865C9D854F9984419683349283288F821E8B82
86A79078A48E6AA08C5C9C8B4E9989419587349186288E841F8B8386A79878A3956A9F93
5C9B904E988E41948B349189298D871F8A8485A6A078A29C6A9F995C9B954E979241948F
34908C298D881F8A8685A5A677A2A2699E9E5B9A9A4E979641939234908E298C8A1F8986
85A5AD77A2A8699EA35B9A9E4E979A419395349090298C8B208987>
<7BB76F6EB27061AD7154A87248A4743B9F762F9A772495791B907C7BB5776EB07761AC77
54A77848A2793B9D7A2F987B24937C1B8F7E7BB47E6EAF7E61AA7E54A57E47A17E3B9C7E
2F977E25927F1C8E7F7BB2866EAE8561A98454A48347A0833B9B823096822591811D8D81
7AB18E6EAD8C61A88A54A389479F873B9A863095852691841D8C837AB0956DAC9361A790
54A28E479E8C3B998A3095882690861D8C847AB09C6DAB9960A69654A293479D903B998D
30948A268F871E8B857AAFA26DAB9E60A69B54A197479D933B989030948C268F891E8B86
7AAFA76DAAA360A69F53A19B479C963B989230938E268F8A1E8B86>
<6EC16F63BC7057B6714BB07240AA7435A4762A9E7721977919927B6FBF7663BA7657B477
4CAE7840A87935A27A2B9C7B21967C1A907D6FBE7E63B87D57B27D4CAD7D40A77D35A17E
2B9B7E22957F1B8F7F6FBC8563B78457B1834CAB8240A68236A0812B9A812294811B8E81
6FBB8C63B68A58B0894CAA8741A486369F852C99842393831C8E826FBA9363B59058AF8E
4CA98C41A48A369E882C98862392851C8D836FBA9964B49558AE934CA99041A38D369D8B
2C98882392861C8D846FB99E64B49A58AE974CA89441A391369D8D2C978A2491871D8C85
6FB9A264B39E58AE9B4CA89741A293369D8F2C978C2491891D8C86>
][<D5726CC0736EAB756F9576717F77736A7875547A773F7C792A7E7BD36F78BE7178A97279
93737A7E757A68777B53787C3E7B7D2A7D7ED16D84BC6E83A770839272827D7382677581
5277813E7A812A7C81CF6A90BA6C8EA56E8C90708B7B72896674885276863E79852A7C83
CD699CB86B99A46D968F6F937A719066738E51758B3D78882B7B85CB68A7B76AA3A26C9F
8E6E9B7970976572945175903D788C2B7B87CA67B2B669ADA16BA88D6DA3786F9E647299
5074943D778F2B7B89C966BDB568B7A06AB18C6CAB786FA564719F5074983D77922B7A8B
C865C7B468C0A06AB98B6CB2776EAB6371A350749C3D77942B7A8C>
<C67B6BB27B6D9E7C6F8A7C70767C72627D744E7E763A7F7927817BC47876B179779D7978
897A78757B79617B7A4D7D7B397E7C27807EC27582AF76819B7781877881737980607A80
4C7B80397D80277F80C0738DAD748B99758A8676897278875F79864C7A85397C84287E83
BF7298AB739698749385759171768E5E788C4B7A8A397C87287E85BD71A3AA729F97739C
8474987076955D77914B798E397B8A287D87BC70ADA971A99672A48374A070759B5D7797
4A7892397B8D287D88BB6FB8A870B29572AD8273A76F75A15C769C4A7896387A90287D8A
BA6FC1A770BB9471B48173AE6E74A75C76A04A7899387A92287D8B>
<B7836AA4836C92836E7F82706D82725A827447827635827824837BB58175A38176918076
7E80776B807859817947817A35817C25827DB47E80A27E7F8F7E7F7D7E7F6A7F7F587F7F
46807F35807F258180B27C8AA07D898E7D887C7D87697D86577E85467F84358083258182
B07B959F7B938D7C907B7C8E697C8C577D8A457E88357F86258084AF7A9F9D7A9C8C7B99
7A7B96687B92567C8F457D8C357E89268086AE79A99D79A58B7AA1797A9D677B98567C94
457D90347E8C267F87AD78B29C79AD8A79A8787AA3677A9E557B99457C94347E8E267F89
AC78BB9B78B58A79B07879A9667AA3557B9D447C97347D90267F8A>
<A88C69978B6B868A6D75896F64887152877341867531867822867BA78974968975858875
74877662867751867941857A31857B22857DA5877E95877E84867E73857E62857E51847E
40847E31847F22847FA48688938587828486728485618384508383408383318382238381
A3849292849081838E71838C60828A508288408287318285238383A2839B918399818296
7082936081904F818D40818B318288238285A182A49182A180819D7081995F81964F8192
40818E31818A248286A082AD9081A98081A46F81A05F809B4F80963F819131818C248188
9F81B59081B07F81AB6F80A55E80A04E809A3F809431818E248189>
<9A95698A936B7A916D6B906F5B8E714B8C733C8B752D89781F887A9992738A91747A8F75
6A8E755A8C774A8B783B89792D887B20877D98907C888F7C798D7C698C7C598B7D4A897D
3B887E2D877E20867F968F86878D85788C84688B835989834988823B87822D8681218581
958D8F868C8D778B8C67898A5888884987873B86852D8584218583958C98868B95768A93
67899058878E49868B3A86892D8587218484948CA0858A9D76899A668896578793498690
3A858C2D8489218486938BA8858AA47589A066879C5786984885933A858F2D848B228487
938BB0848AAB7588A66687A157869C4885973A84922D848C228388>
<8C9E697E9C6B6F996D61966E529470449173368F75298C781D8A7A8B9C727D99736F9774
609475529276439077368D79298B7B1E897D8B9A7B7C977B6E957B5F937B51917C438E7C
368C7D298A7E1E887F8A98847B96836D94825F9182518F81438D81368B812989811F8880
89978C7B958B6D93895E9088508E87438C85368A842989831F87828896957A94936C9290
5E8F8E508D8C438B8A368A882A88861F868488959D7A939A6C91975E8F94508D90428B8D
36898A2A87882086858795A47993A06B909C5D8E99508C95428B9135898D2A8789208686
8794AA7992A66B90A25D8E9D4F8C99428A9435888F2A878B208587>
<7FA76972A46B64A16C579D6E4A9A703D96733193752590771B8C7A7FA57172A272649F73
579B744A98763D9577319279258E7A1C8B7C7EA37A71A07A649D7A579A7A4A977B3D937C
31907C268D7D1C8A7E7DA282709F81639B815698804995803D9280318F80268C801D8980
7DA08A709D89639A875697864994853D9184318E83268B821D89827CA0926F9D9063998E
56968C49938A3D9088318E86268B851E88837C9F996F9C9662999355969149938E3D908B
318D89278A861E88847C9E9F6F9B9C6298995595954992923D8F8F318D8B278A881E8785
7B9EA56F9BA162989D5595994892953C8F91318C8D278A891E8786>
<72B16966AD6A5AA96C4EA46E43A070379B722C9775229277198E7A72AF7066AB715AA672
4EA274429E75379A772C957822917A1A8D7C72AD7866A9795AA5794EA179429C7A37987B
2C947C23907D1B8C7E72AB8066A7805AA37F4E9F7F429B7F37977F2D937F238F7F1B8B80
71AA8866A6875AA2854E9E84429A843796832D9282238E821C8A8171A98F65A58D5AA18B
4E9D894299883795862D9185248D841C8A8271A89565A5935AA1904E9D8E42998C37958A
2D9187248D851C898471A89B65A49859A0954E9C9242988F37948C2D9089248C871D8984
71A7A065A49D59A0994D9C9642989237948F2D908B248C881D8985>
<66BB695BB66A50B16C46AC6E3BA67031A172279B751F957718907A66B9705CB47151AF72
46AA733BA475319F762899781F947A198F7C66B7775CB27851AD7846A8793CA379319D7A
28987B20927D198E7E66B67F5CB17E51AB7E46A67E3CA17E329C7E29977E20917F1A8D7F
66B4865CAF8551AA8446A5833CA082329B822996812191811A8C8166B38C5CAE8A51A989
46A4873C9F86329A852995842190831B8B8267B2925CAD9051A88D46A38C3C9E8A329988
299486218F841B8B8367B1975CAD9451A89246A38F3C9E8D32998A2A9488228F861B8A84
67B19B5CAD9851A89546A3923C9E8F32988C2A9389228E871C8A85>
][<C86E65B46F68A0716A8C726D78746F6376714F77743B7A77287C79C66A71B26C729F6E74
8B70757672766274784E76793B797A287C7CC4677DB0697D9D6B7D896E7D75707D61727E
4E757E3A777E287B7FC26589AE67889B6987886C86746E856071844D73833A7782297A81
C06394AD65929A6890866A8E736D8C5F708A4C73883A7686297A84BE619FAB649C986799
856996726C935F6F904C728C3A7589297986BD60AAAA63A69765A284689D716B995E6E95
4C71913A758C297988BC5FB4A962AF9665AA8367A5706AA05D6E9A4B719539748F297889
BB5EBEA861B89564B28267AC706AA55D6D9F4B709839749129788A>
<B97664A7776794786A82786C6F796E5C7A71497C73367D76257F79B87370A67471937573
8076746D77755B7977487A78367C7A257E7CB6707BA4717B91737C7F747C6C757C5A777D
48797D367B7E267D7FB46D86A26F859071857D72846B7483597682477882367A81267D81
B26C91A06D8F8E6F8D7C718C6A728A587488477786367985267C83B16A9C9F6C998D6E96
7B709369719058748E46768B367988267C85AF69A69E6BA28C6D9E7A6F9A697197577393
46758F35788B277B87AE68AF9D6AAB8B6CA67A6EA168709C57729746759235788D277B88
AE68B89D6AB38B6CAD796EA86770A256729C45759635788F277B89>
<AB7E649A7F67897F69777F6B667F6E547F70438073328176228279AA7B6F997C70877C72
767C73657D74537E76427E78327F7A23817CA8787997797A867A7A757A7A647B7B537C7C
427D7C327E7D23807EA67684967783857883747982637982527B81417C81327D81247F80
A5748E94768D83768B737789627888517987417B85327D84247F82A47398937496837593
72769161778E51798C417A89327C87247E84A272A192739E82749B717597617794507890
417A8D327C89247E86A271AA9272A68174A271759E607699507895407990327B8C247D87
A171B39172AE8173A97074A460769E507799407993317B8E247D88>
<9D87648D86667D86696D856B5D856D4D84703D84732E84762084799C846E8C836F7C8371
6C83725C83744C82753D82772E837920837B9B81788B81787B81796B81795B817A4C817B
3C817C2E827D21827E997F828A7F817A7F816A7F805B7F804B80803C80802E8180218280
987D8B887E8A797E89697E875A7E864B7E853C7F842E8083228182977C94887C92787D90
697D8E597D8C4A7E8A3C7E882E7F86228084967B9D877B9B787C98687C94597C914A7D8E
3C7E8B2E7F88228085957AA6867BA2777B9E687B9A597C964A7D923B7D8E2E7E8A228086
947AAD867AA9777BA4677BA0587B9B497C963B7D912E7E8C227F87>
<909063818E66728D68648C6B558A6D4689703888732A87761E87798F8C6D808C6E728A70
6389715488734587753787772A86791E867B8E8A767F897771887762877853877945867A
37857B2A857C1F857D8C887F7E887F70877F61867F53857F45857F37847F2A847F1F8480
8B87897D86886F85876084855284844483833783832A83822083818A85917C858F6E848E
60838C52838A4483883782862A82842083838A84997C84976E839460839152828F44828C
3782892A82872082848984A17B839E6D839A5F829751829344829037818C2B8289208285
8883A87B83A46D82A05F829C51819743819337818E2B818A208286>
<8298637596666894685A926A4D906D3F8E70338C72268A751C897982956C75946E67926F
5A90714C8E723F8C74328B762689791C887B819375749276669076598E774C8C783F8B79
32897A27887C1D877D80917E73907E668E7D588D7D4B8B7D3E8A7E32887E27877F1D867F
7F9086728E85658D84588B834B8A833E88823287822786811E85817E8F8E718D8D648C8B
588A894B89883E88863286852786831E85827E8E96718C93648B9157898F4A888C3E878A
3286882785861E84847D8D9D718C9A648A975789944A88903E868D32858A2785871E8485
7D8DA3718B9F648A9C5789984A87943E869032858C2784891F8485>
<76A163699F655D9C6851996A45966D39936F2E9072238D751A8B79769F6B699C6D5D996E
5197704594723991742E8F76238C781A8A7B759D74699A745D9775509576449277399078
2E8D7A238B7B1B897D749B7C68987C5C967C50937C44917C398E7D2E8C7D248A7E1C887F
7399846897835C9482509282449081398D812E8B812489801C878073988B67968A5B9388
509187448F86398C852E8A842488831C87827397926795905B938E4F908C448E8A398C88
2E8A862488841D86837296986794965B92934F9091448D8E388B8B2E89882587861D8684
72969E67949B5B92984F8F94438D91388B8E2E898A2587871D8585>
<69AB635EA76554A46749A06A3E9C6C33986F299472209075188D786AA86B5FA56C54A16E
499E6F3E9A71339674299276208F78198B7B69A6725EA373539F74489C753E9876339478
299179218D7B1A8A7D69A47A5EA17A539D7A489A7B3E977B33937C2A907D218C7D1A897E
69A3815E9F81539C804899803E95803392802A8F80218C801B898068A1885E9E87539B86
4898853E94843391832A8E82228B821B888168A08F5E9E8D539A8B48978A3D9488339086
2A8D85228A831B888268A0945E9D92539A9048968E3D938B3390892A8D87228A851C8783
689F995D9D965299944896913D938E338F8B2A8C892289861C8784>
<5DB56354B0654AAC6740A76A36A26C2D9D6F2598721D9375178E785EB26A54AE6B4AA96D
40A56F37A0712D9B732596761D9178188D7A5EB07154AC724AA77341A374379E762E9977
2595791E907B188C7C5EAE7854AA794AA57941A179379C7A2E987B26937C1F8F7D198B7E
5EAC7F54A87F4AA47F419F7E379B7E2E977F26927F1F8E7F198A805EAB8654A7854BA384
419E83389A822F96822791811F8D811A8A815EAA8B54A68A4BA288419E873899862F9585
279184208D831A89825EA99054A68E4BA18C419D8B3899892F9487279085208C841A8983
5EA99555A5924BA190419D8E37988B2F9489279087208C851B8883>
][<BB695EA86B62966D65836F6870716B5D736E4A7571387874267B78B9656BA7676D946A6E
826C706F6E725C7174497376377778267A7BB76176A564779367788069786E6C795B6F7A
49727B37757C27797DB55E82A361819164817F67816C6A805A6D80487180377480277880
B35C8DA15F8B8F628A7E65896B6987596C86487085377483277882B15A98A05E958E6193
7C64906A678E596B8C476F89367387277784B059A29F5C9F8D609B7B63986A6694586A91
476E8D36728A277786AF58AC9E5BA78C5FA37A629F69669A576996476E9136728C277788
AE57B59D5AB08B5EAA7A61A56865A057699A466D9436728F287689>
<AD715E9C73618B746579756768766A56786E447971337B74237E78AB6D6A9B6F6C89706D
78726F667471557573447875337A78247D7AA96A75996C76886E76776F77657178547479
43767A33797C247C7DA8678097697F866B7F756D7F64707F53727F43757F33787F247B7F
A6658A956789856988746C87636E85537184427483337783257A82A46394946692846890
736A8E626D8C52708A427388337686257A84A3629E93649B836798726995626C92516F8F
42728C327688257985A261A79263A382669F72689B616B97516E9341728F32758B257987
A160B09263AB8165A67168A1616B9C516E9741719232758D257988>
<A0795E907A61807A646F7B675F7C6A4F7C6D3F7D702F7F742180789E76698F776B7E776D
6E786E5E79704E7A733E7C752F7D77217F7A9D72738D74747D75756D76765D77774D7878
3E7A7A2F7C7B227E7D9B707D8B717D7C727D6C747D5C757D4D777E3D797E2F7B7E227E7F
996D878A6F867A71866B72855B74844C76833D78822F7A82227D81986C91896E8F7A6F8D
6A718C5B738A4C75883D77862F7A85237C83976A9A886C97796E956970925A728F4B748D
3D768A2F7987237C859669A3876B9F786D9C696F985A71944B73913C768D2F7989237C86
9569AA876BA6786DA2686F9E5971994A73943C76902F788B237B87>
<93815E84816175816466816757816A48816D3981702B82741F8378917E68837E6A747E6C
657E6E567F70477F723980752B81771F827A907B72817B73737C74647C75557D76477D77
397E792B7F7B20817C8E787B80797C727A7C637A7C547B7C467C7D387D7D2B7E7E20807F
8D76857F7784717883627983547982467B82387C812B7E81207F818C758E7E768C70778B
627789537888457A86387B852B7D84207F828B73967D74946F759261768F53788D45798B
387B882B7C86217E848A729E7D749B6F759861769552779245788E387A8B2B7C88217E85
8A72A57C73A26E749E60759A527696447892387A8E2B7C8A217E86>
<868A5E7889616A88645D88664F876941866D3486702785741C85778586677786696A856B
5C856D4E846F4184723484742884771D847A8383707683726983735B83744E8275408277
34827828837A1D837C82817975817A68817A5A817A4D817B40817C33817C28827D1E827E
817F82747F82677F815A7F814D7F804080803380802881801E8280807D8B737E89667E88
597E874C7E863F7F85337F832880831F81827F7C92737D91667D8F597D8D4C7D8B3F7E89
337F872880851F81837F7B9A727C97657C95587C924C7D8F3F7D8C337E89287F871F8084
7E7BA0727B9D657C9A587C964B7C933F7D8F337E8C287F881F8085>
<79925E6D9161609063548E66478C693B8B6D2F8A702488741A8777788F666C8E68608D6A
538B6C478A6F3B89712F88742487771B867A778C6F6B8B705F8A715389734688743A8776
2F867824867A1C857C768A786A89785E887952877946867A3A867B2F857B25857D1C847E
7588806988805D877F52867F46857F3A847F2F847F25847F1C84807587886986875D8586
5185854584843A83832F83822583821D838174858F69858D5D848C51848A4583883A8387
2F82852583841D83827484966884935C849151838F45828C3A828A2F82882582851D8283
73849B6884995C83965083934582903A828D2F828A2582871D8284>
<6D9B5D6299605697634B946640926935906C2B8D70218B741989776D986662966856946A
4B926C40906E358E712B8C74218A7719887A6C956E61946F5692704A90723F8E73358C75
2B8A772188791A877C6B93766092765590774A8E783F8C79358A7A2B897B22877C1A867D
6A917E60907E558E7D4A8C7D3F8B7D35897E2B887E22867F1B857F6A90855F8E84548D83
4A8B833F8A823588812B87812286811B85816A8E8B5F8D8A548C89498A883F8986358785
2B86842385831C8482698E925F8D90548B8E498A8C3F888A3587882B86862385841C8483
698D975F8C94548B924989903F888D34868A2B85882384861C8484>
<61A45D57A1604D9E63439B663998692F946C2691701E8E74178B7761A165579E674D9B69
43986B39956E2F9270268F731E8C76188A79619F6C579C6E4D996F4396713993732F9075
278E771F8B7919897B609C74569A754D9776439476399278308F79278C7A1F8A7C19887D
609B7B56987B4C967C43937C39907C308E7D278B7D20897E1A877F6099825697824C9481
429281398F80308D80278A802088801A86806098885696874C9386429185398E84308C83
288A822088821A86815F978E56958C4C938B429089398E87308B862889852087831A8682
5F96925695904C928E42908C398D8A308B882889862087841B8583>
<55AE5D4DAA5F44A6623BA265329E692A996C2295701B9174168D7756AB644DA76644A368
3B9F6B329B6D2A97702393731C8F76178B7956A86B4DA56D44A16E3B9D703399722A9574
2391771C8D79178A7B56A6724DA373449F743C9B753397772B937823907A1D8C7B18897D
56A4794DA179449D7A3C997A33967B2B927C248E7D1D8B7D18897E56A27F4D9F7F449C7F
3C987F33947F2B917F248E7F1E8A7F19888056A1854D9E84449B833C97833394822B9082
248D811E8A8119878156A08A4D9D89449A873C97863393852B9084248C831E8982198782
56A08E4D9D8C449A8B3B96893393882B8F86248C851E89831A8782>
][<AE64589D665C8C69607B6B63696D6757706B46736E347672257A76AC5F649B62678A6569
79676C686A6E566D71457173347576257979AA5B70995E71896172786574666875556B77
446F7834737A25787CA8587B985B7B875F7B76627C65667C546A7D446E7D34727E25777F
A65586965985865C84756084646483536882436C82347181267681A4529094568E845A8D
745E8B636289536788436B86337085267683A3509A935597835995735D9263619052668D
436B8A337088267585A24FA39253A082579C725C99626095526592426A8E336F8A267586
A14EAC9152A78257A3715B9F61609A516496426A91336F8C267588>
<A16C58916E5C816F6071716361736750756A40776E307972227C769F6763906A66806B68
706D6B60706D4F7270407573307876227B799D636E8E66707E68716F6B735E6D744E7076
3F737830777A237A7C9C60798C63797D657A6D687A5D6B7B4E6E7B3F727C30767D237A7E
9A5D838B60837B63826C66825D69814D6D813E7181307580237980985B8D8A5E8C7A618A
6B65895C68874D6C863E7085307484237882975996895D947960926A638F5B678D4C6B8B
3E6F8930738624788496589F885B9C795F996A62965B66924C6A8F3D6E8C307389247786
9557A7875AA3785E9F69629B5A65974B6A933D6E8F30738B247787>
<94745886755C77765F6877635978664A796A3B7B6E2C7D72207F76936F63857165767268
67746A58756D49776F3A79722C7B76207E79916C6D836D6E746F70667171577373487575
3A77772C7A79207D7B906877816B78736C78656E7956717947737A3A767B2C797D217C7E
8E6681806880726A80646C80556F804772803975802C7880217B808D638A7F6689716988
636B87556E854771843974832C7783217B828C62937E659170678F626A8D546D8B467089
3973872C7785217A838B609B7D6398706695626993546C90466F8D39728A2C7687227A85
8A5FA27D639F6F659B616898536B94456F9038728D2C7689227A86>
<887C587A7C5C6D7D5F5F7D63517D66437E6A367F6E2980721D81768777627978656C7967
5E7A69507B6C427C6F357D72297F751E807985746C78756D6B766F5D77704F7872427A74
357B76297D791E7F7B8471757772766973775C75774F7678417879357A7B297C7C1F7F7D
826E7E75707E68717E5B737E4E757E41777E35797F297B7F1F7E7F816C87756E86687085
5B71844E7384417583347882297B821F7D81816A8F746D8E676E8C5A708A4D7289407587
347785297A841F7D83806997736B94666D925A6F904D728D40748B347788297A86207C84
7F689D736B9B666D98596F944C719140738E34768B297988207C85>
<7C84586F845C63835F5683624983663D836A31836E2583721B84767B80616F8064628066
55806949806C3C816F3081722582751C83797A7C6A6D7D6C617D6E557D70487E713C7E74
307F762580781C827B7879736C7A74607B75547B76487C773C7D78307E7A267F7B1D817D
77777C6B787C5F797C53797C477A7D3B7B7D307D7E267E7E1D807F7675846A76845F7783
5378824779823B7A81307C81267E811D7F8176738C6A758A5E76895277884678873B7985
307B84267D831E7F827572936974915E758F52768D46778B3B7989307B87267D851E7F83
7471996973965D749452759146778E3B788C307A89267C861E7E84>
<708C58648B5C598A5F4E896242886637886A2C876E2286721986766F8861648863598766
4D866842866B36856E2C85722285751A85796E856963856B58846D4C846F418371368373
2C83752283781B847B6D82726282735782744C82754181763682782C827923827B1B837D
6C807A61807A56807A4B807B41807B36807C2C817D23817E1B827F6B7E81617E81567E81
4B7E80407F80367F802C80802381801C82806B7C88607D87557D864B7D85407E84367E84
2C7F832380821C81816A7B8F607C8D557C8C4A7C8A407D88367E872C7E852380841C8182
6A7A94607B92557C904A7C8E407C8C367D892C7E87237F851C8083>
<6494585A935B50915F4590623B8E66318C6A278B6E1F89721888766491605A8F634F8E65
458D683B8B6B318A6E2889711F8875188778638E68598D6A4F8B6C458A6E3B8970318872
28877520867819867B628B70588A714E89724488743A877531867728857920857B1A857C
6289775888784E87794486793A857A31857B28847C20847D1A847E61877E57867E4E867E
44857E3A847E31847F28837F20837F1A83806185855785844D84844484833A8383318382
2983812183811B838160848B57848A4D84894383873A82863182852982842182831B8282
60839057838E4D838D43828B3A82893182872982852182841B8283>
<599D58509B5B47995E3E96623593652C9169248E6D1C8C72168A7659995F509762479564
3E936735916A2C8E6E248C711D8A7517887859976750956947936B3E906D358E6F2C8C72
248A751D897818877A58946E4F92704690713D8E72358C742C8A762589781E877A18867C
5891754F9076468E773D8C78358B792C897A25887B1E867C19867E57907C4F8E7C468D7C
3D8B7D35897D2D887D25877E1E867F19857F578E824F8D81468C813D8A813588812D8780
2586801F8580198480578D874E8C86468B863D89853588842D86832585821F85821A8481
578C8C4E8C8A458A893D89883587872D86852585841F84831A8482>
<4EA75746A35A3EA05E369D612E996527956920926E1A8E72158B764EA35E47A0613E9D64
369A672E966A27936D2090711A8D75168A784EA065469D673E9A6A36976C2F946F279171
218E741B8B7716897A4E9D6D469B6E3E98703795712F9273288F75218C781C8A7A17887C
4E9B734698743E96753793762F9078288D79228B7A1C897C18877D4E997946977A3E947A
37917B2F8F7B288C7C228A7D1C887E18867F4E977F46957F3E937F37907F2F8E7F288B7F
22897F1D87801886804E96844694833E92833790822F8D82288B812289811D8781198581
4E95884694873E9286368F852F8C84288A832288831D8682198582>
][<A25F5292615683645B73675F626A63526D6742706C327470237875A0595E915C61815F64
71636761666A516A6D416E713173742477789E54698F586B7F5B6D705F6F606371506873
406C7631717824767B9C4F748D54757E58766E5C775E61784F6579406A7A31707C24757D
9A4C7F8B507F7C557F6D5A7F5E5F7F4E647F3F697F316F7F2475809849898A4E887B5387
6C58865D5D854D62843F6883316E83247482974692884C907A518F6B568D5C5B8B4D6189
3E6787316D8525748496449B874A98794F966A55935B5A904C608E3E668B316D88257385
9443A387499F784E9C6A54985B59954C60913E668E306C8A257387>
<956652876857786A5B6A6D5F5A6F634B72673C746C2E7870217B7594615D866360776663
686966596C6A4A6F6D3C72702E7674217A78925C68845F6A76626C67656E586970496C73
3B70752D747821797B905872825B73745F75666276576677496A783B6F7A2D737B22787D
8E547C81587D735C7D65607D56647D48697E3A6D7E2D727F22777F8D51867F5685725A85
645E845662834867833A6C822D71822277818C4F8F7E548D71588C635C8A556189476687
3A6B862D71842276838B4D977E5295705693625B9054608E47658B3A6B892D7087237685
8A4C9F7D519C6F5599625A95545F9246658F396A8C2D7089237686>
<8A6E527C70576F715B61735F53746345766737786B2A7B701E7E7588695D7B6B606D6D63
606F6652716944746C3776702A79741F7D788664677967696C696B5F6B6D516E6F437172
3674742A78771F7C7A8560717863726B66735E6874506C76436F773673792A777B207B7D
835C7A76607A69637B5C667B4F6A7C426D7C36717D2A767E207A7F825A83755D83696182
5C64824F6881426C813670812A758120798181578B755B8A685F895B63884E6787426B85
356F842A7483207982805693745A91675E8F5B628D4E668B416A89356F872A7485217884
80549A735998675D955A61924D658F416A8D356E8A2A7387217885>
<7E765372775765785B58785F4B7A633F7B67327C6B267E701C80757D705C71725F647362
5775654B76693E786C327A70277D741D7F787B6C666F6E6863706A56726C4A746F3D7671
327874277B771D7E7A7A686F6E6B70626D72566F734971753D7476327778277A7A1E7D7C
7865786C6879616A79556C7A496F7A3D727B31757C27797D1E7C7E7762806C6580606880
546B80486E803C71803174802778801E7C807760886B63875F6687536986486C853C7084
3174832778821E7B82765E8F6A628E5F658C53688B476C893C6F873173862777841F7B83
755D966A61945E649253678F476B8D3C6F8A3173882777861F7B84>
<737D53677E575C7E5B507E5F447F633980672E806B2381701A837571785C66795F5B7A62
4F7B65447C68387D6C2D7E702380741B81787074656575675A77694E786C43796E387B71
2D7C74237E771B807A6F716D64726F5974704E75724377743879762D7B78247D7A1C7F7C
6E6D76636F775871774D737842757937777A2D797B247C7D1C7F7E6D6B7E626D7E576F7E
4D717E42737E37767E2D787F247B7F1C7E806C6985616B85576D844C7083417283377582
2D7882247B811D7E816C678C616A8B566C894C6F884171873774862D7784247A831D7D82
6B6692616990566B8E4B6E8C41718A3774882D7786247A851D7D83>
<6785535D855752855B48855F3D846333846729846B20847018857566805B5C815E528161
4781653D816833816C29826F208373198478657C645B7D66517E68477E6B3D7E6D327F70
2980732181771A837A64796C5A7A6E507B6F467B713C7C73327D75297F772180791A827C
6376745977754F78764679773C7A78327C79297D7B217F7C1B817E63737B59757C4F767C
45777C3C797D327A7D297C7E217E7E1B807F6271825873824F75814576813B7881327981
297B80217E801B80816270885872874E74864575863B7785327984297B83227D821B7F82
616F8D58718C4E738B4474893B7688327886297A85227D841B7F83>
<5C8D53538D574A8C5A408B5E378A632D896725886C1D87701787755C895B53885E498861
4087643786682E866B25866F1E85731886775B85635285654985683F846A36846D2E8470
2584731E847618847A5A826A51826C48826E3F81703682722E82742682771E837919837C
597F72507F73487F743F7F753680772E807826817A1F827C19837D597C79507D79477D7A
3E7E7A367E7B2E7F7C26807D1F817E19827F587A7F507B7F477C7F3E7C7F367D7F2E7E7F
267F7F1F80801A81805878854F7A84477B843E7B83367C832E7D82267E821F80811A8181
5877894F7988467A883E7B87367C852E7D84267E831F7F831A8182>
<51965249945641935A39915E308F62288D67218B6C1B8A7015897551915A49905D418F60
398D64318C67298A6B22896F1B8873168777518E61498D64418C66398A6931896C29886F
2287731C8676178679508A69488A6B40896D38886F3187712986742285761C857917857B
5087704887714086723886743185762984772384791D847B18847D508576488577408478
38847931837A29837B23837C1D837D18847E4F837C47837C40837D38837D30827D29827E
23827E1D837F1983804F81814782813F82813882813081812981812382801D8280198381
4F80864781853F81843881843181832A81832381821D8282198281>
<469F52409C55399A5932975E2B94622491671E8F6C188C70148A75479A5940985C39965F
3294632B9167248F6B1E8C6F198A731589774797604095633993653290682B8E6C258C6F
1F8A721A897616887947936740926939906B328E6E2B8C70258A731F89761A877916867B
47906E408F6F398D71328C732C8A752588772087791B867B17867D478E74408D75398B76
328A772C887826877A20867B1B857D17857E468C79408B7A398A7A32897B2C877C26867D
20857D1B857E18847F468A7E408A7E39897E32887E2C867F26857F20857F1B8480188480
468A823F89813889813287812C86812685812084811C8481188481>
][<96594C885C517A5F566B625B5C665F4C6A643E6E692F726E22777494525786555B78595F
695D635A62664B666A3D6B6E2F7172227677924B6284506576546868596A595E6D4A6370
3C69732F6F7623757A90466D824B6F745071665672585B744961763C67782E6E7A23747C
8E4177804778734D7965527A57597A495F7B3B667C2E6C7D23737F8C3D817F4381724981
645081565681485D813B64812E6C812373818B3A8A7E4089714788634E87555586485C85
3B63842E6B842372838937937D3E9170458F634C8D55538B475B8A3A62882E6A86247284
88359A7C3C986F4395624B92545290475A8D3A628B2E6A88247186>
<8A604C7D635170655662685B546B5F466E643872692B766E207A748959577C5D5B6F605F
616362536766456B6A386F6E2B74722079778753627A57646D5B67605F6A52646D44686F
376D732B727620787A854E6C78526E6B576F5E5C71516173446675376B772B717A21777C
834975774E766A53775D5978505E7943647A376A7B2B707D21767E82457F754B7F69517F
5C567F505C7F43627F37697F2B6F80217580814287744887684E865C54854F5A84426184
3668832B6E8321758280408F74468E674C8C5B538B4F59894260883667862B6E85227484
7F3E96734494674B925B51904E588D425F8B3666892B6E87227485>
<7F684D736A52676C565A6E5B4D705F40736434766928796F1D7D747E615772645B65665E
5969624C6C663F706A33736E2877721E7B777C5B61705E636462665865694B696C3F6D6F
3371722876761E7A797A566A6E5A6C635E6E5762704A66723E6B74336F772874791F797C
7951746D5675615A76565F774A64783E6979336E7B28737C1F797E784E7C6C537D60587D
555D7D49627E3E677E326D7E28737F1F7880774B846B5084605583545B834960833D6682
326C822872821F778276488C6A4E8B5F5489545988485F873D6586326B85287184207783
7547926A4C905F528F53588D485E8B3D6489326B87287186207784>
<746F4D6971525D725652745B46755F3A77642F7A69247C6F1B7F74736857686B5A5C6D5E
516F614572653A74692F776E257B721C7E777163606666635B6965506B68456E6B39726E
2F75722579761C7D79705E6965616B5A656D4F686F446B71396F732F73762578791D7C7C
6F5A72645E735961744E6575446977396D782E727A25777C1D7B7E6E567A635B7A585F7B
4E637B43677C386C7D2E717D25767E1D7A7F6D5381625881585C814D6181436681386B81
2E70812575811E7A816C5188615687575B874D6086426585386A842E6F832575831E7A82
6C4F8E61548D575A8C4C5F8A4264893869872E6F862574841E7983>
<69764E5F77525578564A795B3F7B5F357C642B7E6921806F1982746870565E725A54735E
4975613F77653479692B7B6D217E721A8077676B5F5D6D62536F654971683E746B34766E
2B7972227C751B7F796666685C696A526C6C486E6E3E71703474732A7775227B781B7E7B
6562705B6571516873476B743E6F763472772B7679227A7B1B7D7D645E775A6278506679
47697A3D6D7B34717C2B757D22797E1C7D7F635C7F59607F50647F46677F3D6B7F33707F
2B74802278801C7C80625985595E844F62844666843C6A83336F832A73822278821C7C82
62588B585C894F61884565873C6A86336E852A73842377831C7C82>
<5F7E4E557E524C7F56427F5B39805F2F81642681691E836F1884745E785655795A4B7A5D
427B61387C652F7D69277F6D1F81721882775D735E5475614A766441776738796A2F7B6E
277D711F7F751981795C6E665371684A726B41746D3876702F7972277B751F7E7819807B
5B6A6E526D6F496F714072733874752F7777277A79207D7B1A807D5A6775516A76486D77
406F783772792F757A27797C207C7D1A7F7E5A647C51687C486B7D3F6E7D37717D2F747E
27787E207B7F1A7E805962825066814869813F6C813770812F7381277781207B811B7E81
5960875064864768853F6C85376F842E7383277783207A821B7E82>
<54864E4C85524485563B855B32855F2A856423856A1C856F1686745480554C805943815D
3B81613281652A826923836D1C8372178477537B5D4B7C60437D633A7D66327E6A2A7F6D
2380711D82751783795277654A786742796A3A7A6C327C6F2A7D72237F751D817818827B
51736C49756E4176703A78723279742A7B76247D781D7F7A18817D516F73497274417475
3976773278782B7A79247C7B1E7F7D19817E506C79486F7A41727A39747B32767C2B797D
247B7E1E7E7E19807F506A7E486E7F40707F39737F32757F2A7880247B801E7D80198080
506983486C83406F833972823174822A7782247A821E7D81197F81>
<4A8E4D438D523C8C56348B5A2D8A5F2589641F886A19886F1587744A88554388583C875C
3487602D866426866920866D1A867216867749835C42845F3B83623483662D836926836D
2084711A8475168579497F634280663B806834806B2D816E2681712082741B837817847B
487B6A417C6C3A7D6E347E702D7E73267F752181771B827A17837C4878704179723A7B73
337C752D7D77277E78217F7A1C817C18827E4875764177773A7978337A792D7B7A277D7C
217F7D1C807E18827F48737B41757C3A777C33797D2D7A7E267C7E217E7F1C807F188180
4772804074803976803378802D7A80277B80217D801C7F81188181>
<40964C3A94513493552D915A278F5F218D641C8C6A178A6F1489744091543A9057348E5B
2E8D5F278B64228A691C896D188872148877408C5B3A8B5E348A612E896528886922886D
1D87711987751586794088623A87643487672E866A28866D2285711D857419857716857A
40846839846A33846D2E846F2883722383741E847719847A16847C3F816E398170338172
2E82742882762382781E827A1A837C17847D3F7E73397F753380762E807828807923817A
1E827C1A827D17837F3F7C78397D79337E7A2D7F7B287F7C23807D1E817E1A827F17837F
3F7B7C397C7D337D7D2D7E7E287F7E237F7F1E807F1A8180178280>
]]] put
dup /DecodeABC [
{{0 0.00392 0.00784 0.01176 0.01569 0.01961 0.02353 0.02745 0.03137 0.03529
0.03922 0.04314 0.04706 0.05098 0.0549 0.05882 0.06274 0.06667 0.07059 0.07451
0.07843 0.08235 0.08627 0.09019 0.09412 0.09804 0.10196 0.10588 0.1098 0.11372
0.11765 0.12157 0.12549 0.12941 0.13333 0.13725 0.14117 0.1451 0.14902 0.15294
0.15686 0.16078 0.1647 0.16862 0.17255 0.17647 0.18039 0.18431 0.18823 0.19215
0.19608 0.2 0.20392 0.20784 0.21176 0.21568 0.2196 0.22353 0.22745 0.23137
0.23529 0.23921 0.24313 0.24706 0.25098 0.2549 0.25882 0.26274 0.26666 0.27058
0.27451 0.27843 0.28235 0.28627 0.29019 0.29411 0.29803 0.30196 0.30588 0.3098
0.31372 0.31764 0.32156 0.32549 0.32941 0.33333 0.33725 0.34117 0.34509 0.34901
0.35294 0.35686 0.36078 0.3647 0.36862 0.37254 0.37646 0.38039 0.38431 0.38823
0.39215 0.39607 0.39999 0.40392 0.40784 0.41176 0.41568 0.4196 0.42352 0.42744
0.43137 0.43529 0.43921 0.44313 0.44705 0.45097 0.4549 0.45882 0.46274 0.46666
0.47058 0.4745 0.47842 0.48235 0.48627 0.49019 0.49411 0.49803 0.50195 0.50587
0.5098 0.51372 0.51764 0.52156 0.52548 0.5294 0.53333 0.53725 0.54117 0.54509
0.54901 0.55293 0.55685 0.56078 0.5647 0.56862 0.57254 0.57646 0.58038 0.5843
0.58823 0.59215 0.59607 0.59999 0.60391 0.60783 0.61176 0.61568 0.6196 0.62352
0.62744 0.63136 0.63528 0.63921 0.64313 0.64705 0.65097 0.65489 0.65881 0.66273
0.66666 0.67058 0.6745 0.67842 0.68234 0.68626 0.69019 0.69411 0.69803 0.70195
0.70587 0.70979 0.71371 0.71764 0.72156 0.72548 0.7294 0.73332 0.73724 0.74117
0.74509 0.74901 0.75293 0.75685 0.76077 0.76469 0.76862 0.77254 0.77646 0.78038
0.7843 0.78822 0.79214 0.79607 0.79999 0.80391 0.80783 0.81175 0.81567 0.8196
0.82352 0.82744 0.83136 0.83528 0.8392 0.84312 0.84705 0.85097 0.85489 0.85881
0.86273 0.86665 0.87057 0.8745 0.87842 0.88234 0.88626 0.89018 0.8941 0.89803
0.90195 0.90587 0.90979 0.91371 0.91763 0.92155 0.92548 0.9294 0.93332 0.93724
0.94116 0.94508 0.94901 0.95293 0.95685 0.96077 0.96469 0.96861 0.97253 0.97646
0.98038 0.9843 0.98822 0.99214 0.99606 0.99998 1}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
{{0 0.00391 0.00781 0.01172 0.01563 0.01953 0.02344 0.02734 0.03125 0.03516
0.03906 0.04297 0.04687 0.05078 0.05469 0.05859 0.0625 0.06641 0.07031 0.07422
0.07812 0.08203 0.08594 0.08984 0.09375 0.09765 0.10156 0.10547 0.10937 0.11328
0.11719 0.12109 0.125 0.1289 0.13281 0.13672 0.14062 0.14453 0.14844 0.15234
0.15625 0.16015 0.16406 0.16797 0.17187 0.17578 0.17968 0.18359 0.1875 0.1914
0.19531 0.19922 0.20312 0.20703 0.21093 0.21484 0.21875 0.22265 0.22656 0.23046
0.23437 0.23828 0.24218 0.24609 0.25 0.2539 0.25781 0.26171 0.26562 0.26953
0.27343 0.27734 0.28125 0.28515 0.28906 0.29296 0.29687 0.30078 0.30468 0.30859
0.3125 0.3164 0.32031 0.32421 0.32812 0.33203 0.33593 0.33984 0.34374 0.34765
0.35156 0.35546 0.35937 0.36328 0.36718 0.37109 0.37499 0.3789 0.38281 0.38671
0.39062 0.39453 0.39843 0.40234 0.40624 0.41015 0.41406 0.41796 0.42187 0.42577
0.42968 0.43359 0.43749 0.4414 0.44531 0.44921 0.45312 0.45702 0.46093 0.46484
0.46874 0.47265 0.47655 0.48046 0.48437 0.48827 0.49218 0.49609 0.49999 0.5039
0.5078 0.51171 0.51562 0.51952 0.52343 0.52734 0.53124 0.53515 0.53905 0.54296
0.54687 0.55077 0.55468 0.55859 0.56249 0.5664 0.5703 0.57421 0.57812 0.58202
0.58593 0.58984 0.59374 0.59765 0.60155 0.60546 0.60937 0.61327 0.61718 0.62108
0.62499 0.6289 0.6328 0.63671 0.64062 0.64452 0.64843 0.65233 0.65624 0.66015
0.66405 0.66796 0.67186 0.67577 0.67968 0.68358 0.68749 0.6914 0.6953 0.69921
0.70311 0.70702 0.71093 0.71483 0.71874 0.72264 0.72655 0.73046 0.73436 0.73827
0.74218 0.74608 0.74999 0.75389 0.7578 0.76171 0.76561 0.76952 0.77343 0.77733
0.78124 0.78514 0.78905 0.79296 0.79686 0.80077 0.80468 0.80858 0.81249 0.81639
0.8203 0.82421 0.82811 0.83202 0.83593 0.83983 0.84374 0.84764 0.85155 0.85546
0.85936 0.86327 0.86717 0.87108 0.87499 0.87889 0.8828 0.88671 0.89061 0.89452
0.89842 0.90233 0.90624 0.91014 0.91405 0.91795 0.92186 0.92577 0.92967 0.93358
0.93749 0.94139 0.9453 0.9492 0.95311 0.95702 0.96092 0.96483 0.96873 0.97264
0.97655 0.98045 0.98436 0.98827 0.99217 0.99608 0.99998}
dup 3 -1 roll 0 1 3 copy 3 -1 roll exch ge
{pop pop pop pop pop 256 get}
{pop 3 copy pop le {pop pop pop pop 0 get}
{exch dup 4 -1 roll exch sub 3 1 roll sub div 256 mul dup
floor dup 3 1 roll sub exch cvi dup 1 add 4 -1 roll exch
get 4 -1 roll 3 -1 roll get dup 4 1 roll sub mul add}
ifelse} ifelse
} bind
dup
] put
dup /MatrixABC [
0.625 0.625 0.625
0.3712 0 0
0 0 -0.928
] put
dup /RangeLMN [0 1.1856 0 1 -0.464 1] put
dup /DecodeLMN [
{-0.1856 add 100 mul 0.625 div
dup 8 le {27 24389 div mul}
{16 add 116 div dup dup mul mul} ifelse
0.4821087968 mul} bind
{100 mul 0.625 div
dup 8 le {27 24389 div mul}
{16 add 116 div dup dup mul mul} ifelse
0.5000076295 mul} bind
{0.464 add 100 mul 0.625 div
dup 8 le {27 24389 div mul}
{16 add 116 div dup dup mul mul} ifelse
0.4124589914 mul} bind
] put
dup /MatrixLMN [1.9999694824 0 0 0 1.9999694824 0 0 0 1.9999694824] put
dup /BlackPoint [0.0158600165 0.0164488375 0.0135687348] put
dup /WhitePoint [0.9642028809 1 0.8249053955] put]
} ifelse

/CSA add_res
/CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
grestore
Adobe_AGM_Core/pt gx
%%EndPageSetup
1 -1 scale 0 -204.095 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 204.095 li
212.598 204.095 li
212.598 0 li
cp
clp
[1 0 0 1 -56.693 0 ]ct
false sop
<< /CSA /0 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.2 .4 .6 colr
true set_gvm
%ADOBeginSubsetFont: PBAAAA+BerlinSansFB-Reg-Identity-H Initial
Adobe_CoolType_Utility begin ct_MakeOCF begin ct_saveCIDInit
%ADOt1write: (1.0.24)
%%Copyright: Copyright 2017 Adobe System Incorporated. All rights reserved.
%%DocumentNeededResources: ProcSet (CIDInit)
%%IncludeResource: ProcSet (CIDInit)
%%BeginResource: CIDFont (PBAAAA+BerlinSansFB-Reg)
%%Title: (PBAAAA+BerlinSansFB-Reg Adobe Identity 0)
%%Version: 0
/CIDInit /ProcSet findresource begin
14 dict begin
/CIDFontName /PBAAAA+BerlinSansFB-Reg def
/CIDFontType 0 def
/CIDSystemInfo 3 dict dup begin
/Registry (Adobe) def
/Ordering (Identity) def
/Supplement 0 def
end def
/FontBBox {-51 -203 1074 896} def
/FontInfo 4 dict dup begin
/FSType 4 def
end def
/CIDMapOffset 57 def
/FDBytes 1 def
/GDBytes 1 def
/CIDCount 65535 def
/CDevProc {pop pop pop pop pop 0 -1000 7 index 2 div 880} def
/FDArray 1 array
dup 0
%ADOBeginFontDict
4 dict dup begin
/FontType 1 def
/PaintType 0 def
/FontMatrix [0.001 0 0 0.001 0 0] def
%ADOBeginPrivateDict
/Private 7 dict dup begin
/BlueValues [0 0] def
/password 5839 def
/MinFeature {16 16} def
/OtherSubrs[{}{}{}{systemdict/internaldict known not{pop 3}{1183615869
systemdict/internaldict get exec dup/startlock known{/startlock get exec}{dup
/strtlck known{/strtlck get exec}{pop 3}ifelse}ifelse}ifelse}executeonly]def
/SubrMapOffset 0 def
/SDBytes 1 def
/SubrCount 5 def
end def
%ADOEndPrivateDict
end put
%ADOEndFontDict
def
/GlyphDirectory 6 dict def
ct_GlyphDirProcs begin
GlyphDirectory
+
54 <001C60D8A8C9B7489B0CC723314FD450491AFA27B3DD1A9D517B6A6719C6
06457A370B2FAB2C3B9DEC2188DF9E2CE4CF16221A568502A5D531F5CF1C7FEA
E3E412FF39DDDD74DFE1327159D7336109D158027E8D7532B674DA44A5528410
648A999992D3E51DCDC9615E742A867B7F724A8B4FE498FE045A4004EC789990
9113A21B49512930C42DB0EA8006BED01D1EEBA3FD4F0CED15C6D0822C6AA02D
4D9002D56CBE9A18D00126707C96E7A1145A90B8CF74CBCC1661DD6ABE3A2D17
02B52273FDC0C2B4C53A8B54> |
48 <001C60D8A8C9B6CB900BE49DEA51A85EBAA4B249B4E531744F235E47E2FA
36149C7EA1A75A3F2DD98ACED93CEDCDCC744101EDF9E43C421973553D7466FD
4BEB398B1A7DF4A40F9AF461EA423AD8B6EAF03C54DBB7968CFE3252FDC25E27
00F980D33CA78DF52564D2D2605332C0F181E281D75305114E506693B095A20A
4C8324C5E8D525A17A0A7CA5059C80B32BF65DA36FEB78A99287075967F307E9
A57EE78955B8DFC9981F58FAC9C92D581D1154D988053F02550C97247EEFBF56
5A91A64196C83D4BAB315BB355281D66C60451DAD60B7DB040A3FE6087E2EF85
1F94D2C53071D256E67B4C47E9326FBCA958FD76854A58ED66D79E8F59E00D7D
ED6CCF94BEEE6F9DA6A005835B6D187082FD9320784F6235ED398C5B6C04D582
DCDA5B1C0F7B41B423067ADC8780A4098670620505A82DC0CDF4E7C366CD5F7E
1130019E3F894336176D> |
53 <001C60D8A8C9B7C9962F8BB4C4434C82AC928254675BA9AD2AC9E21294A2
ECDCEEA9BB4FC8B3ECE06C49493401C0D86C2AF77F1B527EFCC2789D09C7D581
31D075830A58041F109D02F34695762250CDAB9843916EE4089076BC19522561
B053D9573922C9AFEE2A287B9E43E05624D70EFBE0A45E7F2FA3288E1D8CB55C
00A2FCB2D03EE4AD99216916D2CB919180CDE12C94B98E4E53096DFDB834951F
A9C947EA10069231BA8DD5576B0A35A4AACD2086B0FDB45CFCFF30116B973D17
B7A3A8EE9E769742A41828D8384E6EB3EB87EB5655DBB821CCFF27E2C5D2A955
B46B9D54496F7F3C1CBD19164D0AD43D8D266CA566AC401FC294346AFB54E460
FD48E39F09DE7667ADF029B44B11C17D037764DFEBBDEE0BE158D7D5727B122D
5441718792D72A0ADCA67907D7F2> |
55 <001C60D8A8C9B7BA8F73BDFE03657525D242128C74A5834DF179FD8AABAC
ED348CCCAC39C170428334A011C5A208D802687F8B25430628C5258FC36392D5
0BB2B28A63ABD772526E334E5DE61BFDE997DA808E60D1351720954C3336A983
ACDB17D4C9E3F5FDAD312A1E74CE4343B52FEF7ED963DAB3A886A8CA4DBCAEB0
137FB466E217ABA96D6304913AFA4B97FC7F93C71B3DEC770236A403232AFD02
9C6F670DE465D9FBDA1A250A188BB5C51BDF39E263C41ACC33ACCE3E72B4418C
DC17514E2C7D87C9F67F272DA5AD> |
3 <001C60D8A8C9B8707C25> |
0 <001C60D8A8C9C4A637> |
!
end
ct_AddStdCIDMap
%%EndResource
ct_restoreCIDInit /PBAAAA+BerlinSansFB-Reg-Identity-H /Identity-H 0 [/PBAAAA+BerlinSansFB-Reg] ct_ComposeFont pop end end
%ADOEndSubsetFont
reset_gvm
/QXHAVT+BerlinSansFB-Reg /PBAAAA+BerlinSansFB-Reg-Identity-H findfont ct_VMDictPut
QXHAVT+BerlinSansFB-Reg [100.372 0 0 -100.372 0 0 ]msf
266.357 133.33 mo
(\0006)sh
318.232 133.33 mo
(\0000)sh
402.544 133.33 mo
(\0005)sh
467.199 133.33 mo
(\0007\000\003)
[51.4909 0 ]xsh
195.392 152.4 mo
195.808 153.244 196.832 153.601 197.679 153.197 cv
198.526 152.793 198.875 151.782 198.46 150.938 cv
198.043 150.094 197.02 149.737 196.173 150.141 cv
195.326 150.544 194.976 151.556 195.392 152.4 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.6 .4 0 .4 colr
ef
185.833 153.823 mo
186.497 154.585 187.653 154.673 188.415 154.02 cv
189.179 153.367 189.259 152.221 188.596 151.459 cv
187.932 150.697 186.776 150.609 186.013 151.262 cv
185.25 151.915 185.169 153.061 185.833 153.823 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.6667 .3686 0 .3333 colr
ef
175.646 153.75 mo
176.571 154.528 177.95 154.417 178.728 153.501 cv
179.506 152.586 179.387 151.213 178.463 150.434 cv
177.539 149.656 176.159 149.767 175.381 150.683 cv
174.603 151.598 174.722 152.971 175.646 153.75 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.7294 .3373 0 .2706 colr
ef
165.019 151.943 mo
166.189 152.858 167.877 152.656 168.79 151.493 cv
169.703 150.33 169.494 148.646 168.324 147.732 cv
167.154 146.817 165.466 147.019 164.553 148.182 cv
163.641 149.345 163.849 151.028 165.019 151.943 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.7882 .3059 0 .2118 colr
ef
154.189 147.758 mo
155.476 149.022 157.541 149.008 158.803 147.726 cv
160.066 146.444 160.046 144.38 158.759 143.116 cv
157.473 141.852 155.407 141.866 154.145 143.148 cv
152.883 144.429 152.903 146.493 154.189 147.758 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.8431 .2784 0 .1569 colr
ef
144.411 139.683 mo
145.478 141.544 147.851 142.19 149.71 141.125 cv
151.57 140.059 152.212 137.686 151.144 135.824 cv
150.076 133.962 147.703 133.317 145.844 134.382 cv
143.984 135.447 143.343 137.82 144.411 139.683 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.898 .251 0 .102 colr
ef
138.165 127.138 mo
138.383 129.632 140.579 131.477 143.071 131.26 cv
145.563 131.043 147.406 128.845 147.189 126.352 cv
146.971 123.858 144.775 122.013 142.283 122.23 cv
139.791 122.447 137.947 124.644 138.165 127.138 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.949 .2235 0 .051 colr
ef
142.067 111.435 mo
140.273 113.674 140.634 116.943 142.872 118.737 cv
145.111 120.531 148.38 120.17 150.174 117.932 cv
151.967 115.693 151.607 112.424 149.368 110.63 cv
147.13 108.837 143.861 109.197 142.067 111.435 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .2 0 0 colr
ef
163.359 170.04 mo
162.418 170.053 161.656 170.824 161.656 171.762 cv
161.656 172.7 162.419 173.451 163.36 173.438 cv
164.301 173.426 165.063 172.655 165.063 171.717 cv
165.063 170.778 164.299 170.028 163.359 170.04 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.4 .4 0 .6 colr
ef
153.329 163.832 mo
152.357 164.103 151.78 165.109 152.042 166.079 cv
152.303 167.048 153.304 167.614 154.276 167.342 cv
155.25 167.07 155.826 166.065 155.564 165.096 cv
155.303 164.126 154.302 163.561 153.329 163.832 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.498 .3686 0 .502 colr
ef
144.048 155.74 mo
142.949 156.24 142.456 157.534 142.949 158.629 cv
143.441 159.725 144.732 160.207 145.832 159.707 cv
146.932 159.207 147.424 157.913 146.932 156.818 cv
146.439 155.721 145.148 155.239 144.048 155.74 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.5922 .3373 0 .4078 colr
ef
135.919 145.747 mo
134.591 146.41 134.048 148.021 134.706 149.345 cv
135.364 150.669 136.974 151.204 138.302 150.54 cv
139.63 149.876 140.173 148.265 139.515 146.942 cv
138.857 145.618 137.247 145.083 135.919 145.747 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.6824 .3059 0 .3176 colr
ef
129.891 133.681 mo
128.196 134.3 127.321 136.172 127.936 137.862 cv
128.552 139.553 130.424 140.421 132.119 139.803 cv
133.813 139.185 134.688 137.313 134.073 135.623 cv
133.458 133.932 131.586 133.063 129.891 133.681 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.7647 .2784 0 .2353 colr
ef
128.35 119.567 mo
126.209 119.732 124.607 121.598 124.771 123.735 cv
124.935 125.872 126.803 127.47 128.943 127.306 cv
131.084 127.141 132.686 125.275 132.522 123.138 cv
132.358 121.001 130.49 119.402 128.35 119.567 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.8471 .251 0 .1529 colr
ef
133.559 105.461 mo
131.214 104.586 128.603 105.777 127.728 108.121 cv
126.854 110.465 128.046 113.074 130.391 113.949 cv
132.737 114.824 135.348 113.634 136.223 111.29 cv
137.098 108.946 135.905 106.337 133.559 105.461 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.9255 .2235 0 .0745 colr
ef
148.531 98.9417 mo
147.28 96.3596 144.172 95.2808 141.59 96.532 cv
139.008 97.7832 137.929 100.891 139.18 103.473 cv
140.432 106.055 143.539 107.134 146.121 105.882 cv
148.703 104.631 149.782 101.524 148.531 98.9417 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .2 0 0 colr
ef
216.282 65.172 mo
215.437 65.5873 215.08 66.6109 215.483 67.4582 cv
215.886 68.3054 216.898 68.6555 217.742 68.2402 cv
218.586 67.825 218.944 66.8014 218.541 65.9541 cv
218.137 65.1068 217.126 64.7567 216.282 65.172 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.6 .4 0 .4 colr
ef
216.803 75.0352 mo
216.04 75.6982 215.951 76.8544 216.604 77.6175 cv
217.256 78.3815 218.403 78.4625 219.165 77.7995 cv
219.928 77.1368 220.017 75.9802 219.364 75.2169 cv
218.712 74.4535 217.565 74.3721 216.803 75.0352 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.6667 .3686 0 .3333 colr
ef
215.778 85.167 mo
214.999 86.0911 215.109 87.471 216.023 88.25 cv
216.939 89.029 218.312 88.9116 219.092 87.9875 cv
219.871 87.064 219.761 85.6838 218.846 84.9048 cv
217.931 84.1259 216.558 84.2432 215.778 85.167 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.7294 .3373 0 .2706 colr
ef
213.076 95.3049 mo
212.16 96.4739 212.36 98.1625 213.522 99.0767 cv
214.684 99.9911 216.368 99.7847 217.284 98.6157 cv
218.2 97.447 218.001 95.7581 216.838 94.8434 cv
215.676 93.9295 213.992 94.1356 213.076 95.3049 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.7882 .3059 0 .2118 colr
ef
208.462 104.87 mo
207.196 106.155 207.208 108.221 208.488 109.485 cv
209.769 110.749 211.833 110.731 213.099 109.445 cv
214.365 108.161 214.353 106.094 213.073 104.831 cv
211.792 103.567 209.728 103.585 208.462 104.87 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.8431 .2784 0 .1569 colr
ef
201.172 112.485 mo
199.309 113.551 198.66 115.923 199.723 117.784 cv
200.786 119.645 203.159 120.289 205.023 119.224 cv
206.886 118.158 207.535 115.786 206.471 113.925 cv
205.408 112.064 203.036 111.419 201.172 112.485 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.898 .251 0 .102 colr
ef
191.701 116.442 mo
189.207 116.657 187.359 118.851 187.572 121.343 cv
187.786 123.836 189.982 125.683 192.476 125.468 cv
194.97 125.254 196.818 123.06 196.604 120.567 cv
196.391 118.075 194.195 116.228 191.701 116.442 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.949 .2235 0 .051 colr
ef
183.28 113.462 mo
181.043 111.666 177.774 112.023 175.977 114.259 cv
174.181 116.496 174.538 119.765 176.775 121.562 cv
179.011 123.358 182.28 123.001 184.077 120.764 cv
185.873 118.528 185.516 115.258 183.28 113.462 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .2 0 0 colr
ef
238.782 100.272 mo
238.769 99.3312 237.999 98.5687 237.061 98.569 cv
236.122 98.569 235.371 99.3318 235.384 100.273 cv
235.396 101.214 236.167 101.976 237.105 101.976 cv
238.043 101.976 238.794 101.213 238.782 100.272 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.4 .4 0 .6 colr
ef
232.686 109.356 mo
232.414 108.382 231.409 107.805 230.439 108.067 cv
229.47 108.328 228.903 109.329 229.175 110.302 cv
229.446 111.275 230.452 111.852 231.422 111.591 cv
232.391 111.329 232.957 110.329 232.686 109.356 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.498 .3686 0 .502 colr
ef
225.052 117.801 mo
224.552 116.7 223.258 116.207 222.162 116.699 cv
221.066 117.191 220.582 118.482 221.082 119.582 cv
221.582 120.683 222.875 121.176 223.972 120.684 cv
225.068 120.192 225.551 118.901 225.052 117.801 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.5922 .3373 0 .4078 colr
ef
215.885 125.332 mo
215.222 124.003 213.611 123.458 212.287 124.115 cv
210.962 124.772 210.425 126.382 211.088 127.711 cv
211.751 129.04 213.361 129.585 214.686 128.928 cv
216.011 128.271 216.548 126.661 215.885 125.332 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.6824 .3059 0 .3176 colr
ef
205.148 131.516 mo
204.531 129.82 202.66 128.944 200.968 129.558 cv
199.277 130.172 198.407 132.044 199.024 133.739 cv
199.641 135.434 201.512 136.311 203.203 135.697 cv
204.895 135.083 205.765 133.211 205.148 131.516 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.7647 .2784 0 .2353 colr
ef
192.649 134.692 mo
192.487 132.551 190.622 130.947 188.484 131.11 cv
186.347 131.272 184.747 133.138 184.91 135.279 cv
185.073 137.42 186.937 139.023 189.075 138.861 cv
191.212 138.699 192.813 136.833 192.649 134.692 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.8471 .251 0 .1529 colr
ef
179.292 133.243 mo
180.169 130.898 178.98 128.287 176.636 127.411 cv
174.292 126.534 171.682 127.725 170.806 130.07 cv
169.929 132.415 171.118 135.027 173.461 135.903 cv
175.805 136.779 178.415 135.589 179.292 133.243 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.9255 .2235 0 .0745 colr
ef
168.812 124.454 mo
171.395 123.205 172.476 120.098 171.227 117.515 cv
169.978 114.932 166.872 113.85 164.289 115.099 cv
161.706 116.348 160.624 119.454 161.873 122.038 cv
163.122 124.621 166.228 125.703 168.812 124.454 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .2 0 0 colr
ef
133.583 45.8902 mo
133.168 45.0458 132.145 44.688 131.298 45.0911 cv
130.45 45.4942 130.1 46.5053 130.515 47.3498 cv
130.93 48.1942 131.953 48.5519 132.801 48.1488 cv
133.648 47.7458 133.999 46.7346 133.583 45.8902 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.6 .4 0 .4 colr
ef
143.142 44.4666 mo
142.48 43.7044 141.324 43.6157 140.56 44.2679 cv
139.797 44.9205 139.716 46.0671 140.379 46.8287 cv
141.042 47.591 142.198 47.68 142.961 47.0275 cv
143.724 46.3752 143.805 45.2283 143.142 44.4666 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.6667 .3686 0 .3333 colr
ef
153.33 44.5401 mo
152.406 43.7614 151.027 43.8716 150.248 44.7867 cv
149.47 45.702 149.588 47.0745 150.512 47.8532 cv
151.435 48.6319 152.815 48.5216 153.593 47.6066 cv
154.372 46.6918 154.254 45.3187 153.33 44.5401 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.7294 .3373 0 .2706 colr
ef
163.957 46.3471 mo
162.788 45.4318 161.1 45.6322 160.186 46.7947 cv
159.273 47.9572 159.48 49.641 160.65 50.556 cv
161.819 51.471 163.507 51.2706 164.42 50.1081 cv
165.334 48.9459 165.127 47.2619 163.957 46.3471 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.7882 .3059 0 .2118 colr
ef
174.787 50.5322 mo
173.502 49.2671 171.436 49.2801 170.173 50.5608 cv
168.911 51.8418 168.929 53.9054 170.214 55.1708 cv
171.5 56.4359 173.566 56.4232 174.829 55.1422 cv
176.092 53.8609 176.073 51.7976 174.787 50.5322 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.8431 .2784 0 .1569 colr
ef
184.566 58.6076 mo
183.499 56.7452 181.126 56.098 179.266 57.1624 cv
177.406 58.2266 176.763 60.5995 177.83 62.4621 cv
178.897 64.3247 181.269 64.9719 183.129 63.9075 cv
184.99 62.8428 185.632 60.4705 184.566 58.6076 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.898 .251 0 .102 colr
ef
190.811 71.1523 mo
190.595 68.6586 188.399 66.8121 185.907 67.0281 cv
183.415 67.2439 181.57 69.4399 181.786 71.9341 cv
182.002 74.4277 184.198 76.2745 186.69 76.0588 cv
189.183 75.8428 191.027 73.6465 190.811 71.1523 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.949 .2235 0 .051 colr
ef
186.907 86.8554 mo
188.702 84.618 188.343 81.3488 186.105 79.5536 cv
183.868 77.7581 180.599 78.1167 178.803 80.3541 cv
177.008 82.5918 177.367 85.861 179.605 87.6561 cv
181.842 89.4516 185.111 89.093 186.907 86.8554 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .2 0 0 colr
ef
165.616 28.2482 mo
166.556 28.2363 167.319 27.4661 167.32 26.5276 cv
167.32 25.5893 166.557 24.8384 165.616 24.8503 cv
164.675 24.8622 163.913 25.6327 163.912 26.571 cv
163.912 27.5092 164.675 28.2601 165.616 28.2482 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.4 .4 0 .6 colr
ef
175.645 34.4569 mo
176.618 34.1862 177.195 33.1805 176.934 32.211 cv
176.674 31.2413 175.673 30.675 174.7 30.9459 cv
173.727 31.2169 173.149 32.2227 173.41 33.1921 cv
173.671 34.1616 174.672 34.7279 175.645 34.4569 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.498 .3686 0 .502 colr
ef
184.925 42.5501 mo
186.026 42.0507 186.519 40.7575 186.028 39.6608 cv
185.536 38.5646 184.245 38.0807 183.145 38.5802 cv
182.044 39.0794 181.551 40.3731 182.042 41.4693 cv
182.534 42.5654 183.825 43.0493 184.925 42.5501 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.5922 .3373 0 .4078 colr
ef
193.054 52.5437 mo
194.383 51.8815 194.928 50.2706 194.271 48.9459 cv
193.615 47.621 192.005 47.0841 190.675 47.7466 cv
189.346 48.4091 188.801 50.02 189.458 51.3446 cv
190.115 52.6693 191.725 53.2061 193.054 52.5437 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.6824 .3059 0 .3176 colr
ef
199.081 64.6088 mo
200.777 63.9922 201.654 62.1217 201.041 60.4299 cv
200.427 58.7388 198.556 57.8677 196.86 58.4842 cv
195.165 59.1005 194.288 60.9716 194.901 62.6628 cv
195.514 64.3539 197.386 65.2253 199.081 64.6088 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.7647 .2784 0 .2353 colr
ef
200.622 78.7222 mo
202.762 78.5598 204.366 76.6957 204.205 74.5581 cv
204.044 72.4208 202.177 70.8198 200.037 70.9825 cv
197.896 71.1449 196.291 73.009 196.453 75.1466 cv
196.614 77.2836 198.481 78.8849 200.622 78.7222 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.8471 .251 0 .1529 colr
ef
195.411 92.8251 mo
197.756 93.703 200.367 92.5156 201.245 90.1727 cv
202.123 87.8293 200.933 85.2184 198.589 84.3407 cv
196.244 83.4626 193.632 84.6503 192.755 86.9934 cv
191.877 89.3365 193.066 91.9475 195.411 92.8251 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.9255 .2235 0 .0745 colr
ef
180.442 99.3414 mo
181.69 101.925 184.796 103.007 187.38 101.759 cv
189.963 100.511 191.046 97.4048 189.797 94.8213 cv
188.549 92.2378 185.443 91.1552 182.86 92.4036 cv
180.276 93.6517 179.193 96.7579 180.442 99.3414 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .2 0 0 colr
ef
112.695 133.117 mo
113.539 132.701 113.896 131.677 113.492 130.83 cv
113.088 129.983 112.077 129.633 111.233 130.049 cv
110.388 130.465 110.031 131.488 110.435 132.335 cv
110.839 133.182 111.85 133.532 112.695 133.117 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.6 .4 0 .4 colr
ef
112.173 123.252 mo
112.935 122.589 113.023 121.433 112.37 120.67 cv
111.718 119.907 110.571 119.827 109.809 120.49 cv
109.048 121.153 108.96 122.309 109.612 123.072 cv
110.265 123.834 111.412 123.915 112.173 123.252 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.6667 .3686 0 .3333 colr
ef
113.198 113.119 mo
113.976 112.195 113.865 110.815 112.949 110.038 cv
112.034 109.26 110.661 109.379 109.883 110.303 cv
109.105 111.227 109.216 112.607 110.132 113.384 cv
111.047 114.162 112.42 114.043 113.198 113.119 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.7294 .3373 0 .2706 colr
ef
115.901 102.98 mo
116.815 101.811 116.613 100.123 115.45 99.2104 cv
114.287 98.2977 112.604 98.506 111.69 99.6759 cv
110.776 100.846 110.977 102.534 112.14 103.446 cv
113.303 104.358 114.987 104.15 115.901 102.98 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.7882 .3059 0 .2118 colr
ef
120.517 93.4144 mo
121.78 92.1278 121.765 90.0622 120.483 88.8008 cv
119.201 87.5394 117.137 87.5603 115.873 88.847 cv
114.61 90.1339 114.625 92.1992 115.907 93.4607 cv
117.189 94.7221 119.252 94.7014 120.517 93.4144 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.8431 .2784 0 .1569 colr
ef
127.808 85.8 mo
129.67 84.7314 130.314 82.3585 129.249 80.4995 cv
128.182 78.6406 125.809 77.9996 123.947 79.068 cv
122.086 80.1367 121.442 82.5096 122.507 84.3685 cv
123.574 86.2275 125.946 86.8681 127.808 85.8 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.898 .251 0 .102 colr
ef
137.281 81.8451 mo
139.774 81.6271 141.619 79.4303 141.402 76.9384 cv
141.185 74.4464 138.987 72.6033 136.493 72.8213 cv
133.999 73.0393 132.155 75.2356 132.372 77.7278 cv
132.589 80.2195 134.787 82.0628 137.281 81.8451 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.949 .2235 0 .051 colr
ef
145.702 84.8314 mo
147.941 86.6243 151.209 86.2626 153.003 84.0233 cv
154.796 81.7842 154.434 78.5156 152.195 76.7224 cv
149.956 74.9294 146.687 75.2911 144.894 77.5305 cv
143.101 79.7696 143.462 83.0382 145.702 84.8314 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .2 0 0 colr
ef
90.1936 98.0159 mo
90.2058 98.9567 90.9763 99.7193 91.9145 99.7193 cv
92.8528 99.7196 93.6037 98.9567 93.5915 98.0159 cv
93.5793 97.0751 92.8089 96.3123 91.8706 96.3123 cv
90.9323 96.3123 90.1814 97.0748 90.1936 98.0159 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.4 .4 0 .6 colr
ef
96.2898 88.9332 mo
96.5611 89.9057 97.5668 90.4823 98.536 90.2209 cv
99.5051 89.9599 100.071 88.959 99.7997 87.9864 cv
99.5281 87.0135 98.5226 86.437 97.5535 86.698 cv
96.5843 86.9597 96.0182 87.96 96.2898 88.9332 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.498 .3686 0 .502 colr
ef
103.925 80.4873 mo
104.425 81.5875 105.718 82.0798 106.814 81.5877 cv
107.909 81.0956 108.392 79.8053 107.892 78.7052 cv
107.393 77.6056 106.099 77.113 105.004 77.6051 cv
103.908 78.0969 103.425 79.3872 103.925 80.4873 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.5922 .3373 0 .4078 colr
ef
113.091 72.9579 mo
113.754 74.2863 115.365 74.8297 116.689 74.1723 cv
118.013 73.5147 118.549 71.9046 117.885 70.5763 cv
117.222 69.2482 115.611 68.7046 114.287 69.3622 cv
112.964 70.0198 112.428 71.6296 113.091 72.9579 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.6824 .3059 0 .3176 colr
ef
123.829 66.7756 mo
124.447 68.4699 126.319 69.3449 128.009 68.7298 cv
129.699 68.115 130.568 66.243 129.95 64.5484 cv
129.332 62.8539 127.461 61.9788 125.77 62.5936 cv
124.079 63.2085 123.21 65.0805 123.829 66.7756 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.7647 .2784 0 .2353 colr
ef
136.326 63.5996 mo
136.491 65.7401 138.357 67.3422 140.494 67.1787 cv
142.631 67.0154 144.23 65.1476 144.065 63.0072 cv
143.9 60.8668 142.035 59.2646 139.898 59.4279 cv
137.761 59.5915 136.162 61.4592 136.326 63.5996 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.8471 .251 0 .1529 colr
ef
149.682 65.049 mo
148.808 67.3947 149.998 70.0051 152.342 70.8796 cv
154.687 71.7541 157.296 70.5615 158.171 68.2156 cv
159.045 65.8702 157.855 63.2595 155.51 62.385 cv
153.167 61.5102 150.557 62.7028 149.682 65.049 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
.9255 .2235 0 .0745 colr
ef
160.16 73.837 mo
157.578 75.0879 156.499 78.195 157.749 80.7773 cv
159 83.3597 162.107 84.4388 164.69 83.1879 cv
167.272 81.937 168.351 78.8299 167.1 76.2476 cv
165.849 73.6652 162.742 72.586 160.16 73.837 cv
<< /CSA /1 get_csa_by_name
/Intent /RelativeColorimetric 
>> csacrd
1 .2 0 0 colr
ef
grestore
grestore
pgrs
%%PageTrailer
[
[/CSA [/0 /1 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Utils begin
[/EMC pdfmark_5
currentdict Adobe_AGM_Utils eq {end} if
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.29 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EOF
